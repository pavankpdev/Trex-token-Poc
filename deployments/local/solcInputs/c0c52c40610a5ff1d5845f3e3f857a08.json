{
  "language": "Solidity",
  "sources": {
    "@onchain-id/solidity/contracts/ClaimIssuer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport \"./interface/IClaimIssuer.sol\";\nimport \"./Identity.sol\";\n\ncontract ClaimIssuer is IClaimIssuer, Identity {\n    mapping (bytes => bool) public revokedClaims;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address initialManagementKey) Identity(initialManagementKey, false) {}\n\n    /**\n     *  @dev See {IClaimIssuer-revokeClaimBySignature}.\n     */\n    function revokeClaimBySignature(bytes calldata signature) external override delegatedOnly onlyManager {\n        require(!revokedClaims[signature], \"Conflict: Claim already revoked\");\n\n        revokedClaims[signature] = true;\n\n        emit ClaimRevoked(signature);\n    }\n\n    /**\n     *  @dev See {IClaimIssuer-revokeClaim}.\n     */\n    function revokeClaim(bytes32 _claimId, address _identity) external override delegatedOnly onlyManager returns(bool) {\n        uint256 foundClaimTopic;\n        uint256 scheme;\n        address issuer;\n        bytes memory sig;\n        bytes memory data;\n\n        ( foundClaimTopic, scheme, issuer, sig, data, ) = Identity(_identity).getClaim(_claimId);\n\n        require(!revokedClaims[sig], \"Conflict: Claim already revoked\");\n\n        revokedClaims[sig] = true;\n        emit ClaimRevoked(sig);\n        return true;\n    }\n\n    /**\n     *  @dev See {IClaimIssuer-isClaimValid}.\n     */\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes memory sig,\n        bytes memory data)\n    external override view returns (bool claimValid)\n    {\n        bytes32 dataHash = keccak256(abi.encode(_identity, claimTopic, data));\n        // Use abi.encodePacked to concatenate the message prefix and the message to sign.\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash));\n\n        // Recover address of data signer\n        address recovered = getRecoveredAddress(sig, prefixedHash);\n\n        // Take hash of recovered address\n        bytes32 hashedAddr = keccak256(abi.encode(recovered));\n\n        // Does the trusted identifier have they key which signed the user's claim?\n        //  && (isClaimRevoked(_claimId) == false)\n        if (keyHasPurpose(hashedAddr, 3) && (isClaimRevoked(sig) == false)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     *  @dev See {IClaimIssuer-isClaimRevoked}.\n     */\n    function isClaimRevoked(bytes memory _sig) public override view returns (bool) {\n        if (revokedClaims[_sig]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     *  @dev See {IClaimIssuer-getRecoveredAddress}.\n     */\n    function getRecoveredAddress(bytes memory sig, bytes32 dataHash)\n        public override\n        pure\n        returns (address addr)\n    {\n        bytes32 ra;\n        bytes32 sa;\n        uint8 va;\n\n        // Check the signature length\n        if (sig.length != 65) {\n            return address(0);\n        }\n\n        // Divide the signature in r, s and v variables\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            ra := mload(add(sig, 32))\n            sa := mload(add(sig, 64))\n            va := byte(0, mload(add(sig, 96)))\n        }\n\n        if (va < 27) {\n            va += 27;\n        }\n\n        address recoveredAddress = ecrecover(dataHash, va, ra, sa);\n\n        return (recoveredAddress);\n    }\n}\n"
    },
    "@onchain-id/solidity/contracts/factory/IIdFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IIdFactory {\n\n    /// events\n\n    // event emitted whenever a single contract is deployed by the factory\n    event Deployed(address indexed _addr);\n\n    // event emitted when a wallet is linked to an ONCHAINID contract\n    event WalletLinked(address indexed wallet, address indexed identity);\n\n    // event emitted when a token is linked to an ONCHAINID contract\n    event TokenLinked(address indexed token, address indexed identity);\n\n    // event emitted when a wallet is unlinked from an ONCHAINID contract\n    event WalletUnlinked(address indexed wallet, address indexed identity);\n\n    // event emitted when an address is registered on the factory as a Token\n    // factory address, granting this address the privilege to issue\n    // Onchain identities for tokens\n    event TokenFactoryAdded(address indexed factory);\n\n    // event emitted when a previously recorded token factory address is removed\n    event TokenFactoryRemoved(address indexed factory);\n\n    /// functions\n\n    /**\n     *  @dev function used to create a new Identity proxy from the factory\n     *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n     *  @param _salt the salt used by create2 to issue the contract\n     *  requires a new salt for each deployment\n     *  _wallet cannot be linked to another ONCHAINID\n     *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n     *  of the function, including calls to oracles for multichain\n     *  deployment security (avoid identity theft), defining payment requirements, etc.\n     */\n    function createIdentity(address _wallet, string memory _salt) external returns (address);\n\n    /**\n     *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\n     * MANAGEMENT keys.\n     *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n     *  @param _salt the salt used by create2 to issue the contract\n     *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\n     *  requires a new salt for each deployment\n     *  _wallet cannot be linked to another ONCHAINID\n     *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n     *  of the function, including calls to oracles for multichain\n     *  deployment security (avoid identity theft), defining payment requirements, etc.\n     */\n    function createIdentityWithManagementKeys(\n        address _wallet,\n        string memory _salt,\n        bytes32[] memory _managementKeys\n    ) external returns (address);\n\n    /**\n     *  @dev function used to create a new Token Identity proxy from the factory\n     *  @param _token the address of the token contract\n     *  @param _tokenOwner the owner address of the token\n     *  @param _salt the salt used by create2 to issue the contract\n     *  requires a new salt for each deployment\n     *  _token cannot be linked to another ONCHAINID\n     *  only Token factory or owner can call (owner should only use its privilege\n     *  for tokens not issued by a Token factory onchain\n     */\n    function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\n\n    /**\n     *  @dev function used to link a new wallet to an existing identity\n     *  @param _newWallet the address of the wallet to link\n     *  requires msg.sender to be linked to an existing onchainid\n     *  the _newWallet will be linked to the same OID contract as msg.sender\n     *  _newWallet cannot be linked to an OID yet\n     *  _newWallet cannot be address 0\n     *  cannot link more than 100 wallets to an OID, for gas consumption reason\n     */\n    function linkWallet(address _newWallet) external;\n\n    /**\n     *  @dev function used to unlink a wallet from an existing identity\n     *  @param _oldWallet the address of the wallet to unlink\n     *  requires msg.sender to be linked to the same onchainid as _oldWallet\n     *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\n     *  _oldWallet cannot be address 0\n     */\n    function unlinkWallet(address _oldWallet) external;\n\n    /**\n     *  @dev function used to register an address as a token factory\n     *  @param _factory the address of the token factory\n     *  can be called only by Owner\n     *  _factory cannot be registered yet\n     *  once the factory has been registered it can deploy token identities\n     */\n    function addTokenFactory(address _factory) external;\n\n    /**\n     *  @dev function used to unregister an address previously registered as a token factory\n     *  @param _factory the address of the token factory\n     *  can be called only by Owner\n     *  _factory has to be registered previously\n     *  once the factory has been unregistered it cannot deploy token identities anymore\n     */\n    function removeTokenFactory(address _factory) external;\n\n    /**\n     *  @dev getter for OID contract corresponding to a wallet/token\n     *  @param _wallet the wallet/token address\n     */\n    function getIdentity(address _wallet) external view returns (address);\n\n    /**\n     *  @dev getter to fetch the array of wallets linked to an OID contract\n     *  @param _identity the address of the OID contract\n     *  returns an array of addresses linked to the OID\n     */\n    function getWallets(address _identity) external view returns (address[] memory);\n\n    /**\n     *  @dev getter to fetch the token address linked to an OID contract\n     *  @param _identity the address of the OID contract\n     *  returns the address linked to the OID\n     */\n    function getToken(address _identity) external view returns (address);\n\n    /**\n     *  @dev getter to know if an address is registered as token factory or not\n     *  @param _factory the address of the factory\n     *  returns true if the address corresponds to a registered factory\n     */\n    function isTokenFactory(address _factory) external view returns(bool);\n\n    /**\n     *  @dev getter to know if a salt is taken for the create2 deployment\n     *  @param _salt the salt used for deployment\n     */\n    function isSaltTaken(string calldata _salt) external view returns (bool);\n}\n"
    },
    "@onchain-id/solidity/contracts/Identity.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport \"./interface/IIdentity.sol\";\nimport \"./interface/IClaimIssuer.sol\";\nimport \"./version/Version.sol\";\nimport \"./storage/Storage.sol\";\n\n/**\n * @dev Implementation of the `IERC734` \"KeyHolder\" and the `IERC735` \"ClaimHolder\" interfaces\n * into a common Identity Contract.\n * This implementation has a separate contract were it declares all storage,\n * allowing for it to be used as an upgradable logic contract.\n */\ncontract Identity is Storage, IIdentity, Version {\n\n    /**\n     * @notice Prevent any direct calls to the implementation contract (marked by _canInteract = false).\n     */\n    modifier delegatedOnly() {\n        require(_canInteract == true, \"Interacting with the library contract is forbidden.\");\n        _;\n    }\n\n    /**\n     * @notice requires management key to call this function, or internal call\n     */\n    modifier onlyManager() {\n        require(msg.sender == address(this) || keyHasPurpose(keccak256(abi.encode(msg.sender)), 1)\n        , \"Permissions: Sender does not have management key\");\n        _;\n    }\n\n    /**\n     * @notice requires claim key to call this function, or internal call\n     */\n    modifier onlyClaimKey() {\n        require(msg.sender == address(this) || keyHasPurpose(keccak256(abi.encode(msg.sender)), 3)\n        , \"Permissions: Sender does not have claim signer key\");\n        _;\n    }\n\n    /**\n     * @notice constructor of the Identity contract\n     * @param initialManagementKey the address of the management key at deployment\n     * @param _isLibrary boolean value stating if the contract is library or not\n     * calls __Identity_init if contract is not library\n     */\n    constructor(address initialManagementKey, bool _isLibrary) {\n        require(initialManagementKey != address(0), \"invalid argument - zero address\");\n\n        if (!_isLibrary) {\n            __Identity_init(initialManagementKey);\n        } else {\n            _initialized = true;\n        }\n    }\n\n    /**\n     * @notice When using this contract as an implementation for a proxy, call this initializer with a delegatecall.\n     *\n     * @param initialManagementKey The ethereum address to be set as the management key of the ONCHAINID.\n     */\n    function initialize(address initialManagementKey) external {\n        require(initialManagementKey != address(0), \"invalid argument - zero address\");\n        __Identity_init(initialManagementKey);\n    }\n\n    /**\n     * @dev See {IERC734-execute}.\n     * @notice Passes an execution instruction to the keymanager.\n     * If the sender is an ACTION key and the destination address is not the identity contract itself, then the\n     * execution is immediately approved and performed.\n     * If the destination address is the identity itself, then the execution would be performed immediately only if\n     * the sender is a MANAGEMENT key.\n     * Otherwise the execution request must be approved via the `approve` method.\n     * @return executionId to use in the approve function, to approve or reject this execution.\n     */\n    function execute(address _to, uint256 _value, bytes memory _data)\n    external\n    delegatedOnly\n    override\n    payable\n    returns (uint256 executionId)\n    {\n        uint256 _executionId = _executionNonce;\n        _executions[_executionId].to = _to;\n        _executions[_executionId].value = _value;\n        _executions[_executionId].data = _data;\n        _executionNonce++;\n\n        emit ExecutionRequested(_executionId, _to, _value, _data);\n\n        if (keyHasPurpose(keccak256(abi.encode(msg.sender)), 1)) {\n            approve(_executionId, true);\n        }\n        else if (_to != address(this) && keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)){\n            approve(_executionId, true);\n        }\n\n        return _executionId;\n    }\n\n    /**\n     * @dev See {IERC734-getKey}.\n     * @notice Implementation of the getKey function from the ERC-734 standard\n     * @param _key The public key.  for non-hex and long keys, its the Keccak256 hash of the key\n     * @return purposes Returns the full key data, if present in the identity.\n     * @return keyType Returns the full key data, if present in the identity.\n     * @return key Returns the full key data, if present in the identity.\n     */\n    function getKey(bytes32 _key)\n    external\n    override\n    view\n    returns(uint256[] memory purposes, uint256 keyType, bytes32 key)\n    {\n        return (_keys[_key].purposes, _keys[_key].keyType, _keys[_key].key);\n    }\n\n    /**\n    * @dev See {IERC734-getKeyPurposes}.\n    * @notice gets the purposes of a key\n    * @param _key The public key.  for non-hex and long keys, its the Keccak256 hash of the key\n    * @return _purposes Returns the purposes of the specified key\n    */\n    function getKeyPurposes(bytes32 _key)\n    external\n    override\n    view\n    returns(uint256[] memory _purposes)\n    {\n        return (_keys[_key].purposes);\n    }\n\n    /**\n    * @dev See {IERC734-getKeysByPurpose}.\n    * @notice gets all the keys with a specific purpose from an identity\n    * @param _purpose a uint256[] Array of the key types, like 1 = MANAGEMENT, 2 = ACTION, 3 = CLAIM, 4 = ENCRYPTION\n    * @return keys Returns an array of public key bytes32 hold by this identity and having the specified purpose\n    */\n    function getKeysByPurpose(uint256 _purpose)\n    external\n    override\n    view\n    returns(bytes32[] memory keys)\n    {\n        return _keysByPurpose[_purpose];\n    }\n\n    /**\n    * @dev See {IERC735-getClaimIdsByTopic}.\n    * @notice Implementation of the getClaimIdsByTopic function from the ERC-735 standard.\n    * used to get all the claims from the specified topic\n    * @param _topic The identity of the claim i.e. keccak256(abi.encode(_issuer, _topic))\n    * @return claimIds Returns an array of claim IDs by topic.\n    */\n    function getClaimIdsByTopic(uint256 _topic)\n    external\n    override\n    view\n    returns(bytes32[] memory claimIds)\n    {\n        return _claimsByTopic[_topic];\n    }\n\n    /**\n    * @notice implementation of the addKey function of the ERC-734 standard\n    * Adds a _key to the identity. The _purpose specifies the purpose of key. Initially we propose four purposes:\n    * 1: MANAGEMENT keys, which can manage the identity\n    * 2: ACTION keys, which perform actions in this identities name (signing, logins, transactions, etc.)\n    * 3: CLAIM signer keys, used to sign claims on other identities which need to be revokable.\n    * 4: ENCRYPTION keys, used to encrypt data e.g. hold in claims.\n    * MUST only be done by keys of purpose 1, or the identity itself.\n    * If its the identity itself, the approval process will determine its approval.\n    * @param _key keccak256 representation of an ethereum address\n    * @param _type type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc.\n    * @param _purpose a uint256 specifying the key type, like 1 = MANAGEMENT, 2 = ACTION, 3 = CLAIM, 4 = ENCRYPTION\n    * @return success Returns TRUE if the addition was successful and FALSE if not\n    */\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n    public\n    delegatedOnly\n    onlyManager\n    override\n    returns (bool success)\n    {\n        if (_keys[_key].key == _key) {\n            uint256[] memory _purposes = _keys[_key].purposes;\n            for (uint keyPurposeIndex = 0; keyPurposeIndex < _purposes.length; keyPurposeIndex++) {\n                uint256 purpose = _purposes[keyPurposeIndex];\n\n                if (purpose == _purpose) {\n                    revert(\"Conflict: Key already has purpose\");\n                }\n            }\n\n            _keys[_key].purposes.push(_purpose);\n        } else {\n            _keys[_key].key = _key;\n            _keys[_key].purposes = [_purpose];\n            _keys[_key].keyType = _type;\n        }\n\n        _keysByPurpose[_purpose].push(_key);\n\n        emit KeyAdded(_key, _purpose, _type);\n\n        return true;\n    }\n\n    /**\n     *  @dev See {IERC734-approve}.\n     *  @notice Approves an execution.\n     *  If the sender is an ACTION key and the destination address is not the identity contract itself, then the\n     *  approval is authorized and the operation would be performed.\n     *  If the destination address is the identity itself, then the execution would be authorized and performed only\n     *  if the sender is a MANAGEMENT key.\n     */\n    function approve(uint256 _id, bool _approve)\n    public\n    delegatedOnly\n    override\n    returns (bool success)\n    {\n        require(_id < _executionNonce, \"Cannot approve a non-existing execution\");\n        require(!_executions[_id].executed, \"Request already executed\");\n\n        if(_executions[_id].to == address(this)) {\n            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 1), \"Sender does not have management key\");\n        }\n        else {\n            require(keyHasPurpose(keccak256(abi.encode(msg.sender)), 2), \"Sender does not have action key\");\n        }\n\n        emit Approved(_id, _approve);\n\n        if (_approve == true) {\n            _executions[_id].approved = true;\n\n            // solhint-disable-next-line avoid-low-level-calls\n            (success,) = _executions[_id].to.call{value:(_executions[_id].value)}(_executions[_id].data);\n\n            if (success) {\n                _executions[_id].executed = true;\n\n                emit Executed(\n                    _id,\n                    _executions[_id].to,\n                    _executions[_id].value,\n                    _executions[_id].data\n                );\n\n                return true;\n            } else {\n                emit ExecutionFailed(\n                    _id,\n                    _executions[_id].to,\n                    _executions[_id].value,\n                    _executions[_id].data\n                );\n\n                return false;\n            }\n        } else {\n            _executions[_id].approved = false;\n        }\n        return false;\n    }\n\n    /**\n    * @dev See {IERC734-removeKey}.\n    * @notice Remove the purpose from a key.\n    */\n    function removeKey(bytes32 _key, uint256 _purpose)\n    public\n    delegatedOnly\n    onlyManager\n    override\n    returns (bool success)\n    {\n        require(_keys[_key].key == _key, \"NonExisting: Key isn't registered\");\n        uint256[] memory _purposes = _keys[_key].purposes;\n\n        uint purposeIndex = 0;\n        while (_purposes[purposeIndex] != _purpose) {\n            purposeIndex++;\n\n            if (purposeIndex == _purposes.length) {\n                revert(\"NonExisting: Key doesn't have such purpose\");\n            }\n        }\n\n        _purposes[purposeIndex] = _purposes[_purposes.length - 1];\n        _keys[_key].purposes = _purposes;\n        _keys[_key].purposes.pop();\n\n        uint keyIndex = 0;\n        uint arrayLength = _keysByPurpose[_purpose].length;\n\n        while (_keysByPurpose[_purpose][keyIndex] != _key) {\n            keyIndex++;\n\n            if (keyIndex >= arrayLength) {\n                break;\n            }\n        }\n\n        _keysByPurpose[_purpose][keyIndex] = _keysByPurpose[_purpose][arrayLength - 1];\n        _keysByPurpose[_purpose].pop();\n\n        uint keyType = _keys[_key].keyType;\n\n        if (_purposes.length - 1 == 0) {\n            delete _keys[_key];\n        }\n\n        emit KeyRemoved(_key, _purpose, keyType);\n\n        return true;\n    }\n\n    /**\n    * @dev See {IERC735-addClaim}.\n    * @notice Implementation of the addClaim function from the ERC-735 standard\n    *  Require that the msg.sender has claim signer key.\n    *\n    * @param _topic The type of claim\n    * @param _scheme The scheme with which this claim SHOULD be verified or how it should be processed.\n    * @param _issuer The issuers identity contract address, or the address used to sign the above signature.\n    * @param _signature Signature which is the proof that the claim issuer issued a claim of topic for this identity.\n    * it MUST be a signed message of the following structure:\n    * keccak256(abi.encode(address identityHolder_address, uint256 _ topic, bytes data))\n    * @param _data The hash of the claim data, sitting in another\n    * location, a bit-mask, call data, or actual data based on the claim scheme.\n    * @param _uri The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.\n    *\n    * @return claimRequestId Returns claimRequestId: COULD be\n    * send to the approve function, to approve or reject this claim.\n    * triggers ClaimAdded event.\n    */\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address _issuer,\n        bytes memory _signature,\n        bytes memory _data,\n        string memory _uri\n    )\n    public\n    delegatedOnly\n    onlyClaimKey\n    override\n    returns (bytes32 claimRequestId)\n    {\n        if (_issuer != address(this)) {\n            require(IClaimIssuer(_issuer).isClaimValid(IIdentity(address(this)), _topic, _signature, _data), \"invalid claim\");\n        }\n\n        bytes32 claimId = keccak256(abi.encode(_issuer, _topic));\n        _claims[claimId].topic = _topic;\n        _claims[claimId].scheme = _scheme;\n        _claims[claimId].signature = _signature;\n        _claims[claimId].data = _data;\n        _claims[claimId].uri = _uri;\n\n        if (_claims[claimId].issuer != _issuer) {\n            _claimsByTopic[_topic].push(claimId);\n            _claims[claimId].issuer = _issuer;\n\n            emit ClaimAdded(claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\n        }\n        else {\n            emit ClaimChanged(claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\n        }\n        return claimId;\n    }\n\n    /**\n    * @dev See {IERC735-removeClaim}.\n    * @notice Implementation of the removeClaim function from the ERC-735 standard\n    * Require that the msg.sender has management key.\n    * Can only be removed by the claim issuer, or the claim holder itself.\n    *\n    * @param _claimId The identity of the claim i.e. keccak256(abi.encode(_issuer, _topic))\n    *\n    * @return success Returns TRUE when the claim was removed.\n    * triggers ClaimRemoved event\n    */\n    function removeClaim(bytes32 _claimId)\n    public\n    delegatedOnly\n    onlyClaimKey\n    override\n    returns\n    (bool success) {\n        uint256 _topic = _claims[_claimId].topic;\n        if (_topic == 0) {\n            revert(\"NonExisting: There is no claim with this ID\");\n        }\n\n        uint claimIndex = 0;\n        uint arrayLength = _claimsByTopic[_topic].length;\n        while (_claimsByTopic[_topic][claimIndex] != _claimId) {\n            claimIndex++;\n\n            if (claimIndex >= arrayLength) {\n                break;\n            }\n        }\n\n        _claimsByTopic[_topic][claimIndex] =\n        _claimsByTopic[_topic][arrayLength - 1];\n        _claimsByTopic[_topic].pop();\n\n        emit ClaimRemoved(\n            _claimId,\n            _topic,\n            _claims[_claimId].scheme,\n            _claims[_claimId].issuer,\n            _claims[_claimId].signature,\n            _claims[_claimId].data,\n            _claims[_claimId].uri\n        );\n\n        delete _claims[_claimId];\n\n        return true;\n    }\n\n    /**\n    * @dev See {IERC735-getClaim}.\n    * @notice Implementation of the getClaim function from the ERC-735 standard.\n    *\n    * @param _claimId The identity of the claim i.e. keccak256(abi.encode(_issuer, _topic))\n    *\n    * @return topic Returns all the parameters of the claim for the\n    * specified _claimId (topic, scheme, signature, issuer, data, uri) .\n    * @return scheme Returns all the parameters of the claim for the\n    * specified _claimId (topic, scheme, signature, issuer, data, uri) .\n    * @return issuer Returns all the parameters of the claim for the\n    * specified _claimId (topic, scheme, signature, issuer, data, uri) .\n    * @return signature Returns all the parameters of the claim for the\n    * specified _claimId (topic, scheme, signature, issuer, data, uri) .\n    * @return data Returns all the parameters of the claim for the\n    * specified _claimId (topic, scheme, signature, issuer, data, uri) .\n    * @return uri Returns all the parameters of the claim for the\n    * specified _claimId (topic, scheme, signature, issuer, data, uri) .\n    */\n    function getClaim(bytes32 _claimId)\n    public\n    override\n    view\n    returns(\n        uint256 topic,\n        uint256 scheme,\n        address issuer,\n        bytes memory signature,\n        bytes memory data,\n        string memory uri\n    )\n    {\n        return (\n        _claims[_claimId].topic,\n        _claims[_claimId].scheme,\n        _claims[_claimId].issuer,\n        _claims[_claimId].signature,\n        _claims[_claimId].data,\n        _claims[_claimId].uri\n        );\n    }\n\n    /**\n    * @dev See {IERC734-keyHasPurpose}.\n    * @notice Returns true if the key has MANAGEMENT purpose or the specified purpose.\n    */\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n    public\n    override\n    view\n    returns(bool result)\n    {\n        Key memory key = _keys[_key];\n        if (key.key == 0) return false;\n\n        for (uint keyPurposeIndex = 0; keyPurposeIndex < key.purposes.length; keyPurposeIndex++) {\n            uint256 purpose = key.purposes[keyPurposeIndex];\n\n            if (purpose == 1 || purpose == _purpose) return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @notice Initializer internal function for the Identity contract.\n     *\n     * @param initialManagementKey The ethereum address to be set as the management key of the ONCHAINID.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Identity_init(address initialManagementKey) internal {\n        require(!_initialized || _isConstructor(), \"Initial key was already setup.\");\n        _initialized = true;\n        _canInteract = true;\n\n        bytes32 _key = keccak256(abi.encode(initialManagementKey));\n        _keys[_key].key = _key;\n        _keys[_key].purposes = [1];\n        _keys[_key].keyType = 1;\n        _keysByPurpose[1].push(_key);\n        emit KeyAdded(_key, 1, 1);\n    }\n\n    /**\n     * @notice Computes if the context in which the function is called is a constructor or not.\n     *\n     * @return true if the context is a constructor.\n     */\n    function _isConstructor() private view returns (bool) {\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n"
    },
    "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport \"./IIdentity.sol\";\n\ninterface IClaimIssuer is IIdentity {\n\n    /**\n     * @dev Emitted when a claim is revoked.\n     *\n     * Specification: MUST be triggered when revoking a claim.\n     */\n    event ClaimRevoked(bytes indexed signature);\n\n    /**\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n     * @notice will fetch the claim from the identity contract (unsafe).\n     * @param _claimId the id of the claim\n     * @param _identity the address of the identity contract\n     * @return isRevoked true when the claim is revoked\n     */\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\n\n    /**\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n     * @param signature the signature of the claim\n     */\n    function revokeClaimBySignature(bytes calldata signature) external;\n\n    /**\n     * @dev Returns revocation status of a claim.\n     * @param _sig the signature of the claim\n     * @return isRevoked true if the claim is revoked and false otherwise\n     */\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\n\n    /**\n     * @dev Checks if a claim is valid.\n     * @param _identity the identity contract related to the claim\n     * @param claimTopic the claim topic of the claim\n     * @param sig the signature of the claim\n     * @param data the data field of the claim\n     * @return claimValid true if the claim is valid, false otherwise\n     */\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    external view returns (bool);\n\n    /**\n     * @dev returns the address that signed the given data\n     * @param sig the signature of the data\n     * @param dataHash the data that was signed\n     * returns the address that signed dataHash and created the signature sig\n     */\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\n}\n"
    },
    "@onchain-id/solidity/contracts/interface/IERC734.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\n/**\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\n */\ninterface IERC734 {\n\n    /**\n     * @dev Emitted when an execution request was approved.\n     *\n     * Specification: MUST be triggered when approve was successfully called.\n     */\n    event Approved(uint256 indexed executionId, bool approved);\n\n    /**\n     * @dev Emitted when an execute operation was approved and successfully performed.\n     *\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\n     */\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execution request was performed via `execute`.\n     *\n     * Specification: MUST be triggered when execute was successfully called.\n     */\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execute operation was called and failed\n     *\n     * Specification: MUST be triggered when execute call failed\n     */\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when a key was added to the Identity.\n     *\n     * Specification: MUST be triggered when addKey was successfully called.\n     */\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Emitted when a key was removed from the Identity.\n     *\n     * Specification: MUST be triggered when removeKey was successfully called.\n     */\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n     *\n     * Triggers Event: `KeyAdded`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity\n     * itself. If it's the identity itself, the approval process will determine its approval.\n     */\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\n\n    /**\n    * @dev Approves an execution.\n    *\n    * Triggers Event: `Approved`\n    * Triggers on execution successful Event: `Executed`\n    * Triggers on execution failure Event: `ExecutionFailed`\n    */\n    function approve(uint256 _id, bool _approve) external returns (bool success);\n\n    /**\n     * @dev Removes _purpose for _key from the identity.\n     *\n     * Triggers Event: `KeyRemoved`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\n     * If it's the identity itself, the approval process will determine its approval.\n     */\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\n\n    /**\n     * @dev Passes an execution instruction to an ERC734 identity.\n     * How the execution is handled is up to the identity implementation:\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\n     * approve this execution.\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n     *\n     * Triggers Event: ExecutionRequested\n     * Triggers on direct execution Event: Executed\n     */\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\n\n    /**\n     * @dev Returns the full key data, if present in the identity.\n     */\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\n\n    /**\n     * @dev Returns the list of purposes associated with a key.\n     */\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\n\n    /**\n     * @dev Returns an array of public key bytes32 held by this identity.\n     */\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\n\n    /**\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\n     */\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\n}\n"
    },
    "@onchain-id/solidity/contracts/interface/IERC735.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\n/**\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\n */\ninterface IERC735 {\n\n    /**\n     * @dev Emitted when a claim was added.\n     *\n     * Specification: MUST be triggered when a claim was successfully added.\n     */\n    event ClaimAdded(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Emitted when a claim was removed.\n     *\n     * Specification: MUST be triggered when removeClaim was successfully called.\n     */\n    event ClaimRemoved(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Emitted when a claim was changed.\n     *\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\n     */\n    event ClaimChanged(\n        bytes32 indexed claimId,\n        uint256 indexed topic,\n        uint256 scheme,\n        address indexed issuer,\n        bytes signature,\n        bytes data,\n        string uri);\n\n    /**\n     * @dev Add or update a claim.\n     *\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\n     *\n     * Specification: Add or update a claim from an issuer.\n     *\n     * _signature is a signed message of the following structure:\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\n     */\n    function addClaim(\n        uint256 _topic,\n        uint256 _scheme,\n        address issuer,\n        bytes calldata _signature,\n        bytes calldata _data,\n        string calldata _uri)\n    external returns (bytes32 claimRequestId);\n\n    /**\n     * @dev Removes a claim.\n     *\n     * Triggers Event: `ClaimRemoved`\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function removeClaim(bytes32 _claimId) external returns (bool success);\n\n    /**\n     * @dev Get a claim by its ID.\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function getClaim(bytes32 _claimId)\n    external view returns(\n        uint256 topic,\n        uint256 scheme,\n        address issuer,\n        bytes memory signature,\n        bytes memory data,\n        string memory uri);\n\n    /**\n     * @dev Returns an array of claim IDs by topic.\n     */\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\n}\n"
    },
    "@onchain-id/solidity/contracts/interface/IIdentity.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport \"./IERC734.sol\";\nimport \"./IERC735.sol\";\n\n// solhint-disable-next-line no-empty-blocks\ninterface IIdentity is IERC734, IERC735 {}\n"
    },
    "@onchain-id/solidity/contracts/interface/IImplementationAuthority.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\ninterface IImplementationAuthority {\n\n    // event emitted when the implementation contract is updated\n    event UpdatedImplementation(address newAddress);\n\n    /**\n     * @dev updates the address used as implementation by the proxies linked\n     * to this ImplementationAuthority contract\n     * @param _newImplementation the address of the new implementation contract\n     * only Owner can call\n     */\n    function updateImplementation(address _newImplementation) external;\n\n    /**\n     * @dev returns the address of the implementation\n     */\n    function getImplementation() external view returns(address);\n}\n"
    },
    "@onchain-id/solidity/contracts/proxy/ImplementationAuthority.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\nimport \"../interface/IImplementationAuthority.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ImplementationAuthority is IImplementationAuthority, Ownable {\n\n    // the address of implementation of ONCHAINID\n    address internal _implementation;\n\n    constructor(address implementation) {\n        require(implementation != address(0), \"invalid argument - zero address\");\n        _implementation = implementation;\n        emit UpdatedImplementation(implementation);\n    }\n\n    /**\n     *  @dev See {IImplementationAuthority-updateImplementation}.\n     */\n    function updateImplementation(address _newImplementation) external override onlyOwner {\n        require(_newImplementation != address(0), \"invalid argument - zero address\");\n        _implementation = _newImplementation;\n        emit UpdatedImplementation(_newImplementation);\n    }\n\n    /**\n     *  @dev See {IImplementationAuthority-getImplementation}.\n     */\n    function getImplementation() external override view returns(address) {\n        return _implementation;\n    }\n}\n"
    },
    "@onchain-id/solidity/contracts/storage/Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\nimport \"./Structs.sol\";\n\ncontract Storage is Structs {\n    // nonce used by the execute/approve function\n    uint256 internal _executionNonce;\n\n    // keys as defined by IERC734\n    mapping(bytes32 => Key) internal _keys;\n\n    // keys for a given purpose\n    // purpose 1 = MANAGEMENT\n    // purpose 2 = ACTION\n    // purpose 3 = CLAIM\n    mapping(uint256 => bytes32[]) internal _keysByPurpose;\n\n    // execution data\n    mapping(uint256 => Execution) internal _executions;\n\n    // claims held by the ONCHAINID\n    mapping(bytes32 => Claim) internal _claims;\n\n    // array of claims for a given topic\n    mapping(uint256 => bytes32[]) internal _claimsByTopic;\n\n    // status on initialization\n    bool internal _initialized = false;\n\n    // status on potential interactions with the contract\n    bool internal _canInteract = false;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@onchain-id/solidity/contracts/storage/Structs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ncontract Structs {\n\n   /**\n    *  @dev Definition of the structure of a Key.\n    *\n    *  Specification: Keys are cryptographic public keys, or contract addresses associated with this identity.\n    *  The structure should be as follows:\n    *  key: A public key owned by this identity\n    *  purposes: uint256[] Array of the key purposes, like 1 = MANAGEMENT, 2 = EXECUTION\n    *  keyType: The type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc.\n    *  key: bytes32 The public key. // Its the Keccak256 hash of the key\n    */\n    struct Key {\n        uint256[] purposes;\n        uint256 keyType;\n        bytes32 key;\n    }\n\n    /**\n    *  @dev Definition of the structure of an Execution\n    *\n    *  Specification: Executions are requests for transactions to be issued by the ONCHAINID\n    *  to: address of contract to interact with, can be address(this)\n    *  value: ETH to transfer with the transaction\n    *  data: payload of the transaction to execute\n    *  approved: approval status of the Execution\n    *  executed: execution status of the Execution (set as false when the Execution is created\n    *  and updated to true when the Execution is processed)\n    */\n    struct Execution {\n        address to;\n        uint256 value;\n        bytes data;\n        bool approved;\n        bool executed;\n    }\n\n   /**\n    *  @dev Definition of the structure of a Claim.\n    *\n    *  Specification: Claims are information an issuer has about the identity holder.\n    *  The structure should be as follows:\n    *  claim: A claim published for the Identity.\n    *  topic: A uint256 number which represents the topic of the claim. (e.g. 1 biometric, 2 residence (ToBeDefined:\n    *  number schemes, sub topics based on number ranges??))\n    *  scheme : The scheme with which this claim SHOULD be verified or how it should be processed. Its a uint256 for\n    *  different schemes. E.g. could 3 mean contract verification, where the data will be call data, and the issuer a\n    *  contract address to call (ToBeDefined). Those can also mean different key types e.g. 1 = ECDSA, 2 = RSA, etc.\n    *  (ToBeDefined)\n    *  issuer: The issuers identity contract address, or the address used to sign the above signature. If an\n    *  identity contract, it should hold the key with which the above message was signed, if the key is not present\n    *  anymore, the claim SHOULD be treated as invalid. The issuer can also be a contract address itself, at which the\n    *  claim can be verified using the call data.\n    *  signature: Signature which is the proof that the claim issuer issued a claim of topic for this identity. it\n    *  MUST be a signed message of the following structure: `keccak256(abi.encode(identityHolder_address, topic, data))`\n    *  data: The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on\n    *  the claim scheme.\n    *  uri: The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such.\n    */\n    struct Claim {\n        uint256 topic;\n        uint256 scheme;\n        address issuer;\n        bytes signature;\n        bytes data;\n        string uri;\n    }\n}\n"
    },
    "@onchain-id/solidity/contracts/version/Version.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\n/**\n * @dev Version contract gives the versioning information of the implementation contract\n */\ncontract Version {\n    /**\n     * @dev Returns the string of the current version.\n     */\n    function version() external pure returns (string memory) {\n        // version 2.0.1\n        return \"2.0.1\";\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/_testContracts/ClaimIssuerTrick.sol": {
      "content": "contract ClaimIssuerTrick {\n    function isClaimValid(\n        address _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    public view returns (bool) {\n        if (msg.sender == _identity) {\n            return true;\n        }\n\n        revert('ERROR');\n    }\n}\n"
    },
    "contracts/_testContracts/MockContract.sol": {
      "content": "pragma solidity 0.8.17;\n\ncontract MockContract {\n    address _irRegistry;\n    uint16 _investorCountry;\n\n    function identityRegistry() public view returns (address identityRegistry) {\n        if (_irRegistry != address(0)) {\n            return _irRegistry;\n        } else {\n            return address(this);\n        }\n    }\n\n    function investorCountry(address investor) public view returns (uint16 country) {\n        return _investorCountry;\n    }\n\n    function setInvestorCountry(uint16 country) public {\n        _investorCountry = country;\n    }\n}\n"
    },
    "contracts/_testContracts/OIDImports.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/ClaimIssuer.sol\";\nimport \"@onchain-id/solidity/contracts/Identity.sol\";\nimport \"@onchain-id/solidity/contracts/proxy/ImplementationAuthority.sol\";\n\ncontract OIDImports {\n\n}\n"
    },
    "contracts/_testContracts/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2022, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TestERC20 is Ownable, ERC20Pausable {\n\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function mint(address recipient, uint256 amount) public onlyOwner {\n        _mint(recipient, amount);\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n}\n"
    },
    "contracts/_testContracts/TestUpgradedCountryAllowModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../compliance/modular/modules/CountryAllowModule.sol\";\n\ncontract TestUpgradedCountryAllowModule is CountryAllowModule {\n    /// new field\n    uint256 private _newField;\n\n    // setter for _newField\n    function setNewField(uint256 value) external onlyOwner {\n        _newField = value;\n    }\n\n    // getter for _newField\n    function getNewField() external view returns (uint256) {\n        return _newField;\n    }\n}\n"
    },
    "contracts/_testContracts/v_3_5_2/LegacyIA.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\nabstract contract ContextLegacy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\nabstract contract OwnableLegacy is ContextLegacy {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"OwnableLegacy: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"OwnableLegacy: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract LegacyIA is OwnableLegacy {\n    event UpdatedImplementation(address newAddress);\n\n    address public implementation;\n\n    constructor(address _implementation) {\n        implementation = _implementation;\n        emit UpdatedImplementation(_implementation);\n    }\n\n    function getImplementation() external view returns (address) {\n        return implementation;\n    }\n\n    function updateImplementation(address _newImplementation) public onlyOwner {\n        implementation = _newImplementation;\n        emit UpdatedImplementation(_newImplementation);\n    }\n}"
    },
    "contracts/_testContracts/v_3_5_2/LegacyProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\ninterface IImplementationAuthorityLegacy {\n    function getImplementation() external view returns (address);\n}\n\ncontract LegacyProxy {\n    address public implementationAuthority;\n\n    constructor(\n        address _implementationAuthority,\n        address _identityRegistry,\n        address _compliance,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        address _onchainID\n    ) {\n        implementationAuthority = _implementationAuthority;\n\n        address logic = IImplementationAuthorityLegacy(implementationAuthority).getImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) =\n        logic.delegatecall(\n            abi.encodeWithSignature(\n                'init(address,address,string,string,uint8,address)',\n                _identityRegistry,\n                _compliance,\n                _name,\n                _symbol,\n                _decimals,\n                _onchainID\n            )\n        );\n        require(success, 'Initialization failed.');\n    }\n\n    fallback() external payable {\n        address logic = IImplementationAuthorityLegacy(implementationAuthority).getImplementation();\n\n        assembly {\n        // solium-disable-line\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n            case 0 {\n                revert(0, retSz)\n            }\n            default {\n                return(0, retSz)\n            }\n        }\n    }\n}"
    },
    "contracts/_testContracts/v_3_5_2/LegacyToken_3_5_2.sol": {
      "content": "/**\n *Submitted for verification at polygonscan.com on 2022-11-10\n*/\n\n// File: @onchain-id/solidity/contracts/interface/IERC734Legacy.sol\n\n// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\n/**\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\n */\ninterface IERC734Legacy {\n\n    /**\n     * @dev Emitted when an execution request was approved.\n     *\n     * Specification: MUST be triggered when approve was successfully called.\n     */\n    event Approved(uint256 indexed executionId, bool approved);\n\n    /**\n     * @dev Emitted when an execute operation was approved and successfully performed.\n     *\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\n     */\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when an execution request was performed via `execute`.\n     *\n     * Specification: MUST be triggered when execute was successfully called.\n     */\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n    /**\n     * @dev Emitted when a key was added to the Identity.\n     *\n     * Specification: MUST be triggered when addKey was successfully called.\n     */\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Emitted when a key was removed from the Identity.\n     *\n     * Specification: MUST be triggered when removeKey was successfully called.\n     */\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n    /**\n     * @dev Emitted when the list of required keys to perform an action was updated.\n     *\n     * Specification: MUST be triggered when changeKeysRequired was successfully called.\n     */\n    event KeysRequiredChanged(uint256 purpose, uint256 number);\n\n\n    /**\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n     *\n     * Triggers Event: `KeyAdded`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\n     */\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\n\n    /**\n    * @dev Approves an execution or claim addition.\n    *\n    * Triggers Event: `Approved`, `Executed`\n    *\n    * Specification:\n    * This SHOULD require n of m approvals of keys purpose 1, if the _to of the execution is the identity contract itself, to successfully approve an execution.\n    * And COULD require n of m approvals of keys purpose 2, if the _to of the execution is another contract, to successfully approve an execution.\n    */\n    function approve(uint256 _id, bool _approve) external returns (bool success);\n\n    /**\n     * @dev Passes an execution instruction to an ERC725 identity.\n     *\n     * Triggers Event: `ExecutionRequested`, `Executed`\n     *\n     * Specification:\n     * SHOULD require approve to be called with one or more keys of purpose 1 or 2 to approve this execution.\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n     */\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\n\n    /**\n     * @dev Returns the full key data, if present in the identity.\n     */\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\n\n    /**\n     * @dev Returns the list of purposes associated with a key.\n     */\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\n\n    /**\n     * @dev Returns an array of public key bytes32 held by this identity.\n     */\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\n\n    /**\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\n     */\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\n\n    /**\n     * @dev Removes _purpose for _key from the identity.\n     *\n     * Triggers Event: `KeyRemoved`\n     *\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.\n     */\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\n}\n\n// File: @onchain-id/solidity/contracts/interface/IERC735Legacy.sol\n\n/**\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\n */\ninterface IERC735Legacy {\n\n    /**\n     * @dev Emitted when a claim request was performed.\n     *\n     * Specification: Is not clear\n     */\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    /**\n     * @dev Emitted when a claim was added.\n     *\n     * Specification: MUST be triggered when a claim was successfully added.\n     */\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    /**\n     * @dev Emitted when a claim was removed.\n     *\n     * Specification: MUST be triggered when removeClaim was successfully called.\n     */\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    /**\n     * @dev Emitted when a claim was changed.\n     *\n     * Specification: MUST be triggered when changeClaim was successfully called.\n     */\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    /**\n     * @dev Get a claim by its ID.\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function getClaim(bytes32 _claimId) external view returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\n\n    /**\n     * @dev Returns an array of claim IDs by topic.\n     */\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\n\n    /**\n     * @dev Add or update a claim.\n     *\n     * Triggers Event: `ClaimRequested`, `ClaimAdded`, `ClaimChanged`\n     *\n     * Specification: Requests the ADDITION or the CHANGE of a claim from an issuer.\n     * Claims can requested to be added by anybody, including the claim holder itself (self issued).\n     *\n     * _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\n     *\n     * This COULD implement an approval process for pending claims, or add them right away.\n     * MUST return a claimRequestId (use claim ID) that COULD be sent to the approve function.\n     */\n    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes calldata _signature, bytes calldata _data, string calldata _uri) external returns (bytes32 claimRequestId);\n\n    /**\n     * @dev Removes a claim.\n     *\n     * Triggers Event: `ClaimRemoved`\n     *\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n     */\n    function removeClaim(bytes32 _claimId) external returns (bool success);\n}\n\n// File: @onchain-id/solidity/contracts/interface/LegacyIIdentity.sol\n\n\n\ninterface LegacyIIdentity is IERC734Legacy, IERC735Legacy {}\n\n// File: @onchain-id/solidity/contracts/interface/IClaimIssuerLegacy.sol\n\n\n\ninterface IClaimIssuerLegacy is LegacyIIdentity {\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\n    function isClaimValid(LegacyIIdentity _identity, uint256 claimTopic, bytes calldata sig, bytes calldata data)\n    external\n    view returns (bool);\n}\n\n// File: contracts/registry/ITrustedIssuersRegistryLegacy.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\ninterface ITrustedIssuersRegistryLegacy {\n    /**\n     *  this event is emitted when a trusted issuer is added in the registry.\n     *  the event is emitted by the addTrustedIssuer function\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\n     */\n    event TrustedIssuerAdded(IClaimIssuerLegacy indexed trustedIssuer, uint256[] claimTopics);\n\n    /**\n     *  this event is emitted when a trusted issuer is removed from the registry.\n     *  the event is emitted by the removeTrustedIssuer function\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n     */\n    event TrustedIssuerRemoved(IClaimIssuerLegacy indexed trustedIssuer);\n\n    /**\n     *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\n     *  the event is emitted by the updateIssuerClaimTopics function\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\n     */\n    event ClaimTopicsUpdated(IClaimIssuerLegacy indexed trustedIssuer, uint256[] claimTopics);\n\n    /**\n     *  @dev registers a ClaimIssuer contract as trusted claim issuer.\n     *  Requires that a ClaimIssuer contract doesn't already exist\n     *  Requires that the claimTopics set is not empty\n     *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits a `TrustedIssuerAdded` event\n     */\n    function addTrustedIssuer(IClaimIssuerLegacy _trustedIssuer, uint256[] calldata _claimTopics) external;\n\n    /**\n     *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\n     *  Requires that the claim issuer contract to be registered first\n     *  @param _trustedIssuer the claim issuer to remove.\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits a `TrustedIssuerRemoved` event\n     */\n    function removeTrustedIssuer(IClaimIssuerLegacy _trustedIssuer) external;\n\n    /**\n     *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\n     *  Requires that this ClaimIssuer contract already exists in the registry\n     *  Requires that the provided claimTopics set is not empty\n     *  @param _trustedIssuer the claim issuer to update.\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits a `ClaimTopicsUpdated` event\n     */\n    function updateIssuerClaimTopics(IClaimIssuerLegacy _trustedIssuer, uint256[] calldata _claimTopics) external;\n\n    /**\n     *  @dev Function for getting all the trusted claim issuers stored.\n     *  @return array of all claim issuers registered.\n     */\n    function getTrustedIssuers() external view returns (IClaimIssuerLegacy[] memory);\n\n    /**\n     *  @dev Checks if the ClaimIssuer contract is trusted\n     *  @param _issuer the address of the ClaimIssuer contract\n     *  @return true if the issuer is trusted, false otherwise.\n     */\n    function isTrustedIssuer(address _issuer) external view returns (bool);\n\n    /**\n     *  @dev Function for getting all the claim topic of trusted claim issuer\n     *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\n     *  @param _trustedIssuer the trusted issuer concerned.\n     *  @return The set of claim topics that the trusted issuer is allowed to emit\n     */\n    function getTrustedIssuerClaimTopics(IClaimIssuerLegacy _trustedIssuer) external view returns (uint256[] memory);\n\n    /**\n     *  @dev Function for checking if the trusted claim issuer is allowed\n     *  to emit a certain claim topic\n     *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n     *  @return true if the issuer is trusted for this claim topic.\n     */\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view returns (bool);\n\n    /**\n     *  @dev Transfers the Ownership of TrustedIssuersRegistry to a new Owner.\n     *  @param _newOwner The new owner of this contract.\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits an `OwnershipTransferred` event\n     */\n    function transferOwnershipOnIssuersRegistryContract(address _newOwner) external;\n}\n\n// File: contracts/registry/IClaimTopicsRegistryLegacy.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\ninterface IClaimTopicsRegistryLegacy {\n    /**\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n     *  the event is emitted by the 'addClaimTopic' function\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\n     */\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n\n    /**\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n     *  the event is emitted by the 'removeClaimTopic' function\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\n     */\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    /**\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\n     * Only owner can call.\n     * emits `ClaimTopicAdded` event\n     * @param _claimTopic The claim topic index\n     */\n    function addClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\n     *  Only owner can call.\n     *  emits `ClaimTopicRemoved` event\n     *  @param _claimTopic The claim topic index\n     */\n    function removeClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Get the trusted claim topics for the security token\n     *  @return Array of trusted claim topics\n     */\n    function getClaimTopics() external view returns (uint256[] memory);\n\n    /**\n     *  @dev Transfers the Ownership of ClaimTopics to a new Owner.\n     *  Only owner can call.\n     *  @param _newOwner The new owner of this contract.\n     */\n    function transferOwnershipOnClaimTopicsRegistryContract(address _newOwner) external;\n}\n\n// File: contracts/registry/IIdentityRegistryStorageLegacy.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n\ninterface IIdentityRegistryStorageLegacy {\n    /**\n     *  this event is emitted when an Identity is registered into the storage contract.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityStored(address indexed investorAddress, LegacyIIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity is removed from the storage contract.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityUnstored(address indexed investorAddress, LegacyIIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityModified(LegacyIIdentity indexed oldIdentity, LegacyIIdentity indexed newIdentity);\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryModified(address indexed investorAddress, uint16 indexed country);\n\n    /**\n     *  this event is emitted when an Identity Registry is bound to the storage contract\n     *  the event is emitted by the 'addIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry added\n     */\n    event IdentityRegistryBound(address indexed identityRegistry);\n\n    /**\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\n     *  the event is emitted by the 'removeIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry removed\n     */\n    event IdentityRegistryUnbound(address indexed identityRegistry);\n\n    /**\n     *  @dev Returns the identity registries linked to the storage contract\n     */\n    function linkedIdentityRegistries() external view returns (address[] memory);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedIdentity(address _userAddress) external view returns (LegacyIIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedInvestorCountry(address _userAddress) external view returns (uint16);\n\n    /**\n     *  @dev adds an identity contract corresponding to a user address in the storage.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityStored` event\n     */\n    function addIdentityToStorage(\n        address _userAddress,\n        LegacyIIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the storage.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityUnstored` event\n     */\n    function removeIdentityFromStorage(address _userAddress) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryModified` event\n     */\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityModified` event\n     */\n    function modifyStoredIdentity(address _userAddress, LegacyIIdentity _identity) external;\n\n    /**\n     *  @notice Transfers the Ownership of the Identity Registry Storage to a new Owner.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _newOwner The new owner of this contract.\n     */\n    function transferOwnershipOnIdentityRegistryStorage(address _newOwner) external;\n\n    /**\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n     *  @param _identityRegistry The identity registry address to add.\n     */\n    function bindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n     *  @param _identityRegistry The identity registry address to remove.\n     */\n    function unbindIdentityRegistry(address _identityRegistry) external;\n}\n\n// File: contracts/registry/IIdentityRegistryLegacy.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n\n\n\n\n\ninterface IIdentityRegistryLegacy {\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\n     */\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\n\n    /**\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `identityStorage` is the address of the Identity Registry Storage contract\n     */\n    event IdentityStorageSet(address indexed identityStorage);\n\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\n     */\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\n\n    /**\n     *  this event is emitted when an Identity is registered into the Identity Registry.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRegistered(address indexed investorAddress, LegacyIIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity is removed from the Identity Registry.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRemoved(address indexed investorAddress, LegacyIIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityUpdated(LegacyIIdentity indexed oldIdentity, LegacyIIdentity indexed newIdentity);\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\n\n    /**\n     *  @dev Register an identity contract corresponding to a user address.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityRegistered` event\n     */\n    function registerIdentity(\n        address _userAddress,\n        LegacyIIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the identity registry.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityRemoved` event\n     */\n    function deleteIdentity(address _userAddress) external;\n\n    /**\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\n     *  emits `IdentityStorageSet` event\n     */\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\n\n    /**\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\n     *  emits `ClaimTopicsRegistrySet` event\n     */\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\n\n    /**\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\n     *  emits `TrustedIssuersRegistrySet` event\n     */\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryUpdated` event\n     */\n    function updateCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityUpdated` event\n     */\n    function updateIdentity(address _userAddress, LegacyIIdentity _identity) external;\n\n    /**\n     *  @dev function allowing to register identities in batch\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  Requires that none of the users has an identity contract already registered.\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the users\n     *  @param _identities The addresses of the corresponding identity contracts\n     *  @param _countries The countries of the corresponding investors\n     *  emits _userAddresses.length `IdentityRegistered` events\n     */\n    function batchRegisterIdentity(\n        address[] calldata _userAddresses,\n        LegacyIIdentity[] calldata _identities,\n        uint16[] calldata _countries\n    ) external;\n\n    /**\n     *  @dev This functions checks whether a wallet has its Identity registered or not\n     *  in the Identity Registry.\n     *  @param _userAddress The address of the user to be checked.\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\n     */\n    function contains(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev This functions checks whether an identity contract\n     *  corresponding to the provided user address has the required claims or not based\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\n     *  @param _userAddress The address of the user to be verified.\n     *  @return 'True' if the address is verified, 'false' if not.\n     */\n    function isVerified(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function identity(address _userAddress) external view returns (LegacyIIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function investorCountry(address _userAddress) external view returns (uint16);\n\n    /**\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\n     */\n    function identityStorage() external view returns (IIdentityRegistryStorageLegacy);\n\n    /**\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\n     */\n    function issuersRegistry() external view returns (ITrustedIssuersRegistryLegacy);\n\n    /**\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\n     */\n    function topicsRegistry() external view returns (IClaimTopicsRegistryLegacy);\n\n    /**\n     *  @notice Transfers the Ownership of the Identity Registry to a new Owner.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _newOwner The new owner of this contract.\n     */\n    function transferOwnershipOnIdentityRegistryContract(address _newOwner) external;\n\n    /**\n     *  @notice Adds an address as _agent of the Identity Registry Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _agent The _agent's address to add.\n     */\n    function addAgentOnIdentityRegistryContract(address _agent) external;\n\n    /**\n     *  @notice Removes an address from being _agent of the Identity Registry Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _agent The _agent's address to remove.\n     */\n    function removeAgentOnIdentityRegistryContract(address _agent) external;\n}\n\n// File: contracts/compliance/IComplianceLegacy.sol\n\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\ninterface IComplianceLegacy {\n    /**\n     *  this event is emitted when the Agent has been added on the allowedList of this Compliance.\n     *  the event is emitted by the Compliance constructor and by the addTokenAgent function\n     *  `_agentAddress` is the address of the Agent to add\n     */\n    event TokenAgentAdded(address _agentAddress);\n\n    /**\n     *  this event is emitted when the Agent has been removed from the agent list of this Compliance.\n     *  the event is emitted by the Compliance constructor and by the removeTokenAgent function\n     *  `_agentAddress` is the address of the Agent to remove\n     */\n    event TokenAgentRemoved(address _agentAddress);\n\n    /**\n     *  this event is emitted when a token has been bound to the compliance contract\n     *  the event is emitted by the bindToken function\n     *  `_token` is the address of the token to bind\n     */\n    event TokenBound(address _token);\n\n    /**\n     *  this event is emitted when a token has been unbound from the compliance contract\n     *  the event is emitted by the unbindToken function\n     *  `_token` is the address of the token to unbind\n     */\n    event TokenUnbound(address _token);\n\n    /**\n     *  @dev Returns true if the Address is in the list of token agents\n     *  @param _agentAddress address of this agent\n     */\n    function isTokenAgent(address _agentAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\n     *  @param _token address of the token\n     */\n    function isTokenBound(address _token) external view returns (bool);\n\n    /**\n     *  @dev adds an agent to the list of token agents\n     *  @param _agentAddress address of the agent to be added\n     *  Emits a TokenAgentAdded event\n     */\n    function addTokenAgent(address _agentAddress) external;\n\n    /**\n     *  @dev remove Agent from the list of token agents\n     *  @param _agentAddress address of the agent to be removed (must be added first)\n     *  Emits a TokenAgentRemoved event\n     */\n    function removeTokenAgent(address _agentAddress) external;\n\n    /**\n     *  @dev binds a token to the compliance contract\n     *  @param _token address of the token to bind\n     *  Emits a TokenBound event\n     */\n    function bindToken(address _token) external;\n\n    /**\n     *  @dev unbinds a token from the compliance contract\n     *  @param _token address of the token to unbind\n     *  Emits a TokenUnbound event\n     */\n    function unbindToken(address _token) external;\n\n    /**\n     *  @dev checks that the transfer is compliant.\n     *  default compliance always returns true\n     *  READ ONLY FUNCTION, this function cannot be used to increment\n     *  counters, emit events, ...\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function canTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external view returns (bool);\n\n    /**\n     *  @dev function called whenever tokens are transferred\n     *  from one wallet to another\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function transferred(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev function called whenever tokens are created\n     *  on a wallet\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function created(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev function called whenever tokens are destroyed\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _from The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function destroyed(address _from, uint256 _amount) external;\n\n    /**\n     *  @dev function used to transfer the ownership of the compliance contract\n     *  to a new owner, giving him access to the `OnlyOwner` functions implemented on the contract\n     *  @param newOwner The address of the new owner of the compliance contract\n     *  This function can only be called by the owner of the compliance contract\n     *  emits an `OwnershipTransferred` event\n     */\n    function transferOwnershipOnComplianceContract(address newOwner) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20Legacy.sol\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Legacy {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/ITokenLegacy.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n\n/// @dev interface\ninterface ITokenLegacy is IERC20Legacy {\n    /**\n     *  this event is emitted when the token information is updated.\n     *  the event is emitted by the token constructor and by the setTokenInformation function\n     *  `_newName` is the name of the token\n     *  `_newSymbol` is the symbol of the token\n     *  `_newDecimals` is the decimals of the token\n     *  `_newVersion` is the version of the token, current version is 3.0\n     *  `_newOnchainID` is the address of the onchainID of the token\n     */\n    event UpdatedTokenInformation(string _newName, string _newSymbol, uint8 _newDecimals, string _newVersion, address _newOnchainID);\n\n    /**\n     *  this event is emitted when the IdentityRegistry has been set for the token\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\n     *  `_identityRegistry` is the address of the Identity Registry of the token\n     */\n    event IdentityRegistryAdded(address indexed _identityRegistry);\n\n    /**\n     *  this event is emitted when the Compliance has been set for the token\n     *  the event is emitted by the token constructor and by the setCompliance function\n     *  `_compliance` is the address of the Compliance contract of the token\n     */\n    event ComplianceAdded(address indexed _compliance);\n\n    /**\n     *  this event is emitted when an investor successfully recovers his tokens\n     *  the event is emitted by the recoveryAddress function\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\n     */\n    event RecoverySuccess(address _lostWallet, address _newWallet, address _investorOnchainID);\n\n    /**\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_isFrozen` is the freezing status of the wallet\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\n     */\n    event AddressFrozen(address indexed _userAddress, bool indexed _isFrozen, address indexed _owner);\n\n    /**\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are frozen\n     */\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are unfrozen\n     */\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  this event is emitted when the token is paused\n     *  the event is emitted by the pause function\n     *  `_userAddress` is the address of the wallet that called the pause function\n     */\n    event Paused(address _userAddress);\n\n    /**\n     *  this event is emitted when the token is unpaused\n     *  the event is emitted by the unpause function\n     *  `_userAddress` is the address of the wallet that called the unpause function\n     */\n    event Unpaused(address _userAddress);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * balanceOf() and transfer().\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the address of the onchainID of the token.\n     * the onchainID of the token gives all the information available\n     * about the token and is managed by the token issuer or his agent.\n     */\n    function onchainID() external view returns (address);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the TREX version of the token.\n     * current version is 3.0.0\n     */\n    function version() external view returns (string memory);\n\n    /**\n     *  @dev Returns the Identity Registry linked to the token\n     */\n    function identityRegistry() external view returns (IIdentityRegistryLegacy);\n\n    /**\n     *  @dev Returns the Compliance contract linked to the token\n     */\n    function compliance() external view returns (IComplianceLegacy);\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view returns (bool);\n\n    /**\n     *  @dev Returns the freezing status of a wallet\n     *  if isFrozen returns `true` the wallet is frozen\n     *  if isFrozen returns `false` the wallet is not frozen\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n     *  a partial freeze or the whole token could be blocked by pause\n     *  @param _userAddress the address of the wallet on which isFrozen is called\n     */\n    function isFrozen(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\n     */\n    function getFrozenTokens(address _userAddress) external view returns (uint256);\n\n    /**\n     *  @dev sets the token name\n     *  @param _name the name of token to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setName(string calldata _name) external;\n\n    /**\n     *  @dev sets the token symbol\n     *  @param _symbol the token symbol to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setSymbol(string calldata _symbol) external;\n\n    /**\n     *  @dev sets the onchain ID of the token\n     *  @param _onchainID the address of the onchain ID to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setOnchainID(address _onchainID) external;\n\n    /**\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Paused` event\n     */\n    function pause() external;\n\n    /**\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `Unpaused` event\n     */\n    function unpause() external;\n\n    /**\n     *  @dev sets an address frozen status for this token.\n     *  @param _userAddress The address for which to update frozen status\n     *  @param _freeze Frozen status of the address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `AddressFrozen` event\n     */\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\n\n    /**\n     *  @dev freezes token amount specified for given address.\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be frozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensFrozen` event\n     */\n    function freezePartialTokens(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev unfreezes token amount specified for given address\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be unfrozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event\n     */\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev sets the Identity Registry for the token\n     *  @param _identityRegistry the address of the Identity Registry to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits an `IdentityRegistryAdded` event\n     */\n    function setIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev sets the compliance contract of the token\n     *  @param _compliance the address of the compliance contract to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `ComplianceAdded` event\n     */\n    function setCompliance(address _compliance) external;\n\n    /**\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `amount`\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\n     *  account is 100% composed of frozen tokens post-transfer.\n     *  Require that the `to` address is a verified address,\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n     *  emits a `Transfer` event\n     */\n    function forcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (bool);\n\n    /**\n     *  @dev mint tokens on a wallet\n     *  Improved version of default mint method. Tokens can be minted\n     *  to an address if only it is a verified address as per the security token.\n     *  @param _to Address to mint the tokens to.\n     *  @param _amount Amount of tokens to mint.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Transfer` event\n     */\n    function mint(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev burn tokens on a wallet\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `value` amount\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\n     *  is 100% composed of frozen tokens post-transaction.\n     *  @param _userAddress Address to burn the tokens from.\n     *  @param _amount Amount of tokens to burn.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n     *  emits a `Transfer` event\n     */\n    function burn(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev recovery function used to force transfer tokens from a\n     *  lost wallet to a new wallet for an investor.\n     *  @param _lostWallet the wallet that the investor lost\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n     *  emits a `Transfer` event if the recovery process is successful\n     *  emits a `RecoverySuccess` event if the recovery process is successful\n     *  emits a `RecoveryFails` event if the recovery process fails\n     */\n    function recoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _investorOnchainID\n    ) external returns (bool);\n\n    /**\n     *  @dev function allowing to issue transfers in batch\n     *  Require that the msg.sender and `to` addresses are not frozen.\n     *  Require that the total value should not exceed available balance.\n     *  Require that the `to` addresses are all verified addresses,\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  emits _toList.length `Transfer` events\n     */\n    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to issue forced transfers in batch\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _fromList The addresses of the senders\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n     *  emits _fromList.length `Transfer` events\n     */\n    function batchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to mint tokens in batch\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _toList.length `Transfer` events\n     */\n    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to burn tokens in batch\n     *  Require that the `_userAddresses` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `Transfer` events\n     */\n    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to set frozen addresses in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses for which to update frozen status\n     *  @param _freeze Frozen status of the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `AddressFrozen` events\n     */\n    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external;\n\n    /**\n     *  @dev function allowing to freeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be frozen\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensFrozen` events\n     */\n    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to unfreeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensUnfrozen` events\n     */\n    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev transfers the ownership of the token smart contract\n     *  @param _newOwner the address of the new token smart contract owner\n     *  This function can only be called by the owner of the token\n     *  emits an `OwnershipTransferred` event\n     */\n    function transferOwnershipOnTokenContract(address _newOwner) external;\n\n    /**\n     *  @dev adds an agent to the token smart contract\n     *  @param _agent the address of the new agent of the token smart contract\n     *  This function can only be called by the owner of the token\n     *  emits an `AgentAdded` event\n     */\n    function addAgentOnTokenContract(address _agent) external;\n\n    /**\n     *  @dev remove an agent from the token smart contract\n     *  @param _agent the address of the agent to remove\n     *  This function can only be called by the owner of the token\n     *  emits an `AgentRemoved` event\n     */\n    function removeAgentOnTokenContract(address _agent) external;\n}\n\n// File: contracts/token/Storage.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\n\n\ncontract TokenStorageLegacy {\n    /// @dev ERC20 basic variables\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n    uint256 internal _totalSupply;\n\n    /// @dev Token information\n    string internal tokenName;\n    string internal tokenSymbol;\n    uint8 internal tokenDecimals;\n    address internal tokenOnchainID;\n    string internal constant TOKEN_VERSION = '3.5.1';\n\n    /// @dev Variables of freeze and pause functions\n    mapping(address => bool) internal frozen;\n    mapping(address => uint256) internal frozenTokens;\n\n    bool internal tokenPaused = false;\n\n    /// @dev Identity Registry contract used by the onchain validator system\n    IIdentityRegistryLegacy internal tokenIdentityRegistry;\n\n    /// @dev Compliance contract linked to the onchain validator system\n    IComplianceLegacy internal tokenCompliance;\n}\n\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/InitializableLegacy.sol\n\n\n// solhint-disable-next-line compiler-version\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract InitializableLegacy {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"InitializableLegacy: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeableLegacy.sol\n\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeableLegacy is InitializableLegacy {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeableLegacy.sol\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeableLegacy is InitializableLegacy, ContextUpgradeableLegacy {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n\n// File: contracts/roles/RolesLegacy.sol\n\n/**\n * @title RolesLegacy\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary RolesLegacy {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), 'RolesLegacy: account already has role');\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), 'RolesLegacy: account does not have role');\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), 'RolesLegacy: account is the zero address');\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/roles/AgentRoleUpgradeableLegacy.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\ncontract AgentRoleUpgradeableLegacy is OwnableUpgradeableLegacy {\n    using RolesLegacy for RolesLegacy.Role;\n\n    event AgentAdded(address indexed _agent);\n    event AgentRemoved(address indexed _agent);\n\n    RolesLegacy.Role private _agents;\n\n    modifier onlyAgent() {\n        require(isAgent(msg.sender), 'AgentRole: caller does not have the Agent role');\n        _;\n    }\n\n    function isAgent(address _agent) public view returns (bool) {\n        return _agents.has(_agent);\n    }\n\n    function addAgent(address _agent) public onlyOwner {\n        _agents.add(_agent);\n        emit AgentAdded(_agent);\n    }\n\n    function removeAgent(address _agent) public onlyOwner {\n        _agents.remove(_agent);\n        emit AgentRemoved(_agent);\n    }\n}\n\n// File: contracts/token/Token.sol\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n\ncontract LegacyToken_3_5_2 is ITokenLegacy, AgentRoleUpgradeableLegacy, TokenStorageLegacy {\n\n    /**\n     *  @dev the constructor initiates the token contract\n     *  msg.sender is set automatically as the owner of the smart contract\n     *  @param _identityRegistry the address of the Identity registry linked to the token\n     *  @param _compliance the address of the compliance contract linked to the token\n     *  @param _name the name of the token\n     *  @param _symbol the symbol of the token\n     *  @param _decimals the decimals of the token\n     *  @param _onchainID the address of the onchainID of the token\n     *  emits an `UpdatedTokenInformation` event\n     *  emits an `IdentityRegistryAdded` event\n     *  emits a `ComplianceAdded` event\n     */\n    function init(\n        address _identityRegistry,\n        address _compliance,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        address _onchainID\n    ) public {\n        require(owner() == address(0), 'already initialized');\n        tokenName = _name;\n        tokenSymbol = _symbol;\n        tokenDecimals = _decimals;\n        tokenOnchainID = _onchainID;\n        tokenIdentityRegistry = IIdentityRegistryLegacy(_identityRegistry);\n        emit IdentityRegistryAdded(_identityRegistry);\n        tokenCompliance = IComplianceLegacy(_compliance);\n        emit ComplianceAdded(_compliance);\n        emit UpdatedTokenInformation(tokenName, tokenSymbol, tokenDecimals, TOKEN_VERSION, tokenOnchainID);\n        __Ownable_init();\n    }\n\n    /// @dev Modifier to make a function callable only when the contract is not paused.\n    modifier whenNotPaused() {\n        require(!tokenPaused, 'Pausable: paused');\n        _;\n    }\n\n    /// @dev Modifier to make a function callable only when the contract is paused.\n    modifier whenPaused() {\n        require(tokenPaused, 'Pausable: not paused');\n        _;\n    }\n\n    /**\n     *  @dev See {IERC20Legacy-totalSupply}.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     *  @dev See {IERC20Legacy-balanceOf}.\n     */\n    function balanceOf(address _userAddress) public view override returns (uint256) {\n        return _balances[_userAddress];\n    }\n\n    /**\n     *  @dev See {IERC20Legacy-allowance}.\n     */\n    function allowance(address _owner, address _spender) external view virtual override returns (uint256) {\n        return _allowances[_owner][_spender];\n    }\n\n    /**\n     *  @dev See {IERC20Legacy-approve}.\n     */\n    function approve(address _spender, uint256 _amount) external virtual override returns (bool) {\n        _approve(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n     *  @dev See {ERC20-increaseAllowance}.\n     */\n    function increaseAllowance(address _spender, uint256 _addedValue) external virtual returns (bool) {\n        _approve(msg.sender, _spender, _allowances[msg.sender][_spender] + (_addedValue));\n        return true;\n    }\n\n    /**\n     *  @dev See {ERC20-decreaseAllowance}.\n     */\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external virtual returns (bool) {\n        _approve(msg.sender, _spender, _allowances[msg.sender][_spender] - _subtractedValue);\n        return true;\n    }\n\n    /**\n     *  @dev See {ERC20-_mint}.\n     */\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal virtual {\n        require(_from != address(0), 'ERC20: transfer from the zero address');\n        require(_to != address(0), 'ERC20: transfer to the zero address');\n\n        _beforeTokenTransfer(_from, _to, _amount);\n\n        _balances[_from] = _balances[_from] - _amount;\n        _balances[_to] = _balances[_to] + _amount;\n        emit Transfer(_from, _to, _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_mint}.\n     */\n    function _mint(address _userAddress, uint256 _amount) internal virtual {\n        require(_userAddress != address(0), 'ERC20: mint to the zero address');\n\n        _beforeTokenTransfer(address(0), _userAddress, _amount);\n\n        _totalSupply = _totalSupply + _amount;\n        _balances[_userAddress] = _balances[_userAddress] + _amount;\n        emit Transfer(address(0), _userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_burn}.\n     */\n    function _burn(address _userAddress, uint256 _amount) internal virtual {\n        require(_userAddress != address(0), 'ERC20: burn from the zero address');\n\n        _beforeTokenTransfer(_userAddress, address(0), _amount);\n\n        _balances[_userAddress] = _balances[_userAddress] - _amount;\n        _totalSupply = _totalSupply - _amount;\n        emit Transfer(_userAddress, address(0), _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_approve}.\n     */\n    function _approve(\n        address _owner,\n        address _spender,\n        uint256 _amount\n    ) internal virtual {\n        require(_owner != address(0), 'ERC20: approve from the zero address');\n        require(_spender != address(0), 'ERC20: approve to the zero address');\n\n        _allowances[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal virtual {}\n\n    /**\n     *  @dev See {ITokenLegacy-decimals}.\n     */\n    function decimals() external view override returns (uint8) {\n        return tokenDecimals;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-name}.\n     */\n    function name() external view override returns (string memory) {\n        return tokenName;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-onchainID}.\n     */\n    function onchainID() external view override returns (address) {\n        return tokenOnchainID;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-symbol}.\n     */\n    function symbol() external view override returns (string memory) {\n        return tokenSymbol;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-version}.\n     */\n    function version() external view override returns (string memory) {\n        return TOKEN_VERSION;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-setName}.\n     */\n    function setName(string calldata _name) external override onlyOwner {\n        tokenName = _name;\n        emit UpdatedTokenInformation(tokenName, tokenSymbol, tokenDecimals, TOKEN_VERSION, tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-setSymbol}.\n     */\n    function setSymbol(string calldata _symbol) external override onlyOwner {\n        tokenSymbol = _symbol;\n        emit UpdatedTokenInformation(tokenName, tokenSymbol, tokenDecimals, TOKEN_VERSION, tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-setOnchainID}.\n     */\n    function setOnchainID(address _onchainID) external override onlyOwner {\n        tokenOnchainID = _onchainID;\n        emit UpdatedTokenInformation(tokenName, tokenSymbol, tokenDecimals, TOKEN_VERSION, tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-paused}.\n     */\n    function paused() external view override returns (bool) {\n        return tokenPaused;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-isFrozen}.\n     */\n    function isFrozen(address _userAddress) external view override returns (bool) {\n        return frozen[_userAddress];\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-getFrozenTokens}.\n     */\n    function getFrozenTokens(address _userAddress) external view override returns (uint256) {\n        return frozenTokens[_userAddress];\n    }\n\n    /**\n     *  @notice ERC-20 overridden function that include logic to check for trade validity.\n     *  Require that the msg.sender and to addresses are not frozen.\n     *  Require that the value should not exceed available balance .\n     *  Require that the to address is a verified address\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     */\n    function transfer(address _to, uint256 _amount) public override whenNotPaused returns (bool) {\n        require(!frozen[_to] && !frozen[msg.sender], 'wallet is frozen');\n        require(_amount <= balanceOf(msg.sender) - (frozenTokens[msg.sender]), 'Insufficient Balance');\n        if (tokenIdentityRegistry.isVerified(_to) && tokenCompliance.canTransfer(msg.sender, _to, _amount)) {\n            tokenCompliance.transferred(msg.sender, _to, _amount);\n            _transfer(msg.sender, _to, _amount);\n            return true;\n        }\n        revert('Transfer not possible');\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-pause}.\n     */\n    function pause() external override onlyAgent whenNotPaused {\n        tokenPaused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-unpause}.\n     */\n    function unpause() external override onlyAgent whenPaused {\n        tokenPaused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-identityRegistry}.\n     */\n    function identityRegistry() external view override returns (IIdentityRegistryLegacy) {\n        return tokenIdentityRegistry;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-compliance}.\n     */\n    function compliance() external view override returns (IComplianceLegacy) {\n        return tokenCompliance;\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchTransfer}.\n     */\n    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _toList.length; i++) {\n            transfer(_toList[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @notice ERC-20 overridden function that include logic to check for trade validity.\n     *  Require that the from and to addresses are not frozen.\n     *  Require that the value should not exceed available balance .\n     *  Require that the to address is a verified address\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override whenNotPaused returns (bool) {\n        require(!frozen[_to] && !frozen[_from], 'wallet is frozen');\n        require(_amount <= balanceOf(_from) - (frozenTokens[_from]), 'Insufficient Balance');\n        if (tokenIdentityRegistry.isVerified(_to) && tokenCompliance.canTransfer(_from, _to, _amount)) {\n            tokenCompliance.transferred(_from, _to, _amount);\n            _transfer(_from, _to, _amount);\n            _approve(_from, msg.sender, _allowances[_from][msg.sender] - (_amount));\n            return true;\n        }\n\n        revert('Transfer not possible');\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-forcedTransfer}.\n     */\n    function forcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public override onlyAgent returns (bool) {\n        uint256 freeBalance = balanceOf(_from) - (frozenTokens[_from]);\n        if (_amount > freeBalance) {\n            uint256 tokensToUnfreeze = _amount - (freeBalance);\n            frozenTokens[_from] = frozenTokens[_from] - (tokensToUnfreeze);\n            emit TokensUnfrozen(_from, tokensToUnfreeze);\n        }\n        if (tokenIdentityRegistry.isVerified(_to)) {\n            tokenCompliance.transferred(_from, _to, _amount);\n            _transfer(_from, _to, _amount);\n            return true;\n        }\n        revert('Transfer not possible');\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchForcedTransfer}.\n     */\n    function batchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external override {\n        for (uint256 i = 0; i < _fromList.length; i++) {\n            forcedTransfer(_fromList[i], _toList[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-mint}.\n     */\n    function mint(address _to, uint256 _amount) public override onlyAgent {\n        require(tokenIdentityRegistry.isVerified(_to), 'Identity is not verified.');\n        require(tokenCompliance.canTransfer(msg.sender, _to, _amount), 'Compliance not followed');\n        _mint(_to, _amount);\n        tokenCompliance.created(_to, _amount);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchMint}.\n     */\n    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _toList.length; i++) {\n            mint(_toList[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-burn}.\n     */\n    function burn(address _userAddress, uint256 _amount) public override onlyAgent {\n        uint256 freeBalance = balanceOf(_userAddress) - frozenTokens[_userAddress];\n        if (_amount > freeBalance) {\n            uint256 tokensToUnfreeze = _amount - (freeBalance);\n            frozenTokens[_userAddress] = frozenTokens[_userAddress] - (tokensToUnfreeze);\n            emit TokensUnfrozen(_userAddress, tokensToUnfreeze);\n        }\n        _burn(_userAddress, _amount);\n        tokenCompliance.destroyed(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchBurn}.\n     */\n    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            burn(_userAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-setAddressFrozen}.\n     */\n    function setAddressFrozen(address _userAddress, bool _freeze) public override onlyAgent {\n        frozen[_userAddress] = _freeze;\n\n        emit AddressFrozen(_userAddress, _freeze, msg.sender);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchSetAddressFrozen}.\n     */\n    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            setAddressFrozen(_userAddresses[i], _freeze[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-freezePartialTokens}.\n     */\n    function freezePartialTokens(address _userAddress, uint256 _amount) public override onlyAgent {\n        uint256 balance = balanceOf(_userAddress);\n        require(balance >= frozenTokens[_userAddress] + _amount, 'Amount exceeds available balance');\n        frozenTokens[_userAddress] = frozenTokens[_userAddress] + (_amount);\n        emit TokensFrozen(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchFreezePartialTokens}.\n     */\n    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            freezePartialTokens(_userAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-unfreezePartialTokens}.\n     */\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) public override onlyAgent {\n        require(frozenTokens[_userAddress] >= _amount, 'Amount should be less than or equal to frozen tokens');\n        frozenTokens[_userAddress] = frozenTokens[_userAddress] - (_amount);\n        emit TokensUnfrozen(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-batchUnfreezePartialTokens}.\n     */\n    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            unfreezePartialTokens(_userAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-setIdentityRegistry}.\n     */\n    function setIdentityRegistry(address _identityRegistry) external override onlyOwner {\n        tokenIdentityRegistry = IIdentityRegistryLegacy(_identityRegistry);\n        emit IdentityRegistryAdded(_identityRegistry);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-setCompliance}.\n     */\n    function setCompliance(address _compliance) external override onlyOwner {\n        tokenCompliance = IComplianceLegacy(_compliance);\n        emit ComplianceAdded(_compliance);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-recoveryAddress}.\n     */\n    function recoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _investorOnchainID\n    ) external override onlyAgent returns (bool) {\n        require(balanceOf(_lostWallet) != 0, 'no tokens to recover');\n        LegacyIIdentity _onchainID = LegacyIIdentity(_investorOnchainID);\n        bytes32 _key = keccak256(abi.encode(_newWallet));\n        if (_onchainID.keyHasPurpose(_key, 1)) {\n            uint256 investorTokens = balanceOf(_lostWallet);\n            uint256 _frozenTokens = frozenTokens[_lostWallet];\n            tokenIdentityRegistry.registerIdentity(_newWallet, _onchainID, tokenIdentityRegistry.investorCountry(_lostWallet));\n            tokenIdentityRegistry.deleteIdentity(_lostWallet);\n            forcedTransfer(_lostWallet, _newWallet, investorTokens);\n            if (_frozenTokens > 0) {\n                freezePartialTokens(_newWallet, _frozenTokens);\n            }\n            if (frozen[_lostWallet] == true) {\n                setAddressFrozen(_newWallet, true);\n            }\n            emit RecoverySuccess(_lostWallet, _newWallet, _investorOnchainID);\n            return true;\n        }\n        revert('Recovery not possible');\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-transferOwnershipOnTokenContract}.\n     */\n    function transferOwnershipOnTokenContract(address _newOwner) external override onlyOwner {\n        transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-addAgentOnTokenContract}.\n     */\n    function addAgentOnTokenContract(address _agent) external override {\n        addAgent(_agent);\n    }\n\n    /**\n     *  @dev See {ITokenLegacy-removeAgentOnTokenContract}.\n     */\n    function removeAgentOnTokenContract(address _agent) external override {\n        removeAgent(_agent);\n    }\n}\n"
    },
    "contracts/compliance/legacy/BasicCompliance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../../roles/AgentRole.sol\";\nimport \"./ICompliance.sol\";\nimport \"../../token/IToken.sol\";\n\nabstract contract BasicCompliance is AgentRole, ICompliance {\n\n    /// Mapping between agents and their statuses\n    mapping(address => bool) private _tokenAgentsList;\n\n    /// Mapping of tokens linked to the compliance contract\n    IToken public tokenBound;\n\n    /**\n     * @dev Throws if called by any address that is not a token bound to the compliance.\n     */\n    modifier onlyToken() {\n        require(_isToken(), \"error : this address is not a token bound to the compliance contract\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any address that is not owner of compliance or agent of the token.\n     */\n    modifier onlyAdmin() {\n        require(owner() == msg.sender || (AgentRole(address(tokenBound))).isAgent(msg.sender) ,\n            \"can be called only by Admin address\");\n        _;\n    }\n\n    /**\n     *  @dev See {ICompliance-addTokenAgent}.\n     *  this function is deprecated, but still implemented to avoid breaking interfaces\n     */\n    function addTokenAgent(address _agentAddress) external override onlyOwner {\n        require(!_tokenAgentsList[_agentAddress], \"This Agent is already registered\");\n        _tokenAgentsList[_agentAddress] = true;\n        emit TokenAgentAdded(_agentAddress);\n    }\n\n    /**\n    *  @dev See {ICompliance-isTokenAgent}.\n    */\n    function removeTokenAgent(address _agentAddress) external override onlyOwner {\n        require(_tokenAgentsList[_agentAddress], \"This Agent is not registered yet\");\n        _tokenAgentsList[_agentAddress] = false;\n        emit TokenAgentRemoved(_agentAddress);\n    }\n\n    /**\n     *  @dev See {ICompliance-bindToken}.\n     */\n    function bindToken(address _token) external override {\n        require(owner() == msg.sender || (address(tokenBound) == address(0) && msg.sender == _token),\n            \"only owner or token can call\");\n        tokenBound = IToken(_token);\n        emit TokenBound(_token);\n    }\n\n    /**\n    *  @dev See {ICompliance-unbindToken}.\n    */\n    function unbindToken(address _token) external override {\n        require(owner() == msg.sender || msg.sender == _token , \"only owner or token can call\");\n        require(_token == address(tokenBound), \"This token is not bound\");\n        delete tokenBound;\n        emit TokenUnbound(_token);\n    }\n\n    /**\n    *  @dev See {ICompliance-isTokenAgent}.\n    */\n    function isTokenAgent(address _agentAddress) public override view returns (bool) {\n        if (!_tokenAgentsList[_agentAddress] && !(AgentRole(address(tokenBound))).isAgent(_agentAddress)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    *  @dev See {ICompliance-isTokenBound}.\n    */\n    function isTokenBound(address _token) public override view returns (bool) {\n        if (_token != address(tokenBound)){\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    *  @dev Returns true if the sender corresponds to a token that is bound with the Compliance contract\n    */\n    function _isToken() internal view returns (bool) {\n        return isTokenBound(msg.sender);\n    }\n\n    /**\n    *  @dev Returns the ONCHAINID (Identity) of the _userAddress\n    *  @param _userAddress Address of the wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _getIdentity(address _userAddress) internal view returns (address) {\n        return address(tokenBound.identityRegistry().identity(_userAddress));\n    }\n\n    /**\n    *  @dev Returns the country of residence of the _userAddress\n    *  @param _userAddress Address of the wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _getCountry(address _userAddress) internal view returns (uint16) {\n        return tokenBound.identityRegistry().investorCountry(_userAddress);\n    }\n\n}\n"
    },
    "contracts/compliance/legacy/DefaultCompliance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./BasicCompliance.sol\";\n\ncontract DefaultCompliance is BasicCompliance {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function transferred(address _from, address _to, uint256 _value) external override {\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function created(address _to, uint256 _value) external override {\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function destroyed(address _from, uint256 _value) external override {\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address /*_from*/, address /*_to*/, uint256 /*_value*/) external view override returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/legacy/features/ApproveTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to require the pre-validation of a transfer before allowing it to be executed\n *  This feature is also known as \"conditional transfers\" feature\n */\nabstract contract ApproveTransfer is BasicCompliance {\n\n    /// Mapping of transfersApproved\n    mapping(bytes32 => bool) private _transfersApproved;\n\n    /**\n     *  this event is emitted when a transfer is approved\n     *  the event is emitted by the `approveTransfer` and `approveAndTransfer` functions\n     *  `_from` is the address of the transfer sender\n     *  `_to` is the address of the transfer receiver\n     *  `_amount` is the amount of tokens that `_from` is allowed to send to `_to`\n     *  note that the approved transfer has to be exactly of the approved amount `_amount`\n     *  `_token` is the address of the token that is allowed to be transferred\n     */\n    event TransferApproved(address _from, address _to, uint _amount, address _token);\n\n    /**\n     *  this event is emitted when a transfer approval is removed\n     *  the event is emitted by the `removeApproval` function\n     *  `_from` is the address of the transfer sender\n     *  `_to` is the address of the transfer receiver\n     *  `_amount` is the amount of tokens that `_from` was allowed to send to `_to`\n     *  `_token` is the address of the token that was allowed to be transferred\n     */\n    event ApprovalRemoved(address _from, address _to, uint _amount, address _token);\n\n    /**\n    *  @dev removes approval on a transfer previously approved\n    *  requires the transfer to be previously approved\n    *  once a transfer approval is removed, the sender is not allowed to execute it anymore\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` was allowed to send to `_to`\n    *  Only Admin can call this function, i.e. owner of compliance contract OR token agent\n    *  emits an `ApprovalRemoved` event\n    */\n    function removeApproval(address _from, address _to, uint _amount) external onlyAdmin {\n        bytes32 transferId = _calculateTransferID (_from, _to, _amount, address(tokenBound));\n        require(_transfersApproved[transferId], \"transfer not approved yet\");\n        _transfersApproved[transferId] = false;\n        emit ApprovalRemoved(_from, _to, _amount, address(tokenBound));\n    }\n\n    /**\n    *  @dev Approves a transfer and execute it immediately\n    *  As the function calls `transferFrom` on the token contract, the compliance contract, which is de facto sender of\n    *  that function call has to be allowed to make such a call, i.e. the allowance should be >= `_amount` with\n    *  Compliance contract address being the spender address\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` would send to `_to`\n    *  Only Admin can call this function, i.e. owner of compliance contract OR token agent\n    *  emits a `TransferApproved` event, an `ApprovalRemoved` event and a `Transfer` event\n    */\n    function approveAndTransfer(address _from, address _to, uint _amount) external {\n        approveTransfer(_from, _to, _amount);\n        tokenBound.transferFrom(_from, _to, _amount);\n    }\n\n    /**\n    *  @dev Approves a transfer\n    *  once a transfer is approved, the sender is allowed to execute it\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` would send to `_to`\n    *  Only Admin can call this function, i.e. owner of compliance contract OR token agent\n    *  emits a `TransferApproved` event\n    */\n    function approveTransfer(address _from, address _to, uint _amount) public onlyAdmin {\n        bytes32 transferId = _calculateTransferID (_from, _to, _amount, address(tokenBound));\n        require(!_transfersApproved[transferId], \"transfer already approved\");\n        _transfersApproved[transferId] = true;\n        emit TransferApproved(_from, _to, _amount, address(tokenBound));\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  If the check returns TRUE, the transfer is allowed to be executed, if the check returns FALSE, the compliance\n    *  feature will block the transfer execution\n    *  The check will verify if the transferID corresponding to the parameters of the transfer corresponds to a\n    *  pre-approved transfer or not, and will return TRUE or FALSE according to the approval status of the said transfer\n    *  If `_from` is a token agent, the transfer will pass whatever the approval status may be as agents bypass this\n    *  compliance feature.\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` would send to `_to`\n    */\n    function complianceCheckOnApproveTransfer(address _from, address _to, uint256 _value) public view returns (bool) {\n        if (!isTokenAgent(_from)) {\n            bytes32 transferId = _calculateTransferID (_from, _to, _value, address(tokenBound));\n            if (!_transfersApproved[transferId]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  calls the `_transferProcessed` function to update approval status post-transfer\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _transferActionOnApproveTransfer(address _from, address _to, uint256 _value) internal {\n        _transferProcessed(_from, _to, _value);\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  this compliance feature doesn't require state update post-minting\n    *  @param _to the address of the minting beneficiary\n    *  @param _value the amount of tokens minted on `_to` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _creationActionOnApproveTransfer(address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  this compliance feature doesn't require state update post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _destructionActionOnApproveTransfer(address _from, uint256 _value) internal {}\n\n    /**\n    *  @dev updates the approval status of a transfer post-execution\n    *  once an approved transfer is executed, the sender is not allowed to execute it anymore\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` was allowed to send to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    *  emits an `ApprovalRemoved` event if transfer was pre-approved, i.e. if function call was done by a regular\n    *  token holder, token agents bypassing the approval requirements\n    */\n    function _transferProcessed(address _from, address _to, uint _amount) internal {\n        bytes32 transferId = _calculateTransferID (_from, _to, _amount, address(tokenBound));\n        if (_transfersApproved[transferId]) {\n            _transfersApproved[transferId] = false;\n            emit ApprovalRemoved(_from, _to, _amount, address(tokenBound));\n        }\n    }\n\n    /**\n    *  @dev Calculates the ID of a transfer\n    *  transfer IDs are used to identify which transfer is approved and which is not at compliance contract level\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` would send to `_to`\n    *  @param _token the address of the token that would be transferred\n    *  returns the transferId of the transfer\n    */\n    function _calculateTransferID (\n        address _from,\n        address _to,\n        uint _amount,\n        address _token\n    ) internal pure returns (bytes32){\n        bytes32 transferId = keccak256(abi.encode(_from, _to, _amount, _token));\n        return transferId;\n    }\n}\n\n"
    },
    "contracts/compliance/legacy/features/CountryRestrictions.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to setup a blacklist of countries, investors with a blacklisted\n *  country of residence won't be allowed to receive tokens on their wallets\n */\nabstract contract CountryRestrictions is BasicCompliance {\n\n    /// Mapping between country and their restriction status\n    mapping(uint16 => bool) private _restrictedCountries;\n\n    /**\n     *  this event is emitted whenever a Country has been restricted.\n     *  the event is emitted by 'addCountryRestriction' and 'batchRestrictCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the restricted country.\n     */\n    event AddedRestrictedCountry(uint16 _country);\n\n    /**\n     *  this event is emitted whenever a Country has been unrestricted.\n     *  the event is emitted by 'removeCountryRestriction' and 'batchUnrestrictCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the unrestricted country.\n     */\n    event RemovedRestrictedCountry(uint16 _country);\n\n    /**\n    *  @dev Adds countries restriction in batch.\n    *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\n    *  @param _countries Countries to be restricted, should be expressed by following numeric ISO 3166-1 standard\n    *  Only the owner of the Compliance smart contract can call this function\n    *  emits _countries.length `AddedRestrictedCountry` events\n    */\n    function batchRestrictCountries(uint16[] calldata _countries) external {\n        for (uint i = 0; i < _countries.length; i++) {\n            addCountryRestriction(_countries[i]);\n        }\n    }\n\n    /**\n     *  @dev Removes countries restriction in batch.\n     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\n     *  @param _countries Countries to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits _countries.length `RemovedRestrictedCountry` events\n     */\n    function batchUnrestrictCountries(uint16[] calldata _countries) external {\n        for (uint i = 0; i < _countries.length; i++) {\n            removeCountryRestriction(_countries[i]);\n        }\n    }\n\n    /**\n    *  @dev Adds country restriction.\n    *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\n    *  @param _country Country to be restricted, should be expressed by following numeric ISO 3166-1 standard\n    *  Only the owner of the Compliance smart contract can call this function\n    *  emits an `AddedRestrictedCountry` event\n    */\n    function addCountryRestriction(uint16 _country) public onlyOwner {\n        require(!_restrictedCountries[_country], \"country already restricted\");\n        _restrictedCountries[_country] = true;\n        emit AddedRestrictedCountry(_country);\n    }\n\n    /**\n     *  @dev Removes country restriction.\n     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\n     *  @param _country Country to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `RemovedRestrictedCountry` event\n     */\n    function removeCountryRestriction(uint16 _country) public onlyOwner {\n        require(_restrictedCountries[_country], \"country not restricted\");\n        _restrictedCountries[_country] = false;\n        emit RemovedRestrictedCountry(_country);\n    }\n\n    /**\n    *  @dev Returns true if country is Restricted\n    *  @param _country, numeric ISO 3166-1 standard of the country to be checked\n    */\n    function isCountryRestricted(uint16 _country) public view returns (bool) {\n        return (_restrictedCountries[_country]);\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  If the check returns TRUE, the transfer is allowed to be executed, if the check returns FALSE, the compliance\n    *  feature will block the transfer execution\n    *  The check will verify if the country of residence of `_to` is restricted or not, in case the country is\n    *  restricted, this feature will block the transfer\n    *  @param _to the address of the transfer receiver\n    */\n    function complianceCheckOnCountryRestrictions (address /*_from*/, address _to, uint256 /*_value*/)\n    public view returns (bool) {\n        uint16 receiverCountry = _getCountry(_to);\n        if (isCountryRestricted(receiverCountry)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  this compliance feature doesn't require state update post-transfer\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _transferActionOnCountryRestrictions(address _from, address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  this compliance feature doesn't require state update post-minting\n    *  @param _to the address of the minting beneficiary\n    *  @param _value the amount of tokens minted on `_to` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _creationActionOnCountryRestrictions(address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  this compliance feature doesn't require state update post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _destructionActionOnCountryRestrictions(address _from, uint256 _value) internal {}\n}\n"
    },
    "contracts/compliance/legacy/features/CountryWhitelisting.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to setup a whitelist of countries, only investors with a whitelisted country\n *  of residence will be allowed to receive tokens\n */\nabstract contract CountryWhitelisting is BasicCompliance {\n\n    /// Mapping between country and their whitelist status\n    mapping(uint16 => bool) private _whitelistedCountries;\n\n    /**\n     *  this event is emitted whenever a Country has been whitelisted.\n     *  the event is emitted by 'whitelistCountry' and 'batchWhitelistCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the whitelisted country.\n     */\n    event WhitelistedCountry(uint16 _country);\n\n    /**\n     *  this event is emitted whenever a Country has been removed from the whitelist.\n     *  the event is emitted by 'unwhitelistCountry' and 'batchBlacklistCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the whitelisted country.\n     */\n    event UnWhitelistedCountry(uint16 _country);\n\n    /**\n    *  @dev Adds countries to the whitelist in batch.\n    *  Identities from those countries will be whitelisted & authorized to manipulate Tokens linked to this Compliance.\n    *  @param _countries Countries to be whitelisted, should be expressed by following numeric ISO 3166-1 standard\n    *  Only the owner of the Compliance smart contract can call this function\n    *  emits an `WhitelistedCountry` event\n    */\n    function batchWhitelistCountries(uint16[] memory _countries) external {\n        for (uint i = 0; i < _countries.length; i++) {\n            whitelistCountry(_countries[i]);\n        }\n    }\n\n    /**\n     *  @dev Removes countries from the whitelist in batch.\n     *  Identities from those countries will be unwhitelisted.\n     *  @param _countries Countries to be unwhitelisted, should be expressed by following numeric ISO 3166-1 standard\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `UnwhitelistedCountry` event\n     */\n    function batchUnWhitelistCountries(uint16[] memory _countries) external {\n        for (uint i = 0; i < _countries.length; i++) {\n            unWhitelistCountry(_countries[i]);\n        }\n    }\n\n    /**\n    *  @dev whitelist country.\n    *  Identities from those countries will be whitelisted & authorised to manipulate Tokens linked to this Compliance.\n    *  @param _country Country to be whitelisted, should be expressed by following numeric ISO 3166-1 standard\n    *  Only the owner of the Compliance smart contract can call this function\n    *  emits an `WhitelistedCountry` event\n    */\n    function whitelistCountry(uint16 _country) public onlyOwner {\n        require(!_whitelistedCountries[_country], \"country already whitelisted\");\n        _whitelistedCountries[_country] = true;\n        emit WhitelistedCountry(_country);\n    }\n\n    /**\n     *  @dev removes whitelisting status of a country.\n     *  Identities from those countries will be de-whitelisted & forbidden\n     *  to manipulate Tokens linked to this Compliance.\n     *  @param _country Country to be de-whitelisted, should be expressed by following numeric ISO 3166-1 standard\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `UnwhitelistedCountry` event\n     */\n    function unWhitelistCountry(uint16 _country) public onlyOwner {\n        require(_whitelistedCountries[_country], \"country not whitelisted\");\n        _whitelistedCountries[_country] = false;\n        emit UnWhitelistedCountry(_country);\n    }\n\n    /**\n    *  @dev Returns true if country is whitelisted\n    *  @param _country, numeric ISO 3166-1 standard of the country to be checked\n    */\n    function isCountryWhitelisted(uint16 _country) public view returns (bool) {\n        return (_whitelistedCountries[_country]);\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  If the check returns TRUE, the transfer is allowed to be executed, if the check returns FALSE, the compliance\n    *  feature will block the transfer execution\n    *  The check will verify if the country of residence of `_to` is whitelisted or not, in case the country is\n    *  whitelisted, this feature will allow the transfer to pass, otherwise the transfer will be blocked\n    *  @param _to the address of the transfer receiver\n    */\n    function complianceCheckOnCountryWhitelisting (address /*_from*/, address _to, uint256 /*_value*/)\n    public view returns (bool) {\n        uint16 receiverCountry = _getCountry(_to);\n        if (isCountryWhitelisted(receiverCountry)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  this compliance feature doesn't require state update post-transfer\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _transferActionOnCountryWhitelisting(address _from, address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  this compliance feature doesn't require state update post-minting\n    *  @param _to the address of the minting beneficiary\n    *  @param _value the amount of tokens minted on `_to` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _creationActionOnCountryWhitelisting(address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  this compliance feature doesn't require state update post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _destructionActionOnCountryWhitelisting(address _from, uint256 _value) internal {}\n}\n"
    },
    "contracts/compliance/legacy/features/DayMonthLimits.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to put a limits on transfer volumes on a daily basis as well as on a monthly basis\n *  Investors will not be allowed to send more tokens than the fixed limit per day/month\n */\nabstract contract DayMonthLimits is BasicCompliance {\n\n    /// Struct of transfer Counters\n    struct TransferCounter {\n        uint256 dailyCount;\n        uint256 monthlyCount;\n        uint256 dailyTimer;\n        uint256 monthlyTimer;\n    }\n\n    /// Getter for Tokens dailyLimit\n    uint256 public dailyLimit;\n\n    /// Getter for Tokens monthlyLimit\n    uint256 public monthlyLimit;\n\n    /// Mapping for users Counters\n    mapping(address => TransferCounter) public usersCounters;\n\n    /**\n     *  this event is emitted whenever a DailyLimit has been updated.\n     *  the event is emitted by 'setDailyLimit' and by Compliance's constructor.\n     *  `_newDailyLimit` is the amount Limit of tokens to be transferred daily.\n     */\n    event DailyLimitUpdated(uint _newDailyLimit);\n\n    /**\n     *  this event is emitted whenever a MonthlyLimit has been updated.\n     *  the event is emitted by 'setMonthlyLimit' and by Compliance's constructor.\n     *  `_newMonthlyLimit` is the amount Limit of tokens to be transferred monthly.\n     */\n    event MonthlyLimitUpdated(uint _newMonthlyLimit);\n\n    /**\n    *  @dev Set the limit of tokens allowed to be transferred daily.\n    *  @param _newDailyLimit The new daily limit of tokens\n    *  Only the owner of the Compliance smart contract can call this function\n    */\n    function setDailyLimit(uint256 _newDailyLimit) external onlyOwner {\n        dailyLimit = _newDailyLimit;\n        emit DailyLimitUpdated(_newDailyLimit);\n    }\n\n    /**\n     *  @dev Set the limit of tokens allowed to be transferred monthly.\n     *  @param _newMonthlyLimit The new monthly limit of tokens\n     *  Only the owner of the Compliance smart contract can call this function\n     */\n    function setMonthlyLimit(uint256 _newMonthlyLimit) external onlyOwner {\n        monthlyLimit = _newMonthlyLimit;\n        emit MonthlyLimitUpdated(_newMonthlyLimit);\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  If the check returns TRUE, the transfer is allowed to be executed, if the check returns FALSE, the compliance\n    *  feature will block the transfer execution\n    *  The check will verify if the transfer is exceeding the limits (daily and/or monthly)\n    *  If the transfer exceeds the limits, the check returns false and the transfer is blocked\n    *  otherwise it returns true. Agents bypass this compliance feature\n    *  @param _from the address of the transfer sender\n    *  @param _value the amount of tokens that `_from` would send to `_to`\n    */\n    function complianceCheckOnDayMonthLimits(address _from, address /*_to*/, uint256 _value) public view returns (bool) {\n        address senderIdentity = _getIdentity(_from);\n        if (!isTokenAgent(_from)) {\n            if (_value > dailyLimit) {\n                return false;\n            }\n            if (!_isDayFinished(senderIdentity) &&\n            ((usersCounters[senderIdentity].dailyCount + _value > dailyLimit)\n            || (usersCounters[senderIdentity].monthlyCount + _value > monthlyLimit))) {\n                return false;\n            }\n            if (_isDayFinished(senderIdentity) && _value + usersCounters[senderIdentity].monthlyCount > monthlyLimit) {\n                return(_isMonthFinished(senderIdentity));\n            }\n        }\n        return true;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  counters of daily and monthly transfers are updated post-transfer\n    *  @param _from the address of the transfer sender\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _transferActionOnDayMonthLimits(address _from, address /*_to*/, uint256 _value) internal {\n        _increaseCounters(_from, _value);\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  this compliance feature doesn't require state update post-minting\n    *  @param _to the address of the minting beneficiary\n    *  @param _value the amount of tokens minted on `_to` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _creationActionOnDayMonthLimits(address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  this compliance feature doesn't require state update post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _destructionActionOnDayMonthLimits(address _from, uint256 _value) internal {}\n\n    /**\n    *  @dev Checks if daily and/or monthly cooldown must be reset, then check if _value sent has been exceeded,\n    *  if not increases user's OnchainID counters.\n    *  @param _userAddress, address on which counters will be increased\n    *  @param _value, value of transaction)to be increased\n    */\n    function _increaseCounters(address _userAddress, uint256 _value) internal {\n        address identity = _getIdentity(_userAddress);\n        _resetDailyCooldown(identity);\n        _resetMonthlyCooldown(identity);\n        if ((usersCounters[identity].dailyCount + _value) <= dailyLimit) {\n            usersCounters[identity].dailyCount += _value;\n        }\n        if ((usersCounters[identity].monthlyCount + _value) <= monthlyLimit) {\n            usersCounters[identity].monthlyCount += _value;\n        }\n    }\n\n    /**\n    *  @dev resets cooldown for the day if cooldown has reached time limit of 1 day\n    *  @param _identity ONCHAINID to be checked\n    */\n    function _resetDailyCooldown(address _identity) internal {\n        if (_isDayFinished(_identity)) {\n            usersCounters[_identity].dailyTimer = block.timestamp + 1 days;\n            usersCounters[_identity].dailyCount = 0;\n        }\n    }\n\n    /**\n    *  @dev resets cooldown for the month if cooldown has reached the time limit of 30days\n    *  @param _identity ONCHAINID to be checked\n    */\n    function _resetMonthlyCooldown(address _identity) internal {\n        if (_isMonthFinished(_identity)) {\n            usersCounters[_identity].monthlyTimer = block.timestamp + 30 days;\n            usersCounters[_identity].monthlyCount = 0;\n        }\n    }\n\n    /**\n    *  @dev checks if the day has finished since the cooldown has been triggered for this identity\n    *  @param _identity ONCHAINID to be checked\n    */\n    function _isDayFinished(address _identity) internal view returns (bool) {\n        return (usersCounters[_identity].dailyTimer <= block.timestamp);\n    }\n\n    /**\n    *  @dev checks if the month has finished since the cooldown has been triggered for this identity\n    *  @param _identity ONCHAINID to be checked\n    */\n    function _isMonthFinished(address _identity) internal view returns (bool) {\n        return (usersCounters[_identity].monthlyTimer <= block.timestamp);\n    }\n\n}\n"
    },
    "contracts/compliance/legacy/features/ExchangeMonthlyLimits.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to put a limit on the monthly deposits one can make on a given exchange\n *  It won't be possible for an investor to send more than the monthly limit of tokens on a given exchange\n */\nabstract contract ExchangeMonthlyLimits is BasicCompliance {\n\n    /// Struct of transfer Counters\n    struct ExchangeTransferCounter {\n        uint256 monthlyCount;\n        uint256 monthlyTimer;\n    }\n\n    /// Getter for Tokens monthlyLimit\n    mapping(address => uint256) private _exchangeMonthlyLimit;\n\n    /// Mapping for users Counters\n    mapping(address => mapping(address => ExchangeTransferCounter)) private _exchangeCounters;\n\n    /// Mapping for wallets tagged as exchange wallets\n    mapping(address => bool) private _exchangeIDs;\n\n    /**\n     *  this event is emitted whenever the Exchange Limit has been updated.\n     *  the event is emitted by 'setExchangeMonthlyLimit'\n     *  `_exchangeID` is the amount ONCHAINID address of the exchange.\n     *  `_newExchangeMonthlyLimit` is the amount Limit of tokens to be transferred monthly to an exchange wallet.\n     */\n    event ExchangeMonthlyLimitUpdated(address _exchangeID, uint _newExchangeMonthlyLimit);\n\n    /**\n     *  this event is emitted whenever an ONCHAINID is tagged as being an exchange ID.\n     *  the event is emitted by 'addExchangeID'.\n     *  `_newExchangeID` is the ONCHAINID address of the exchange to add.\n     */\n    event ExchangeIDAdded(address _newExchangeID);\n\n    /**\n     *  this event is emitted whenever an ONCHAINID is untagged as belonging to an exchange.\n     *  the event is emitted by 'removeExchangeID'.\n     *  `_exchangeID` is the ONCHAINID being untagged as an exchange ID.\n     */\n    event ExchangeIDRemoved(address _exchangeID);\n\n    /**\n     *  @dev Set the limit of tokens allowed to be transferred monthly.\n     *  @param _exchangeID ONCHAINID of the exchange\n     *  @param _newExchangeMonthlyLimit The new monthly limit of tokens\n     *  Only the owner of the Compliance smart contract can call this function\n     */\n    function setExchangeMonthlyLimit(address _exchangeID, uint256 _newExchangeMonthlyLimit) external onlyOwner {\n        _exchangeMonthlyLimit[_exchangeID] = _newExchangeMonthlyLimit;\n        emit ExchangeMonthlyLimitUpdated(_exchangeID, _newExchangeMonthlyLimit);\n    }\n\n    /**\n    *  @dev tags the ONCHAINID as being an exchange ID\n    *  @param _exchangeID ONCHAINID to be tagged\n    *  Function can be called only by owner of the compliance contract\n    *  Cannot be called on an address already tagged as being an exchange\n    *  emits an `ExchangeIDAdded` event\n    */\n    function addExchangeID(address _exchangeID) public onlyOwner {\n        require(!isExchangeID(_exchangeID), \"ONCHAINID already tagged as exchange\");\n        _exchangeIDs[_exchangeID] = true;\n        emit ExchangeIDAdded(_exchangeID);\n    }\n\n    /**\n    *  @dev untags the ONCHAINID as being an exchange ID\n    *  @param _exchangeID ONCHAINID to be untagged\n    *  Function can be called only by owner of the compliance contract\n    *  Cannot be called on an address not tagged as being an exchange\n    *  emits an `ExchangeIDRemoved` event\n    */\n    function removeExchangeID(address _exchangeID) public onlyOwner {\n        require(isExchangeID(_exchangeID), \"ONCHAINID not tagged as exchange\");\n        _exchangeIDs[_exchangeID] = false;\n        emit ExchangeIDRemoved(_exchangeID);\n    }\n\n    /**\n    *  @dev getter for `_exchangeIDs` variable\n    *  tells to the caller if an ONCHAINID belongs to an exchange or not\n    *  @param _exchangeID ONCHAINID to be checked\n    *  returns TRUE if the address corresponds to an exchange, FALSE otherwise\n    */\n    function isExchangeID(address _exchangeID) public view returns (bool){\n        return _exchangeIDs[_exchangeID];\n    }\n\n    /**\n    *  @dev getter for `exchangeCounters` variable on the counter parameter of the ExchangeTransferCounter struct\n    *  @param _exchangeID exchange ONCHAINID\n    *  @param _investorID ONCHAINID to be checked\n    *  returns current monthly counter of `_investorID` on `exchangeID` exchange\n    */\n    function getMonthlyCounter(address _exchangeID, address _investorID) public view returns (uint256) {\n        return (_exchangeCounters[_exchangeID][_investorID]).monthlyCount;\n    }\n\n    /**\n    *  @dev getter for `exchangeCounters` variable on the timer parameter of the ExchangeTransferCounter struct\n    *  @param _exchangeID exchange ONCHAINID\n    *  @param _investorID ONCHAINID to be checked\n    *  returns current timer of `_investorID` on `exchangeID` exchange\n    */\n    function getMonthlyTimer(address _exchangeID, address _investorID) public view returns (uint256) {\n        return (_exchangeCounters[_exchangeID][_investorID]).monthlyTimer;\n    }\n\n    /**\n    *  @dev getter for `exchangeMonthlyLimit` variable\n    *  @param _exchangeID exchange ONCHAINID\n    *  returns the monthly limit set for that exchange\n    */\n    function getExchangeMonthlyLimit(address _exchangeID) public view returns (uint256) {\n        return _exchangeMonthlyLimit[_exchangeID];\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  If the check returns TRUE, the transfer is allowed to be executed, if the check returns FALSE, the compliance\n    *  feature will block the transfer execution\n    *  The check will verify if the transfer is done to an exchange wallet, if it is the case it will check if the\n    *  transfer respects the limitations in terms of authorized monthly deposit volume, if it does the check\n    *  will return true, if the transfer doesn't respect the limitations it will return false and block the transfer\n    *  Agents are allowed to bypass this check\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` would send to `_to`\n    */\n    function complianceCheckOnExchangeMonthlyLimits(address _from, address _to, uint256 _value) public view returns\n    (bool) {\n        address senderIdentity = _getIdentity(_from);\n        address receiverIdentity = _getIdentity(_to);\n        if (!isTokenAgent(_from) && _from != address(0)) {\n            if (isExchangeID(receiverIdentity)) {\n                if(_value > _exchangeMonthlyLimit[receiverIdentity]) {\n                    return false;\n                }\n                if (!_isExchangeMonthFinished(receiverIdentity, senderIdentity)\n                && ((getMonthlyCounter(receiverIdentity, senderIdentity) + _value > _exchangeMonthlyLimit[receiverIdentity]))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  updates counters if the receiver address is linked to an exchange ONCHAINID and sender is not an agent\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _transferActionOnExchangeMonthlyLimits(address _from, address _to, uint256 _value) internal {\n        address senderIdentity = _getIdentity(_from);\n        address receiverIdentity = _getIdentity(_to);\n        if(isExchangeID(receiverIdentity) && !isTokenAgent(_from)) {\n            _increaseExchangeCounters(senderIdentity, receiverIdentity, _value);\n        }\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  this compliance feature doesn't require state update post-minting\n    *  @param _to the address of the minting beneficiary\n    *  @param _value the amount of tokens minted on `_to` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _creationActionOnExchangeMonthlyLimits(address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  this compliance feature doesn't require state update post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _destructionActionOnExchangeMonthlyLimits(address _from, uint256 _value) internal {}\n\n    /**\n    *  @dev Checks if monthly cooldown must be reset, then check if _value sent has been exceeded,\n    *  if not increases user's OnchainID counters.\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID address on which counters will be increased\n    *  @param _value, value of transaction)to be increased\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _increaseExchangeCounters(address _exchangeID, address _investorID, uint256 _value) internal {\n        _resetExchangeMonthlyCooldown(_exchangeID, _investorID);\n\n        if ((getMonthlyCounter(_exchangeID, _investorID) + _value) <= _exchangeMonthlyLimit[_exchangeID]) {\n            (_exchangeCounters[_exchangeID][_investorID]).monthlyCount += _value;\n        }\n    }\n\n    /**\n    *  @dev resets cooldown for the month if cooldown has reached the time limit of 30days\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID ONCHAINID to reset\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _resetExchangeMonthlyCooldown(address _exchangeID, address _investorID) internal {\n        if (_isExchangeMonthFinished(_exchangeID, _investorID)) {\n            (_exchangeCounters[_exchangeID][_investorID]).monthlyTimer = block.timestamp + 30 days;\n            (_exchangeCounters[_exchangeID][_investorID]).monthlyCount = 0;\n        }\n    }\n\n    /**\n    *  @dev checks if the month has finished since the cooldown has been triggered for this identity\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID ONCHAINID to be checked\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isExchangeMonthFinished(address _exchangeID, address _investorID) internal view returns (bool) {\n        return (getMonthlyTimer(_exchangeID, _investorID) <= block.timestamp);\n    }\n}\n"
    },
    "contracts/compliance/legacy/features/MaxBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to put a maximum balance for an investor\n */\nabstract contract MaxBalance is BasicCompliance {\n\n    /// maximum balance per investor ONCHAINID\n    uint256 public maxBalance;\n\n    /// mapping of balances per ONCHAINID\n    // solhint-disable-next-line var-name-mixedcase\n    mapping (address => uint256) public IDBalance;\n\n    /**\n     *  this event is emitted when the max balance has been set.\n     *  `_maxBalance` is the max amount of tokens that a user can hold .\n     */\n    event MaxBalanceSet(uint256 _maxBalance);\n\n    /**\n     *  @dev sets max balance limit\n     *  @param _max max amount of tokens owned by an individual\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `MaxBalanceSet` event\n     */\n    function setMaxBalance(uint256 _max) external onlyOwner {\n        maxBalance = _max;\n        emit MaxBalanceSet(_max);\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  If the check returns TRUE, the transfer is allowed to be executed, if the check returns FALSE, the compliance\n    *  feature will block the transfer execution\n    *  The check will verify if the transfer doesn't push the ONCHAINID-based balance of `_to` above\n    *  the authorized threshold fixed by maxBalance\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` would send to `_to`\n    */\n    function complianceCheckOnMaxBalance (address /*_from*/, address _to, uint256 _value) public view returns (bool) {\n        if (_value > maxBalance) {\n            return false;\n        }\n        address _id = _getIdentity(_to);\n        if ((IDBalance[_id] + _value) > maxBalance) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  updates the ONCHAINID-based balance of `_to` and `_from` post-transfer\n    *  revert if post-transfer balance of `_to` is higher than max balance\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _transferActionOnMaxBalance(address _from, address _to, uint256 _value) internal {\n        address _idFrom = _getIdentity(_from);\n        address _idTo = _getIdentity(_to);\n        IDBalance[_idTo] += _value;\n        IDBalance[_idFrom] -= _value;\n        require (IDBalance[_idTo] <= maxBalance, \"post-transfer balance too high\");\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  updates the ONCHAINID-based balance of `_to` post-minting\n    *  revert if post-minting balance of `_to` is higher than max balance\n    *  @param _to the address of the minting beneficiary\n    *  @param _value the amount of tokens minted on `_to` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _creationActionOnMaxBalance(address _to, uint256 _value) internal {\n        address _idTo = _getIdentity(_to);\n        IDBalance[_idTo] += _value;\n        require (IDBalance[_idTo] <= maxBalance, \"post-minting balance too high\");\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  updates the ONCHAINID-based balance of `_from` post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _destructionActionOnMaxBalance(address _from, uint256 _value) internal {\n        address _idFrom = _getIdentity(_from);\n        IDBalance[_idFrom] -= _value;\n    }\n}\n"
    },
    "contracts/compliance/legacy/features/SupplyLimit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../BasicCompliance.sol\";\n\n/**\n *  this feature allows to put a supply limit on the token\n *  If an agent tries to mint more tokens than the maximum threshold, the minting will fail\n */\nabstract contract SupplyLimit is BasicCompliance {\n\n    /// supply limit variable\n    uint256 public supplyLimit;\n\n    /**\n     *  this event is emitted when the supply limit has been set.\n     *  `_limit` is the max amount of tokens in circulation.\n     */\n    event SupplyLimitSet(uint256 _limit);\n\n    /**\n     *  @dev sets supply limit.\n     *  Supply limit has to be smaller or equal to the actual supply.\n     *  @param _limit max amount of tokens to be created\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `SupplyLimitSet` event\n     */\n    function setSupplyLimit(uint256 _limit) external onlyOwner {\n        supplyLimit = _limit;\n        emit SupplyLimitSet(_limit);\n    }\n\n    /**\n    *  @dev check on the compliance status of a transaction.\n    *  This check always returns true, real check is done at the creation action level\n    */\n    function complianceCheckOnSupplyLimit (address /*_from*/, address /*_to*/, uint256 /*_value*/)\n    public view returns (bool) {\n        return true;\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-transfer.\n    *  this compliance feature doesn't require state update post-transfer\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _value the amount of tokens that `_from` sent to `_to`\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _transferActionOnSupplyLimit(address _from, address _to, uint256 _value) internal {}\n\n    /**\n    *  @dev state update of the compliance feature post-minting.\n    *  reverts if the post-minting supply is higher than the max supply\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _creationActionOnSupplyLimit(address /*_to*/, uint256 /*_value*/) internal {\n        require(tokenBound.totalSupply() <= supplyLimit, \"cannot mint more tokens\");\n    }\n\n    /**\n    *  @dev state update of the compliance feature post-burning.\n    *  this compliance feature doesn't require state update post-burning\n    *  @param _from the wallet address on which tokens burnt\n    *  @param _value the amount of tokens burnt from `_from` wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    // solhint-disable-next-line no-empty-blocks\n    function _destructionActionOnSupplyLimit(address _from, uint256 _value) internal {}\n}\n"
    },
    "contracts/compliance/legacy/ICompliance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface ICompliance {\n    /**\n     *  this event is emitted when the Agent has been added on the allowedList of this Compliance.\n     *  the event is emitted by the Compliance constructor and by the addTokenAgent function\n     *  `_agentAddress` is the address of the Agent to add\n     */\n    event TokenAgentAdded(address _agentAddress);\n\n    /**\n     *  this event is emitted when the Agent has been removed from the agent list of this Compliance.\n     *  the event is emitted by the Compliance constructor and by the removeTokenAgent function\n     *  `_agentAddress` is the address of the Agent to remove\n     */\n    event TokenAgentRemoved(address _agentAddress);\n\n    /**\n     *  this event is emitted when a token has been bound to the compliance contract\n     *  the event is emitted by the bindToken function\n     *  `_token` is the address of the token to bind\n     */\n    event TokenBound(address _token);\n\n    /**\n     *  this event is emitted when a token has been unbound from the compliance contract\n     *  the event is emitted by the unbindToken function\n     *  `_token` is the address of the token to unbind\n     */\n    event TokenUnbound(address _token);\n\n    /**\n     *  @dev adds an agent to the list of token agents\n     *  @param _agentAddress address of the agent to be added\n     *  Emits a TokenAgentAdded event\n     */\n    function addTokenAgent(address _agentAddress) external;\n\n    /**\n     *  @dev remove Agent from the list of token agents\n     *  @param _agentAddress address of the agent to be removed (must be added first)\n     *  Emits a TokenAgentRemoved event\n     */\n    function removeTokenAgent(address _agentAddress) external;\n\n    /**\n     *  @dev binds a token to the compliance contract\n     *  @param _token address of the token to bind\n     *  Emits a TokenBound event\n     */\n    function bindToken(address _token) external;\n\n    /**\n     *  @dev unbinds a token from the compliance contract\n     *  @param _token address of the token to unbind\n     *  Emits a TokenUnbound event\n     */\n    function unbindToken(address _token) external;\n\n    /**\n     *  @dev function called whenever tokens are transferred\n     *  from one wallet to another\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function transferred(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev function called whenever tokens are created\n     *  on a wallet\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function created(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev function called whenever tokens are destroyed\n     *  this function can update state variables in the compliance contract\n     *  these state variables being used by `canTransfer` to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the compliance smart contract\n     *  @param _from The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function destroyed(address _from, uint256 _amount) external;\n\n    /**\n     *  @dev Returns true if the Address is in the list of token agents\n     *  @param _agentAddress address of this agent\n     */\n    function isTokenAgent(address _agentAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\n     *  @param _token address of the token\n     */\n    function isTokenBound(address _token) external view returns (bool);\n\n    /**\n     *  @dev checks that the transfer is compliant.\n     *  default compliance always returns true\n     *  READ ONLY FUNCTION, this function cannot be used to increment\n     *  counters, emit events, ...\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     */\n    function canTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external view returns (bool);\n}\n"
    },
    "contracts/compliance/legacy/test/ApproveTransferTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/ApproveTransfer.sol\";\n\ncontract ApproveTransferTest is ApproveTransfer {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnApproveTransfer(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnApproveTransfer(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnApproveTransfer(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnApproveTransfer(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n\n"
    },
    "contracts/compliance/legacy/test/CountryRestrictionsTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/CountryRestrictions.sol\";\n\ncontract CountryRestrictionsTest is CountryRestrictions {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnCountryRestrictions(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnCountryRestrictions(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnCountryRestrictions(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnCountryRestrictions(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/legacy/test/CountryWhitelistingTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/CountryWhitelisting.sol\";\n\ncontract CountryWhitelistingTest is CountryWhitelisting {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnCountryWhitelisting(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnCountryWhitelisting(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnCountryWhitelisting(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnCountryWhitelisting(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/legacy/test/DayMonthLimitsTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/DayMonthLimits.sol\";\n\ncontract DayMonthLimitsTest is DayMonthLimits {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnDayMonthLimits(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnDayMonthLimits(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnDayMonthLimits(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnDayMonthLimits(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/legacy/test/ExchangeMonthlyLimitsTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/ExchangeMonthlyLimits.sol\";\n\ncontract ExchangeMonthlyLimitsTest is ExchangeMonthlyLimits {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnExchangeMonthlyLimits(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnExchangeMonthlyLimits(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnExchangeMonthlyLimits(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnExchangeMonthlyLimits(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/legacy/test/MaxBalanceTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/MaxBalance.sol\";\n\ncontract MaxBalanceTest is MaxBalance {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnMaxBalance(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnMaxBalance(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnMaxBalance(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnMaxBalance(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/legacy/test/SupplyLimitTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../features/SupplyLimit.sol\";\n\ncontract SupplyLimitTest is SupplyLimit {\n    /**\n    *  @dev See {ICompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        _transferActionOnSupplyLimit(_from, _to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        _creationActionOnSupplyLimit(_to, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        _destructionActionOnSupplyLimit(_from, _value);\n    }\n\n    /**\n     *  @dev See {ICompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        if (!complianceCheckOnSupplyLimit(_from, _to, _value))\n        {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/compliance/modular/IModularCompliance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface IModularCompliance {\n\n    /// events\n\n    /**\n     *  @dev Event emitted for each executed interaction with a module contract.\n     *  For gas efficiency, only the interaction calldata selector (first 4\n     *  bytes) is included in the event. For interactions without calldata or\n     *  whose calldata is shorter than 4 bytes, the selector will be `0`.\n     */\n    event ModuleInteraction(address indexed target, bytes4 selector);\n\n    /**\n     *  this event is emitted when a token has been bound to the compliance contract\n     *  the event is emitted by the bindToken function\n     *  `_token` is the address of the token to bind\n     */\n    event TokenBound(address _token);\n\n    /**\n     *  this event is emitted when a token has been unbound from the compliance contract\n     *  the event is emitted by the unbindToken function\n     *  `_token` is the address of the token to unbind\n     */\n    event TokenUnbound(address _token);\n\n    /**\n     *  this event is emitted when a module has been added to the list of modules bound to the compliance contract\n     *  the event is emitted by the addModule function\n     *  `_module` is the address of the compliance module\n     */\n    event ModuleAdded(address indexed _module);\n\n    /**\n     *  this event is emitted when a module has been removed from the list of modules bound to the compliance contract\n     *  the event is emitted by the removeModule function\n     *  `_module` is the address of the compliance module\n     */\n    event ModuleRemoved(address indexed _module);\n\n    /// functions\n\n    /**\n     *  @dev binds a token to the compliance contract\n     *  @param _token address of the token to bind\n     *  This function can be called ONLY by the owner of the compliance contract\n     *  Emits a TokenBound event\n     */\n    function bindToken(address _token) external;\n\n    /**\n     *  @dev unbinds a token from the compliance contract\n     *  @param _token address of the token to unbind\n     *  This function can be called ONLY by the owner of the compliance contract\n     *  Emits a TokenUnbound event\n     */\n    function unbindToken(address _token) external;\n\n    /**\n     *  @dev adds a module to the list of compliance modules\n     *  @param _module address of the module to add\n     *  there cannot be more than 25 modules bound to the modular compliance for gas cost reasons\n     *  This function can be called ONLY by the owner of the compliance contract\n     *  Emits a ModuleAdded event\n     */\n    function addModule(address _module) external;\n\n    /**\n     *  @dev removes a module from the list of compliance modules\n     *  @param _module address of the module to remove\n     *  This function can be called ONLY by the owner of the compliance contract\n     *  Emits a ModuleRemoved event\n     */\n    function removeModule(address _module) external;\n\n    /**\n     *  @dev calls any function on bound modules\n     *  can be called only on bound modules\n     *  @param callData the bytecode for interaction with the module, abi encoded\n     *  @param _module The address of the module\n     *  This function can be called only by the modular compliance owner\n     *  emits a `ModuleInteraction` event\n     */\n    function callModuleFunction(bytes calldata callData, address _module) external;\n\n    /**\n     *  @dev function called whenever tokens are transferred\n     *  from one wallet to another\n     *  this function can update state variables in the modules bound to the compliance\n     *  these state variables being used by the module checks to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the modules\n     *  This function can be called ONLY by the token contract bound to the compliance\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     *  This function calls moduleTransferAction() on each module bound to the compliance contract\n     */\n    function transferred(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    /**\n     *  @dev function called whenever tokens are created on a wallet\n     *  this function can update state variables in the modules bound to the compliance\n     *  these state variables being used by the module checks to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the modules\n     *  This function can be called ONLY by the token contract bound to the compliance\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the minting\n     *  This function calls moduleMintAction() on each module bound to the compliance contract\n     */\n    function created(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev function called whenever tokens are destroyed from a wallet\n     *  this function can update state variables in the modules bound to the compliance\n     *  these state variables being used by the module checks to decide if a transfer\n     *  is compliant or not depending on the values stored in these state variables and on\n     *  the parameters of the modules\n     *  This function can be called ONLY by the token contract bound to the compliance\n     *  @param _from The address on which tokens are burnt\n     *  @param _amount The amount of tokens involved in the burn\n     *  This function calls moduleBurnAction() on each module bound to the compliance contract\n     */\n    function destroyed(address _from, uint256 _amount) external;\n\n    /**\n     *  @dev checks that the transfer is compliant.\n     *  default compliance always returns true\n     *  READ ONLY FUNCTION, this function cannot be used to increment\n     *  counters, emit events, ...\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The amount of tokens involved in the transfer\n     *  This function will call moduleCheck() on every module bound to the compliance\n     *  If each of the module checks return TRUE, this function will return TRUE as well\n     *  returns FALSE otherwise\n     */\n    function canTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external view returns (bool);\n\n    /**\n     *  @dev getter for the modules bound to the compliance contract\n     *  returns address array of module contracts bound to the compliance\n     */\n    function getModules() external view returns (address[] memory);\n\n    /**\n     *  @dev getter for the address of the token bound\n     *  returns the address of the token\n     */\n    function getTokenBound() external view returns (address);\n\n    /**\n     *  @dev checks if a module is bound to the compliance contract\n     *  returns true if module is bound, false otherwise\n     */\n    function isModuleBound(address _module) external view returns (bool);\n}\n"
    },
    "contracts/compliance/modular/MCStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ncontract MCStorage {\n    /// token linked to the compliance contract\n    address internal _tokenBound;\n\n    /// Array of modules bound to the compliance\n    address[] internal _modules;\n\n    /// Mapping of module binding status\n    mapping(address => bool) internal _moduleBound;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/compliance/modular/ModularCompliance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../token/IToken.sol\";\nimport \"./IModularCompliance.sol\";\nimport \"./MCStorage.sol\";\nimport \"./modules/IModule.sol\";\n\n\ncontract ModularCompliance is IModularCompliance, OwnableUpgradeable, MCStorage {\n\n    /// modifiers\n\n    /**\n     * @dev Throws if called by any address that is not a token bound to the compliance.\n     */\n    modifier onlyToken() {\n        require(msg.sender == _tokenBound, \"error : this address is not a token bound to the compliance contract\");\n        _;\n    }\n\n    function init() external initializer {\n        __Ownable_init();\n    }\n\n    /**\n     *  @dev See {IModularCompliance-bindToken}.\n     */\n    function bindToken(address _token) external override {\n        require(owner() == msg.sender || (_tokenBound == address(0) && msg.sender == _token),\n        \"only owner or token can call\");\n        require(_token != address(0), \"invalid argument - zero address\");\n        _tokenBound = _token;\n        emit TokenBound(_token);\n    }\n\n    /**\n    *  @dev See {IModularCompliance-unbindToken}.\n    */\n    function unbindToken(address _token) external override {\n        require(owner() == msg.sender || msg.sender == _token , \"only owner or token can call\");\n        require(_token == _tokenBound, \"This token is not bound\");\n        require(_token != address(0), \"invalid argument - zero address\");\n        delete _tokenBound;\n        emit TokenUnbound(_token);\n    }\n\n    /**\n     *  @dev See {IModularCompliance-addModule}.\n     */\n    function addModule(address _module) external override onlyOwner {\n        require(_module != address(0), \"invalid argument - zero address\");\n        require(!_moduleBound[_module], \"module already bound\");\n        require(_modules.length <= 24, \"cannot add more than 25 modules\");\n        IModule module = IModule(_module);\n        if (!module.isPlugAndPlay()) {\n            require(module.canComplianceBind(address(this)), \"compliance is not suitable for binding to the module\");\n        }\n\n        module.bindCompliance(address(this));\n        _modules.push(_module);\n        _moduleBound[_module] = true;\n        emit ModuleAdded(_module);\n    }\n\n    /**\n     *  @dev See {IModularCompliance-removeModule}.\n     */\n    function removeModule(address _module) external override onlyOwner {\n        require(_module != address(0), \"invalid argument - zero address\");\n        require(_moduleBound[_module], \"module not bound\");\n        uint256 length = _modules.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_modules[i] == _module) {\n                IModule(_module).unbindCompliance(address(this));\n                _modules[i] = _modules[length - 1];\n                _modules.pop();\n                _moduleBound[_module] = false;\n                emit ModuleRemoved(_module);\n                break;\n            }\n        }\n    }\n\n    /**\n    *  @dev See {IModularCompliance-transferred}.\n    */\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\n        require(\n            _from != address(0)\n            && _to != address(0)\n        , \"invalid argument - zero address\");\n        require(_value > 0, \"invalid argument - no value transfer\");\n        uint256 length = _modules.length;\n        for (uint256 i = 0; i < length; i++) {\n            IModule(_modules[i]).moduleTransferAction(_from, _to, _value);\n        }\n    }\n\n    /**\n     *  @dev See {IModularCompliance-created}.\n     */\n    function created(address _to, uint256 _value) external onlyToken override {\n        require(_to != address(0), \"invalid argument - zero address\");\n        require(_value > 0, \"invalid argument - no value mint\");\n        uint256 length = _modules.length;\n        for (uint256 i = 0; i < length; i++) {\n            IModule(_modules[i]).moduleMintAction(_to, _value);\n        }\n    }\n\n    /**\n     *  @dev See {IModularCompliance-destroyed}.\n     */\n    function destroyed(address _from, uint256 _value) external onlyToken override {\n        require(_from != address(0), \"invalid argument - zero address\");\n        require(_value > 0, \"invalid argument - no value burn\");\n        uint256 length = _modules.length;\n        for (uint256 i = 0; i < length; i++) {\n            IModule(_modules[i]).moduleBurnAction(_from, _value);\n        }\n    }\n\n    /**\n     *  @dev see {IModularCompliance-callModuleFunction}.\n     */\n    function callModuleFunction(bytes calldata callData, address _module) external override onlyOwner {\n        require(_moduleBound[_module], \"call only on bound module\");\n        // NOTE: Use assembly to call the interaction instead of a low level\n        // call for two reasons:\n        // - We don't want to copy the return data, since we discard it for\n        // interactions.\n        // - Solidity will under certain conditions generate code to copy input\n        // calldata twice to memory (the second being a \"memcopy loop\").\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            calldatacopy(freeMemoryPointer, callData.offset, callData.length)\n            if iszero(\n            call(\n            gas(),\n            _module,\n            0,\n            freeMemoryPointer,\n            callData.length,\n            0,\n            0\n            ))\n            {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        emit ModuleInteraction(_module, _selector(callData));\n\n    }\n\n    /**\n     *  @dev See {IModularCompliance-isModuleBound}.\n     */\n    function isModuleBound(address _module) external view override returns (bool) {\n        return _moduleBound[_module];\n    }\n\n    /**\n     *  @dev See {IModularCompliance-getModules}.\n     */\n    function getModules() external view override returns (address[] memory) {\n        return _modules;\n    }\n\n    /**\n     *  @dev See {IModularCompliance-getTokenBound}.\n     */\n    function getTokenBound() external view override returns (address) {\n        return _tokenBound;\n    }\n\n    /**\n     *  @dev See {IModularCompliance-canTransfer}.\n     */\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\n        uint256 length = _modules.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (!IModule(_modules[i]).moduleCheck(_from, _to, _value, address(this))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\n    /// @param callData Interaction data.\n    /// @return result The 4 byte function selector of the call encoded in\n    /// this interaction.\n    function _selector(bytes calldata callData) internal pure returns (bytes4 result) {\n        if (callData.length >= 4) {\n            // NOTE: Read the first word of the interaction's calldata. The\n            // value does not need to be shifted since `bytesN` values are left\n            // aligned, and the value does not need to be masked since masking\n            // occurs when the value is accessed and not stored:\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                result := calldataload(callData.offset)\n            }\n        }\n    }\n}\n\n"
    },
    "contracts/compliance/modular/modules/AbstractModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./IModule.sol\";\n\nabstract contract AbstractModule is IModule {\n\n    /// compliance contract binding status\n    mapping(address => bool) private _complianceBound;\n\n    /**\n     * @dev Throws if `_compliance` is not a bound compliance contract address.\n     */\n    modifier onlyBoundCompliance(address _compliance) {\n        require(_complianceBound[_compliance], \"compliance not bound\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called from an address that is not a bound compliance contract.\n     */\n    modifier onlyComplianceCall() {\n        require(_complianceBound[msg.sender], \"only bound compliance can call\");\n        _;\n    }\n\n    /**\n     *  @dev See {IModule-bindCompliance}.\n     */\n    function bindCompliance(address _compliance) external override {\n        require(_compliance != address(0), \"invalid argument - zero address\");\n        require(!_complianceBound[_compliance], \"compliance already bound\");\n        require(msg.sender == _compliance, \"only compliance contract can call\");\n        _complianceBound[_compliance] = true;\n        emit ComplianceBound(_compliance);\n    }\n\n    /**\n     *  @dev See {IModule-unbindCompliance}.\n     */\n    function unbindCompliance(address _compliance) external onlyComplianceCall override {\n        require(_compliance != address(0), \"invalid argument - zero address\");\n        require(msg.sender == _compliance, \"only compliance contract can call\");\n        _complianceBound[_compliance] = false;\n        emit ComplianceUnbound(_compliance);\n    }\n\n    /**\n     *  @dev See {IModule-isComplianceBound}.\n     */\n    function isComplianceBound(address _compliance) external view override returns (bool) {\n        return _complianceBound[_compliance];\n    }\n\n}\n"
    },
    "contracts/compliance/modular/modules/AbstractModuleUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./IModule.sol\";\n\nabstract contract AbstractModuleUpgradeable is IModule, Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    struct AbstractModuleStorage {\n        /// compliance contract binding status\n        mapping(address => bool) complianceBound;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"ERC3643.storage.AbstractModule\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant _ABSTRACT_MODULE_STORAGE_LOCATION =\n        0xf6cc97de1266c180cd39f3b311632644143ce7873d2927755382ad4b39e8ae00;\n\n    /**\n     * @dev Throws if `_compliance` is not a bound compliance contract address.\n     */\n    modifier onlyBoundCompliance(address _compliance) {\n        AbstractModuleStorage storage s = _getAbstractModuleStorage();\n        require(s.complianceBound[_compliance], \"compliance not bound\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called from an address that is not a bound compliance contract.\n     */\n    modifier onlyComplianceCall() {\n        AbstractModuleStorage storage s = _getAbstractModuleStorage();\n        require(s.complianceBound[msg.sender], \"only bound compliance can call\");\n        _;\n    }\n\n    /**\n     *  @dev See {IModule-bindCompliance}.\n     */\n    function bindCompliance(address _compliance) external override {\n        AbstractModuleStorage storage s = _getAbstractModuleStorage();\n        require(_compliance != address(0), \"invalid argument - zero address\");\n        require(!s.complianceBound[_compliance], \"compliance already bound\");\n        require(msg.sender == _compliance, \"only compliance contract can call\");\n        s.complianceBound[_compliance] = true;\n        emit ComplianceBound(_compliance);\n    }\n\n    /**\n     *  @dev See {IModule-unbindCompliance}.\n     */\n    function unbindCompliance(address _compliance) external onlyComplianceCall override {\n        AbstractModuleStorage storage s = _getAbstractModuleStorage();\n        require(_compliance != address(0), \"invalid argument - zero address\");\n        require(msg.sender == _compliance, \"only compliance contract can call\");\n        s.complianceBound[_compliance] = false;\n        emit ComplianceUnbound(_compliance);\n    }\n\n    /**\n     *  @dev See {IModule-isComplianceBound}.\n     */\n    function isComplianceBound(address _compliance) external view override returns (bool) {\n        AbstractModuleStorage storage s = _getAbstractModuleStorage();\n        return s.complianceBound[_compliance];\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AbstractModule_init() internal onlyInitializing {\n        __Ownable_init();\n        __AbstractModule_init_unchained();\n    }\n\n    // solhint-disable-next-line no-empty-blocks, func-name-mixedcase\n    function __AbstractModule_init_unchained() internal onlyInitializing { }\n\n    // solhint-disable-next-line no-empty-blocks\n    function _authorizeUpgrade(address /*newImplementation*/) internal override virtual onlyOwner { }\n\n    function _getAbstractModuleStorage() private pure returns (AbstractModuleStorage storage s) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            s.slot := _ABSTRACT_MODULE_STORAGE_LOCATION\n        }\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/ConditionalTransferModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"../../../roles/AgentRole.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\n/**\n *  this module allows to require the pre-validation of a transfer before allowing it to be executed\n */\ncontract ConditionalTransferModule is AbstractModuleUpgradeable {\n    /// Mapping between transfer details and their approval status (amount of transfers approved) per compliance\n    mapping(address => mapping(bytes32 => uint)) private _transfersApproved;\n\n    /**\n     *  this event is emitted whenever a transfer is approved.\n     *  the event is emitted by 'approveTransfer' function.\n     *  `_from` is the address of transfer sender.\n     *  `_to` is the address of transfer recipient\n     *  `_amount` is the token amount to be sent (take care of decimals)\n     *  `_token` is the token address of the token concerned by the approval\n     */\n    event TransferApproved(address _from, address _to, uint _amount, address _token);\n\n    /**\n     *  this event is emitted whenever a transfer approval is removed.\n     *  the event is emitted by 'unApproveTransfer' function.\n     *  `_from` is the address of transfer sender.\n     *  `_to` is the address of transfer recipient\n     *  `_amount` is the token amount to be sent (take care of decimals)\n     *  `_token` is the token address of the token concerned by the approval\n     */\n    event ApprovalRemoved(address _from, address _to, uint _amount, address _token);\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n    *  @dev Approves transfers in batch\n    *  once a transfer is approved, the sender is allowed to execute it\n    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_from.length` IS TOO HIGH,\n    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n    *  @param _from the array of addresses of the transfer senders\n    *  @param _to the array of addresses of the transfer receivers\n    *  @param _amount the array of tokens amounts that `_from` would send to `_to`\n    *  Only a bound compliance can call this function\n    *  emits `_from.length` `TransferApproved` events\n    */\n    function batchApproveTransfers(address[] calldata _from, address[] calldata _to, uint[] calldata _amount)\n    external onlyComplianceCall {\n        for (uint256 i = 0; i < _from.length; i++){\n            approveTransfer(_from[i], _to[i], _amount[i]);\n        }\n    }\n\n    /**\n    *  @dev removes approval on a transfer previously approved\n    *  requires the transfer to be previously approved\n    *  once a transfer approval is removed, the sender is not allowed to execute it anymore\n    *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_from.length` IS TOO HIGH,\n    *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n    *  @param _from the array of addresses of the transfer senders\n    *  @param _to the array of addresses of the transfer receivers\n    *  @param _amount the array of token amounts that `_from` were allowed to send to `_to`\n    *  Only a bound compliance can call this function\n    *  emits `_from.length` `ApprovalRemoved` events\n    */\n    function batchUnApproveTransfers(address[] calldata _from, address[] calldata _to, uint[] calldata _amount)\n    external onlyComplianceCall {\n        for (uint256 i = 0; i < _from.length; i++){\n            unApproveTransfer(_from[i], _to[i], _amount[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     *  transfer approval is removed post-transfer if it was pre-approved\n     *  the check on whether the transfer was pre-approved or not here is to allow forced transfers to bypass the module\n     */\n    function moduleTransferAction(\n        address _from,\n        address _to,\n        uint256 _value)\n    external override onlyComplianceCall {\n        bytes32 transferHash = calculateTransferHash(_from, _to, _value, IModularCompliance(msg.sender).getTokenBound());\n        if(_transfersApproved[msg.sender][transferHash] > 0) {\n            _transfersApproved[msg.sender][transferHash]--;\n            emit ApprovalRemoved(_from, _to, _value, IModularCompliance(msg.sender).getTokenBound());\n        }\n    }\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     *  no mint action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     *  no burn action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address _from, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     *  checks if the transfer is approved or not\n     */\n    function moduleCheck(\n        address _from,\n        address _to,\n        uint256 _value,\n        address _compliance\n    ) external view override returns (bool) {\n        bytes32 transferHash = calculateTransferHash(_from, _to, _value, IModularCompliance(_compliance).getTokenBound());\n        return isTransferApproved(_compliance, transferHash);\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure override returns (bool) {\n        return true;\n    }\n\n    /**\n    *  @dev Approves a transfer\n    *  once a transfer is approved, the sender is allowed to execute it\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` would send to `_to`\n    *  Only a bound compliance can call this function\n    *  emits a `TransferApproved` event\n    */\n    function approveTransfer(address _from, address _to, uint _amount) public onlyComplianceCall {\n        bytes32 transferHash = calculateTransferHash(_from, _to, _amount, IModularCompliance(msg.sender).getTokenBound());\n        _transfersApproved[msg.sender][transferHash]++;\n        emit TransferApproved(_from, _to, _amount, IModularCompliance(msg.sender).getTokenBound());\n    }\n\n    /**\n    *  @dev removes approval on a transfer previously approved\n    *  requires the transfer to be previously approved\n    *  once a transfer approval is removed, the sender is not allowed to execute it anymore\n    *  @param _from the address of the transfer sender\n    *  @param _to the address of the transfer receiver\n    *  @param _amount the amount of tokens that `_from` was allowed to send to `_to`\n    *  Only a bound compliance can call this function\n    *  emits an `ApprovalRemoved` event\n    */\n    function unApproveTransfer(address _from, address _to, uint _amount) public onlyComplianceCall {\n        bytes32 transferHash = calculateTransferHash(_from, _to, _amount, IModularCompliance(msg.sender).getTokenBound());\n        require(_transfersApproved[msg.sender][transferHash] > 0, \"not approved\");\n        _transfersApproved[msg.sender][transferHash]--;\n        emit ApprovalRemoved(_from, _to, _amount, IModularCompliance(msg.sender).getTokenBound());\n\n    }\n\n    /**\n     *  @dev Returns true if transfer is approved\n     *  @param _compliance the modular compliance address\n     *  @param _transferHash, bytes corresponding to the transfer details, hashed\n     *  requires `_compliance` to be bound to this module\n     */\n    function isTransferApproved(address _compliance, bytes32 _transferHash) public view returns (bool) {\n        if (((_transfersApproved[_compliance])[_transferHash]) > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     *  @dev Returns the amount of identical transfers approved\n     *  @param _compliance the modular compliance address\n     *  @param _transferHash, bytes corresponding to the transfer details, hashed\n     *  requires `_compliance` to be bound to this module\n     */\n    function getTransferApprovals(address _compliance, bytes32 _transferHash) public view returns (uint) {\n        return (_transfersApproved[_compliance])[_transferHash];\n    }\n\n    /**\n     *  @dev Calculates the hash of a transfer approval\n     *  @param _from the address of the transfer sender\n     *  @param _to the address of the transfer receiver\n     *  @param _amount the amount of tokens that `_from` would send to `_to`\n     *  @param _token the address of the token that would be transferred\n     *  returns the transferId of the transfer\n     */\n    function calculateTransferHash (\n        address _from,\n        address _to,\n        uint _amount,\n        address _token\n    ) public pure returns (bytes32){\n        bytes32 transferHash = keccak256(abi.encode(_from, _to, _amount, _token));\n        return transferHash;\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"ConditionalTransferModule\";\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/CountryAllowModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract CountryAllowModule is AbstractModuleUpgradeable {\n    /// Mapping between country and their allowance status per compliance contract\n    mapping(address => mapping(uint16 => bool)) private _allowedCountries;\n\n    /// events\n\n    /**\n     *  this event is emitted whenever a Country has been allowed.\n     *  the event is emitted by 'addAllowedCountry' and 'batchAllowCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the restricted country.\n     */\n    event CountryAllowed(address _compliance, uint16 _country);\n    /**\n     *  this event is emitted whenever a Country has been disallowed.\n     *  the event is emitted by 'removeAllowedCountry' and 'batchDisallowCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the disallowed country.\n     */\n    event CountryUnallowed(address _compliance, uint16 _country);\n\n    /// Custom Errors\n\n    error CountryAlreadyAllowed(address _compliance, uint16 _country);\n    error CountryNotAllowed(address _compliance, uint16 _country);\n\n    /// functions\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n     *  @dev Adds country allowance in batch.\n     *  Identities from those countries will be allowed to manipulate Tokens linked to this Compliance.\n     *  @param _countries Countries to be restricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Can be called only for a compliance contract that is bound to the CountryAllowModule\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `AddedAllowedCountry` event\n     */\n    function batchAllowCountries(uint16[] calldata _countries) external onlyComplianceCall {\n        for (uint256 i = 0; i < _countries.length; i++) {\n            (_allowedCountries[msg.sender])[_countries[i]] = true;\n            emit CountryAllowed(msg.sender, _countries[i]);\n        }\n    }\n\n    /**\n     *  @dev Removes country allowance in batch.\n     *  Identities from those countries will lose the authorization to manipulate Tokens linked to this Compliance.\n     *  @param _countries Countries to be disallowed, should be expressed by following numeric ISO 3166-1 standard\n     *  Can be called only for a compliance contract that is bound to the CountryAllowModule\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `RemoveAllowedCountry` event\n     */\n    function batchDisallowCountries(uint16[] calldata _countries) external onlyComplianceCall {\n        for (uint256 i = 0; i < _countries.length; i++) {\n            (_allowedCountries[msg.sender])[_countries[i]] = false;\n            emit CountryUnallowed(msg.sender, _countries[i]);\n        }\n    }\n\n    /**\n     *  @dev Adds country allowance.\n     *  Identities from this country will be able to manipulate Tokens linked to this Compliance.\n     *  @param _country Country to be allowed, should be expressed by following numeric ISO 3166-1 standard\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `AddedAllowedCountry` event\n     */\n    function addAllowedCountry(uint16 _country) external onlyComplianceCall {\n        if ((_allowedCountries[msg.sender])[_country] == true) revert CountryAlreadyAllowed(msg.sender, _country);\n        (_allowedCountries[msg.sender])[_country] = true;\n        emit CountryAllowed(msg.sender, _country);\n    }\n\n    /**\n     *  @dev Removes country allowance.\n     *  Identities from those countries will lose the authorization to manipulate Tokens linked to this Compliance.\n     *  @param _country Country to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Can be called only for a compliance contract that is bound to the CountryAllowModule\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `RemoveAllowedCountry` event\n     */\n    function removeAllowedCountry(uint16 _country) external onlyComplianceCall {\n        if ((_allowedCountries[msg.sender])[_country] == false) revert CountryNotAllowed(msg.sender, _country);\n        (_allowedCountries[msg.sender])[_country] = false;\n        emit CountryUnallowed(msg.sender, _country);\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     *  no transfer action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleTransferAction(address _from, address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     *  no mint action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     *  no burn action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address _from, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     *  checks if the country of address _to is allowed for this _compliance\n     *  returns TRUE if the country of _to is allowed for this _compliance\n     *  returns FALSE if the country of _to is not allowed for this _compliance\n     */\n    function moduleCheck(\n        address /*_from*/,\n        address _to,\n        uint256 /*_value*/,\n        address _compliance\n    ) external view override returns (bool) {\n        uint16 receiverCountry = _getCountry(_compliance, _to);\n        return isCountryAllowed(_compliance, receiverCountry);\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev Returns true if country is Allowed\n     *  @param _country, numeric ISO 3166-1 standard of the country to be checked\n     */\n    function isCountryAllowed(address _compliance, uint16 _country) public view returns (bool) {\n        return _allowedCountries[_compliance][_country];\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"CountryAllowModule\";\n    }\n\n    /**\n     *  @dev function used to get the country of a wallet address.\n     *  @param _compliance the compliance contract address for which the country verification is required\n     *  @param _userAddress the address of the wallet to be checked\n     *  Returns the ISO 3166-1 standard country code of the wallet owner\n     *  internal function, used only by the contract itself to process checks on investor countries\n     */\n    function _getCountry(address _compliance, address _userAddress) internal view returns (uint16) {\n        return IToken(IModularCompliance(_compliance).getTokenBound()).identityRegistry().investorCountry(_userAddress);\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/CountryRestrictModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract CountryRestrictModule is AbstractModuleUpgradeable {\n    /// Mapping between country and their restriction status per compliance contract\n    mapping(address => mapping(uint16 => bool)) private _restrictedCountries;\n\n    /**\n     *  this event is emitted whenever a Country has been restricted.\n     *  the event is emitted by 'addCountryRestriction' and 'batchRestrictCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the restricted country.\n     */\n    event AddedRestrictedCountry(address indexed _compliance, uint16 _country);\n\n    /**\n     *  this event is emitted whenever a Country has been unrestricted.\n     *  the event is emitted by 'removeCountryRestriction' and 'batchUnrestrictCountries' functions.\n     *  `_country` is the numeric ISO 3166-1 of the unrestricted country.\n     */\n    event RemovedRestrictedCountry(address indexed _compliance, uint16 _country);\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n     *  @dev Adds country restriction.\n     *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\n     *  @param _country Country to be restricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `AddedRestrictedCountry` event\n     */\n    function addCountryRestriction(uint16 _country) external onlyComplianceCall {\n        require((_restrictedCountries[msg.sender])[_country] == false, \"country already restricted\");\n        (_restrictedCountries[msg.sender])[_country] = true;\n        emit AddedRestrictedCountry(msg.sender, _country);\n    }\n\n    /**\n     *  @dev Removes country restriction.\n     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\n     *  @param _country Country to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Can be called only for a compliance contract that is bound to the CountryRestrict Module\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `RemovedRestrictedCountry` event\n     */\n    function removeCountryRestriction(uint16 _country) external onlyComplianceCall {\n        require((_restrictedCountries[msg.sender])[_country] == true, \"country not restricted\");\n        (_restrictedCountries[msg.sender])[_country] = false;\n        emit RemovedRestrictedCountry(msg.sender, _country);\n    }\n\n    /**\n     *  @dev Adds countries restriction in batch.\n     *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\n     *  @param _countries Countries to be restricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Can be called only for a compliance contract that is bound to the CountryRestrict Module\n     *  Only the owner of the Compliance smart contract can call this function\n     *  cannot restrict more than 195 countries in 1 batch\n     *  emits _countries.length `AddedRestrictedCountry` events\n     */\n    function batchRestrictCountries(uint16[] calldata _countries) external onlyComplianceCall {\n        require(_countries.length < 195, \"maximum 195 can be restricted in one batch\");\n        for (uint256 i = 0; i < _countries.length; i++) {\n            require((_restrictedCountries[msg.sender])[_countries[i]] == false, \"country already restricted\");\n            (_restrictedCountries[msg.sender])[_countries[i]] = true;\n            emit AddedRestrictedCountry(msg.sender, _countries[i]);\n        }\n    }\n\n    /**\n     *  @dev Removes country restrictions in batch.\n     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\n     *  @param _countries Countries to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\n     *  Can be called only for a compliance contract that is bound to the CountryRestrict Module\n     *  cannot unrestrict more than 195 countries in 1 batch\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits _countries.length `RemovedRestrictedCountry` events\n     */\n    function batchUnrestrictCountries(uint16[] calldata _countries) external onlyComplianceCall {\n        require(_countries.length < 195, \"maximum 195 can be unrestricted in one batch\");\n        for (uint256 i = 0; i < _countries.length; i++) {\n            require((_restrictedCountries[msg.sender])[_countries[i]] == true, \"country not restricted\");\n            (_restrictedCountries[msg.sender])[_countries[i]] = false;\n            emit RemovedRestrictedCountry(msg.sender, _countries[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     *  no transfer action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleTransferAction(address _from, address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     *  no mint action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     *  no burn action required in this module\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address _from, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     *  checks if the country of address _to is not restricted for this _compliance\n     *  returns TRUE if the country of _to is not restricted for this _compliance\n     *  returns FALSE if the country of _to is restricted for this _compliance\n     */\n    function moduleCheck(\n        address /*_from*/,\n        address _to,\n        uint256 /*_value*/,\n        address _compliance\n    ) external view override returns (bool) {\n        uint16 receiverCountry = _getCountry(_compliance, _to);\n        if (isCountryRestricted(_compliance, receiverCountry)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev Returns true if country is Restricted\n     *  @param _country, numeric ISO 3166-1 standard of the country to be checked\n     */\n    function isCountryRestricted(address _compliance, uint16 _country) public view\n    returns (bool) {\n        return ((_restrictedCountries[_compliance])[_country]);\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"CountryRestrictModule\";\n    }\n\n    /**\n     *  @dev function used to get the country of a wallet address.\n     *  @param _compliance the compliance contract address for which the country verification is required\n     *  @param _userAddress the address of the wallet to be checked\n     *  Returns the ISO 3166-1 standard country code of the wallet owner\n     *  internal function, used only by the contract itself to process checks on investor countries\n     */\n    function _getCountry(address _compliance, address _userAddress) internal view returns (uint16) {\n        return IToken(IModularCompliance(_compliance).getTokenBound()).identityRegistry().investorCountry(_userAddress);\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/ExchangeMonthlyLimitsModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"../../../roles/AgentRole.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract ExchangeMonthlyLimitsModule is AbstractModuleUpgradeable {\n    /// Struct of transfer Counters\n    struct ExchangeTransferCounter {\n        uint256 monthlyCount;\n        uint256 monthlyTimer;\n    }\n\n    /// Getter for Tokens monthlyLimit\n    mapping(address => mapping(address => uint256)) private _exchangeMonthlyLimit;\n\n    /// Mapping for users Counters\n    mapping(address => mapping(address => mapping(address => ExchangeTransferCounter))) private _exchangeCounters;\n\n    /// Mapping for wallets tagged as exchange wallets\n    mapping(address => bool) private _exchangeIDs;\n\n    /**\n     *  this event is emitted whenever the Exchange Limit has been updated.\n     *  the event is emitted by 'setExchangeMonthlyLimit'\n     *  `compliance` is the address of the caller Compliance contract.\n     *  `_exchangeID` is the amount ONCHAINID address of the exchange.\n     *  `_newExchangeMonthlyLimit` is the amount Limit of tokens to be transferred monthly to an exchange wallet.\n     */\n    event ExchangeMonthlyLimitUpdated(address indexed compliance, address _exchangeID, uint _newExchangeMonthlyLimit);\n\n    /**\n    *  this event is emitted whenever an ONCHAINID is tagged as being an exchange ID.\n    *  the event is emitted by 'addExchangeID'.\n    *  `_newExchangeID` is the ONCHAINID address of the exchange to add.\n    */\n    event ExchangeIDAdded(address _newExchangeID);\n\n    /**\n     *  this event is emitted whenever an ONCHAINID is untagged as belonging to an exchange.\n     *  the event is emitted by 'removeExchangeID'.\n     *  `_exchangeID` is the ONCHAINID being untagged as an exchange ID.\n     */\n    event ExchangeIDRemoved(address _exchangeID);\n\n    error ONCHAINIDAlreadyTaggedAsExchange(address _exchangeID);\n\n    error ONCHAINIDNotTaggedAsExchange(address _exchangeID);\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n     *  @dev Set the limit of tokens allowed to be transferred monthly.\n     *  @param _exchangeID ONCHAINID of the exchange\n     *  @param _newExchangeMonthlyLimit The new monthly limit of the exchange\n     *  Only the Compliance smart contract can call this function\n     */\n    function setExchangeMonthlyLimit(address _exchangeID, uint256 _newExchangeMonthlyLimit) external onlyComplianceCall {\n        _exchangeMonthlyLimit[msg.sender][_exchangeID] = _newExchangeMonthlyLimit;\n        emit ExchangeMonthlyLimitUpdated(msg.sender, _exchangeID, _newExchangeMonthlyLimit);\n    }\n\n    /**\n    *  @dev tags the ONCHAINID as being an exchange ID\n    *  @param _exchangeID ONCHAINID to be tagged\n    *  Function can be called only by the owner of this module\n    *  Cannot be called on an address already tagged as being an exchange\n    *  emits an `ExchangeIDAdded` event\n    */\n    function addExchangeID(address _exchangeID) external onlyOwner {\n        if (isExchangeID(_exchangeID)) {\n            revert ONCHAINIDAlreadyTaggedAsExchange(_exchangeID);\n        }\n\n        _exchangeIDs[_exchangeID] = true;\n        emit ExchangeIDAdded(_exchangeID);\n    }\n\n    /**\n    *  @dev untags the ONCHAINID as being an exchange ID\n    *  @param _exchangeID ONCHAINID to be untagged\n    *  Function can be called only by the owner of this module\n    *  Cannot be called on an address not tagged as being an exchange\n    *  emits an `ExchangeIDRemoved` event\n    */\n    function removeExchangeID(address _exchangeID) external onlyOwner {\n        if (!isExchangeID(_exchangeID)) {\n            revert ONCHAINIDNotTaggedAsExchange(_exchangeID);\n        }\n        _exchangeIDs[_exchangeID] = false;\n        emit ExchangeIDRemoved(_exchangeID);\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     */\n    function moduleTransferAction(address _from, address _to, uint256 _value) external override onlyComplianceCall {\n        address senderIdentity = _getIdentity(msg.sender, _from);\n        address receiverIdentity = _getIdentity(msg.sender, _to);\n\n        if (isExchangeID(receiverIdentity) && !_isTokenAgent(msg.sender, _from)) {\n            _increaseExchangeCounters(msg.sender, receiverIdentity, senderIdentity, _value);\n        }\n    }\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address /*_to*/, uint256 /*_value*/) external override onlyComplianceCall { }\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address /*_from*/, uint256 /*_value*/) external override onlyComplianceCall { }\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     */\n    function moduleCheck(\n        address _from,\n        address _to,\n        uint256 _value,\n        address _compliance\n    ) external view override returns (bool) {\n        if (_from == address(0) || _isTokenAgent(_compliance, _from)) {\n            return true;\n        }\n\n        address senderIdentity = _getIdentity(_compliance, _from);\n        if (isExchangeID(senderIdentity)) {\n            return true;\n        }\n\n        address receiverIdentity = _getIdentity(_compliance, _to);\n        if (!isExchangeID(receiverIdentity)) {\n            return true;\n        }\n\n        if (_value > _exchangeMonthlyLimit[_compliance][receiverIdentity]) {\n            return false;\n        }\n\n        if (_isExchangeMonthFinished(_compliance, receiverIdentity, senderIdentity)) {\n            return true;\n        }\n\n        if (getMonthlyCounter(_compliance, receiverIdentity, senderIdentity) + _value\n            > _exchangeMonthlyLimit[_compliance][receiverIdentity]) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure override returns (bool) {\n        return true;\n    }\n\n    /**\n    *  @dev getter for `_exchangeIDs` variable\n    *  tells to the caller if an ONCHAINID belongs to an exchange or not\n    *  @param _exchangeID ONCHAINID to be checked\n    *  returns TRUE if the address corresponds to an exchange, FALSE otherwise\n    */\n    function isExchangeID(address _exchangeID) public view returns (bool){\n        return _exchangeIDs[_exchangeID];\n    }\n\n    /**\n    *  @dev getter for `exchangeCounters` variable on the counter parameter of the ExchangeTransferCounter struct\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _exchangeID exchange ONCHAINID\n    *  @param _investorID ONCHAINID to be checked\n    *  returns current monthly counter of `_investorID` on `exchangeID` exchange\n    */\n    function getMonthlyCounter(address compliance, address _exchangeID, address _investorID) public view returns (uint256) {\n        return (_exchangeCounters[compliance][_exchangeID][_investorID]).monthlyCount;\n    }\n\n    /**\n    *  @dev getter for `exchangeCounters` variable on the timer parameter of the ExchangeTransferCounter struct\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _exchangeID exchange ONCHAINID\n    *  @param _investorID ONCHAINID to be checked\n    *  returns current timer of `_investorID` on `exchangeID` exchange\n    */\n    function getMonthlyTimer(address compliance, address _exchangeID, address _investorID) public view returns (uint256) {\n        return (_exchangeCounters[compliance][_exchangeID][_investorID]).monthlyTimer;\n    }\n\n    /**\n    *  @dev getter for `exchangeMonthlyLimit` variable\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _exchangeID exchange ONCHAINID\n    *  returns the monthly limit set for that exchange\n    */\n    function getExchangeMonthlyLimit(address compliance, address _exchangeID) public view returns (uint256) {\n        return _exchangeMonthlyLimit[compliance][_exchangeID];\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"ExchangeMonthlyLimitsModule\";\n    }\n\n    /**\n    *  @dev Checks if monthly cooldown must be reset, then check if _value sent has been exceeded,\n    *  if not increases user's OnchainID counters.\n    *  @param compliance the Compliance smart contract address\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID address on which counters will be increased\n    *  @param _value, value of transaction)to be increased\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _increaseExchangeCounters(address compliance, address _exchangeID, address _investorID, uint256 _value) internal {\n        _resetExchangeMonthlyCooldown(compliance, _exchangeID, _investorID);\n        _exchangeCounters[compliance][_exchangeID][_investorID].monthlyCount += _value;\n    }\n\n    /**\n    *  @dev resets cooldown for the month if cooldown has reached the time limit of 30days\n    *  @param compliance the Compliance smart contract address\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID ONCHAINID to reset\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _resetExchangeMonthlyCooldown(address compliance, address _exchangeID, address _investorID) internal {\n        if (_isExchangeMonthFinished(compliance, _exchangeID, _investorID)) {\n            ExchangeTransferCounter storage counter = _exchangeCounters[compliance][_exchangeID][_investorID];\n            counter.monthlyTimer = block.timestamp + 30 days;\n            counter.monthlyCount = 0;\n        }\n    }\n\n    /**\n    *  @dev checks if the month has finished since the cooldown has been triggered for this identity\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID ONCHAINID to be checked\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isExchangeMonthFinished(address compliance, address _exchangeID, address _investorID) internal view returns (bool) {\n        return getMonthlyTimer(compliance, _exchangeID, _investorID) <= block.timestamp;\n    }\n\n    /**\n    *  @dev checks if the given user address is an agent of token\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _userAddress ONCHAIN identity of the user\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isTokenAgent(address compliance, address _userAddress) internal view returns (bool) {\n        return AgentRole(IModularCompliance(compliance).getTokenBound()).isAgent(_userAddress);\n    }\n\n    /**\n   *  @dev Returns the ONCHAINID (Identity) of the _userAddress\n    *  @param _userAddress Address of the wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _getIdentity(address _compliance, address _userAddress) internal view returns (address) {\n        return address(IToken(IModularCompliance(_compliance).getTokenBound()).identityRegistry().identity\n            (_userAddress));\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/IModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface IModule {\n    /// events\n\n    /**\n     *  this event is emitted when the compliance contract is bound to the module.\n     *  the event is emitted by the bindCompliance function\n     *  `_compliance` is the address of the compliance contract being bound\n     */\n    event ComplianceBound(address indexed _compliance);\n\n    /**\n     *  this event is emitted when the compliance contract is unbound from the module.\n     *  the event is emitted by the unbindCompliance function\n     *  `_compliance` is the address of the compliance contract being unbound\n     */\n    event ComplianceUnbound(address indexed _compliance);\n\n    /// functions\n\n    /**\n     *  @dev binds the module to a compliance contract\n     *  once the module is bound, the compliance contract can interact with the module\n     *  this function can be called ONLY by the compliance contract itself (_compliance), through the\n     *  addModule function, which calls bindCompliance\n     *  the module cannot be already bound to the compliance\n     *  @param _compliance address of the compliance contract\n     *  Emits a ComplianceBound event\n     */\n    function bindCompliance(address _compliance) external;\n\n    /**\n     *  @dev unbinds the module from a compliance contract\n     *  once the module is unbound, the compliance contract cannot interact with the module anymore\n     *  this function can be called ONLY by the compliance contract itself (_compliance), through the\n     *  removeModule function, which calls unbindCompliance\n     *  @param _compliance address of the compliance contract\n     *  Emits a ComplianceUnbound event\n     */\n    function unbindCompliance(address _compliance) external;\n\n    /**\n     *  @dev action performed on the module during a transfer action\n     *  this function is used to update variables of the module upon transfer if it is required\n     *  if the module does not require state updates in case of transfer, this function remains empty\n     *  This function can be called ONLY by the compliance contract itself (_compliance)\n     *  This function can be called only on a compliance contract that is bound to the module\n     *  @param _from address of the transfer sender\n     *  @param _to address of the transfer receiver\n     *  @param _value amount of tokens sent\n     */\n    function moduleTransferAction(address _from, address _to, uint256 _value) external;\n\n    /**\n     *  @dev action performed on the module during a mint action\n     *  this function is used to update variables of the module upon minting if it is required\n     *  if the module does not require state updates in case of mint, this function remains empty\n     *  This function can be called ONLY by the compliance contract itself (_compliance)\n     *  This function can be called only on a compliance contract that is bound to the module\n     *  @param _to address used for minting\n     *  @param _value amount of tokens minted\n     */\n    function moduleMintAction(address _to, uint256 _value) external;\n\n    /**\n     *  @dev action performed on the module during a burn action\n     *  this function is used to update variables of the module upon burning if it is required\n     *  if the module does not require state updates in case of burn, this function remains empty\n     *  This function can be called ONLY by the compliance contract itself (_compliance)\n     *  This function can be called only on a compliance contract that is bound to the module\n     *  @param _from address on which tokens are burnt\n     *  @param _value amount of tokens burnt\n     */\n    function moduleBurnAction(address _from, uint256 _value) external;\n\n    /**\n     *  @dev compliance check on the module for a specific transaction on a specific compliance contract\n     *  this function is used to check if the transfer is allowed by the module\n     *  This function can be called only on a compliance contract that is bound to the module\n     *  @param _from address of the transfer sender\n     *  @param _to address of the transfer receiver\n     *  @param _value amount of tokens sent\n     *  @param _compliance address of the compliance contract concerned by the transfer action\n     *  the function returns TRUE if the module allows the transfer, FALSE otherwise\n     */\n    function moduleCheck(address _from, address _to, uint256 _value, address _compliance) external view returns (bool);\n\n    /**\n     *  @dev getter for compliance binding status on module\n     *  @param _compliance address of the compliance contract\n     */\n    function isComplianceBound(address _compliance) external view returns (bool);\n\n    /**\n     *  @dev checks whether compliance is suitable to bind to the module.\n     *  @param _compliance address of the compliance contract\n     */\n    function canComplianceBind(address _compliance) external view returns (bool);\n\n    /**\n     *  @dev getter for module plug & play status\n     */\n    function isPlugAndPlay() external pure returns (bool);\n\n    /**\n     *  @dev getter for the name of the module\n     *  @return _name the name of the module\n     */\n    function name() external pure returns (string memory _name);\n}\n"
    },
    "contracts/compliance/modular/modules/MaxBalanceModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract MaxBalanceModule is AbstractModuleUpgradeable {\n\n    /// state variables\n\n    /// mapping of preset status of compliance addresses\n    mapping(address => bool) private _compliancePresetStatus;\n\n    /// maximum balance per investor ONCHAINID per modular compliance\n    mapping(address => uint256) private _maxBalance;\n\n    /// mapping of balances per ONCHAINID per modular compliance\n    // solhint-disable-next-line var-name-mixedcase\n    mapping(address => mapping(address => uint256)) private _IDBalance;\n\n    /// events\n\n    /**\n     *  this event is emitted when the max balance has been set for a compliance bound.\n     *  `_compliance` is the address of modular compliance concerned\n     *  `_maxBalance` is the max amount of tokens that a user can hold .\n     */\n    event MaxBalanceSet(address indexed _compliance, uint256 indexed _maxBalance);\n\n    event IDBalancePreSet(address indexed _compliance, address indexed _id, uint256 _balance);\n\n    event PresetCompleted(address indexed _compliance);\n\n    /// errors\n    error MaxBalanceExceeded(address _compliance, uint256 _value);\n\n    error InvalidPresetValues(address _compliance, address[] _id, uint256[] _balance);\n\n    error OnlyComplianceOwnerCanCall(address _compliance);\n\n    error TokenAlreadyBound(address _compliance);\n\n    /// functions\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n     *  @dev sets max balance limit for a bound compliance contract\n     *  @param _max max amount of tokens owned by an individual\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits an `MaxBalanceSet` event\n     */\n    function setMaxBalance(uint256 _max) external onlyComplianceCall {\n        _maxBalance[msg.sender] = _max;\n        emit MaxBalanceSet(msg.sender, _max);\n    }\n\n    /**\n     *  @dev pre-set the balance of a token holder per ONCHAINID\n     *  @param _compliance the address of the compliance contract to preset\n     *  @param _id the ONCHAINID address of the token holder\n     *  @param _balance the current balance of the token holder\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits a `IDBalancePreSet` event\n     */\n    function preSetModuleState(address _compliance, address _id, uint256 _balance) external {\n        if (OwnableUpgradeable(_compliance).owner() != msg.sender) {\n            revert OnlyComplianceOwnerCanCall(_compliance);\n        }\n\n        if (IModularCompliance(_compliance).isModuleBound(address(this))) {\n            revert TokenAlreadyBound(_compliance);\n        }\n\n        _preSetModuleState(_compliance, _id, _balance);\n    }\n\n    /**\n     *  @dev make a batch transaction calling preSetModuleState multiple times\n     *  @param _compliance the address of the compliance contract to preset\n     *  @param _id the ONCHAINID address of the token holder\n     *  @param _balance the current balance of the token holder\n     *  Only the owner of the Compliance smart contract can call this function\n     *  emits _id.length `IDBalancePreSet` events\n     */\n    function batchPreSetModuleState(\n        address _compliance,\n        address[] calldata _id,\n        uint256[] calldata _balance) external {\n        if(_id.length == 0 || _id.length != _balance.length) {\n            revert InvalidPresetValues(_compliance, _id, _balance);\n        }\n\n        if (OwnableUpgradeable(_compliance).owner() != msg.sender) {\n            revert OnlyComplianceOwnerCanCall(_compliance);\n        }\n\n        if (IModularCompliance(_compliance).isModuleBound(address(this))) {\n            revert TokenAlreadyBound(_compliance);\n        }\n\n        for (uint i = 0; i < _id.length; i++) {\n            _preSetModuleState(_compliance, _id[i], _balance[i]);\n        }\n\n        _compliancePresetStatus[_compliance] = true;\n    }\n\n    /**\n     *  @dev updates compliance preset status as true\n     *  @param _compliance the address of the compliance contract\n     *  Only the owner of the Compliance smart contract can call this function\n     */\n    function presetCompleted(address _compliance) external {\n        if (OwnableUpgradeable(_compliance).owner() != msg.sender) {\n            revert OnlyComplianceOwnerCanCall(_compliance);\n        }\n\n        _compliancePresetStatus[_compliance] = true;\n        emit PresetCompleted(_compliance);\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     *  no transfer action required in this module\n     */\n    function moduleTransferAction(address _from, address _to, uint256 _value) external override onlyComplianceCall {\n        address _idFrom = _getIdentity(msg.sender, _from);\n        address _idTo = _getIdentity(msg.sender, _to);\n        _IDBalance[msg.sender][_idTo] += _value;\n        _IDBalance[msg.sender][_idFrom] -= _value;\n        if (_IDBalance[msg.sender][_idTo] > _maxBalance[msg.sender]) revert MaxBalanceExceeded(msg.sender, _value);\n    }\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     *  no mint action required in this module\n     */\n    function moduleMintAction(address _to, uint256 _value) external override onlyComplianceCall {\n        address _idTo = _getIdentity(msg.sender, _to);\n        _IDBalance[msg.sender][_idTo] += _value;\n        if (_IDBalance[msg.sender][_idTo] > _maxBalance[msg.sender]) revert MaxBalanceExceeded(msg.sender, _value);\n    }\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     *  no burn action required in this module\n     */\n    function moduleBurnAction(address _from, uint256 _value) external override onlyComplianceCall {\n        address _idFrom = _getIdentity(msg.sender, _from);\n        _IDBalance[msg.sender][_idFrom] -= _value;\n    }\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     *  checks if the country of address _to is allowed for this _compliance\n     *  returns TRUE if the country of _to is allowed for this _compliance\n     *  returns FALSE if the country of _to is not allowed for this _compliance\n     */\n    function moduleCheck(\n        address /*_from*/,\n        address _to,\n        uint256 _value,\n        address _compliance\n    ) external view override returns (bool) {\n        if (_value > _maxBalance[_compliance]) {\n            return false;\n        }\n        address _id = _getIdentity(_compliance, _to);\n        if ((_IDBalance[_compliance][_id] + _value) > _maxBalance[_compliance]) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    *  @dev getter for compliance identity balance\n     *  @param _compliance address of the compliance contract\n     *  @param _identity ONCHAINID address\n     */\n    function getIDBalance(address _compliance, address _identity) external view returns (uint256) {\n        return _IDBalance[_compliance][_identity];\n    }\n\n    /**\n      *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address _compliance) external view returns (bool) {\n        if (_compliancePresetStatus[_compliance]) {\n            return true;\n        }\n\n        IToken token = IToken(IModularCompliance(_compliance).getTokenBound());\n        uint256 totalSupply = token.totalSupply();\n        if (totalSupply == 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n      *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure returns (bool) {\n        return false;\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"MaxBalanceModule\";\n    }\n\n    /**\n     *  @dev pre-set the balance of a token holder per ONCHAINID\n     *  @param _compliance the address of the compliance contract to preset\n     *  @param _id the ONCHAINID address of the token holder\n     *  @param _balance the current balance of the token holder\n     *  emits a `IDBalancePreSet` event\n     */\n    function _preSetModuleState(address _compliance, address _id, uint256 _balance) internal {\n        _IDBalance[_compliance][_id] = _balance;\n        emit IDBalancePreSet(_compliance, _id, _balance);\n    }\n\n    /**\n     *  @dev function used to get the country of a wallet address.\n     *  @param _compliance the compliance contract address for which the country verification is required\n     *  @param _userAddress the address of the wallet to be checked\n     *  Returns the ONCHAINID address of the wallet owner\n     *  internal function, used only by the contract itself to process checks on investor countries\n     */\n    function _getIdentity(address _compliance, address _userAddress) internal view returns (address) {\n        address identity = address(IToken(IModularCompliance(_compliance).getTokenBound())\n            .identityRegistry().identity(_userAddress));\n        require(identity != address(0), \"identity not found\");\n        return identity;\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/ModuleProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract ModuleProxy is ERC1967Proxy {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address implementation, bytes memory _data) ERC1967Proxy(implementation, _data) { }\n}"
    },
    "contracts/compliance/modular/modules/SupplyLimitModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n//\r\n//                                             :+#####%%%%%%%%%%%%%%+\r\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\r\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\r\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\r\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\r\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\r\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\r\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\r\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\r\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\r\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\r\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\r\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\r\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\r\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\r\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\r\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\r\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\r\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\r\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\r\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\r\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\r\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\r\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\r\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\r\n//                                          +@@@@@. =@@@=  .+@@@@@*:\r\n//                                          #@@@@#:%@@#. :*@@@@#-\r\n//                                          @@@@@%@@@= :#@@@@+.\r\n//                                         :@@@@@@@#.:#@@@%-\r\n//                                         +@@@@@@-.*@@@*:\r\n//                                         #@@@@#.=@@@+.\r\n//                                         @@@@+-%@%=\r\n//                                        :@@@#%@%=\r\n//                                        +@@@@%-\r\n//                                        :#%%=\r\n//\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny sàrl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../IModularCompliance.sol\";\r\nimport \"../../../token/IToken.sol\";\r\nimport \"./AbstractModuleUpgradeable.sol\";\r\n\r\ncontract SupplyLimitModule is AbstractModuleUpgradeable {\r\n    /// supply limits array\r\n    mapping(address => uint256) private _supplyLimits;\r\n\r\n    /**\r\n     *  this event is emitted when the supply limit has been set.\r\n     *  `_compliance` is the compliance address.\r\n     *  `_limit` is the max amount of tokens in circulation.\r\n     */\r\n    event SupplyLimitSet(address _compliance, uint256 _limit);\r\n\r\n    /**\r\n     * @dev initializes the contract and sets the initial state.\r\n     * @notice This function should only be called once during the contract deployment.\r\n     */\r\n    function initialize() external initializer {\r\n        __AbstractModule_init();\r\n    }\r\n\r\n    /**\r\n     *  @dev sets supply limit.\r\n     *  Supply limit has to be smaller or equal to the actual supply.\r\n     *  @param _limit max amount of tokens to be created\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `SupplyLimitSet` event\r\n     */\r\n    function setSupplyLimit(uint256 _limit) external onlyComplianceCall {\r\n        _supplyLimits[msg.sender] = _limit;\r\n        emit SupplyLimitSet(msg.sender, _limit);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleTransferAction}.\r\n     *  no transfer action required in this module\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function moduleTransferAction(address _from, address _to, uint256 _value) external onlyComplianceCall {}\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleMintAction}.\r\n     *  no mint action required in this module\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function moduleMintAction(address _to, uint256 _value) external onlyComplianceCall {}\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleBurnAction}.\r\n     *  no burn action required in this module\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function moduleBurnAction(address _from, uint256 _value) external onlyComplianceCall {}\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleCheck}.\r\n     */\r\n    function moduleCheck(\r\n        address _from,\r\n        address /*_to*/,\r\n        uint256 _value,\r\n        address _compliance\r\n    ) external view override returns (bool) {\r\n        if (_from == address(0) &&\r\n            (IToken(IModularCompliance(_compliance).getTokenBound()).totalSupply() + _value) > _supplyLimits[_compliance]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *  @dev getter for `supplyLimits` variable\r\n    *  returns supply limit\r\n    */\r\n    function getSupplyLimit(address _compliance) external view returns (uint256) {\r\n        return _supplyLimits[_compliance];\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-canComplianceBind}.\r\n     */\r\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-isPlugAndPlay}.\r\n     */\r\n    function isPlugAndPlay() external pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-name}.\r\n     */\r\n    function name() public pure returns (string memory _name) {\r\n        return \"SupplyLimitModule\";\r\n    }\r\n}"
    },
    "contracts/compliance/modular/modules/TimeExchangeLimitsModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"../../../roles/AgentRole.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract TimeExchangeLimitsModule is AbstractModuleUpgradeable {\n    /// Struct of transfer Counters\n    struct ExchangeTransferCounter {\n        uint256 value;\n        uint256 timer;\n    }\n\n    struct Limit {\n        uint32 limitTime;\n        uint256 limitValue;\n    }\n\n    struct IndexLimit {\n        bool attributedLimit;\n        uint8 limitIndex;\n    }\n\n    // Mapping for limit time indexes\n    mapping(address => mapping (address => mapping(uint32 => IndexLimit))) private _limitValues;\n\n    /// Getter for Tokens Exchange Limits\n    mapping(address => mapping(address => Limit[])) private _exchangeLimits;\n\n    /// Mapping for users Counters\n    mapping(address => mapping(address =>\n        mapping(address => mapping(uint32 => ExchangeTransferCounter)))) private _exchangeCounters;\n\n    /// Mapping for wallets tagged as exchange wallets\n    mapping(address => bool) private _exchangeIDs;\n\n    /**\n    *  this event is emitted whenever an exchange limit is updated for the given compliance address\n    *  the event is emitted by 'setExchangeLimit'.\n    *  compliance`is the compliance contract address\n    *  _exchangeID is the ONCHAINID of the exchange\n    *  _limitValue is the new limit value for the given limit time\n    *  _limitTime is the period of time of the limit\n    */\n    event ExchangeLimitUpdated(address indexed compliance, address _exchangeID, uint _limitValue, uint32 _limitTime);\n\n    /**\n    *  this event is emitted whenever an ONCHAINID is tagged as an exchange ID.\n    *  the event is emitted by 'addExchangeID'.\n    *  `_newExchangeID` is the ONCHAINID address of the exchange to add.\n    */\n    event ExchangeIDAdded(address _newExchangeID);\n\n    /**\n     *  this event is emitted whenever an ONCHAINID is untagged as belonging to an exchange.\n     *  the event is emitted by 'removeExchangeID'.\n     *  `_exchangeID` is the ONCHAINID being untagged as an exchange ID.\n     */\n    event ExchangeIDRemoved(address _exchangeID);\n\n    error ONCHAINIDAlreadyTaggedAsExchange(address _exchangeID);\n\n    error ONCHAINIDNotTaggedAsExchange(address _exchangeID);\n\n    error LimitsArraySizeExceeded(address compliance, uint arraySize);\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n     *  @dev Sets the limit of tokens allowed to be transferred to the given exchangeID in a given period of time\n     *  @param _exchangeID ONCHAINID of the exchange\n     *  @param _limit The limit time and value\n     *  Only the Compliance smart contract can call this function\n     *  emits an `ExchangeLimitUpdated` event\n     */\n    function setExchangeLimit(address _exchangeID, Limit memory _limit) external onlyComplianceCall {\n        bool limitIsAttributed = _limitValues[msg.sender][_exchangeID][_limit.limitTime].attributedLimit;\n        uint8 limitCount = uint8(_exchangeLimits[msg.sender][_exchangeID].length);\n        if (!limitIsAttributed && limitCount >= 4) {\n            revert LimitsArraySizeExceeded(msg.sender, limitCount);\n        }\n\n        if (!limitIsAttributed && limitCount < 4) {\n            _exchangeLimits[msg.sender][_exchangeID].push(_limit);\n            _limitValues[msg.sender][_exchangeID][_limit.limitTime] = IndexLimit(true, limitCount);\n        } else {\n            _exchangeLimits[msg.sender][_exchangeID][_limitValues[msg.sender][_exchangeID][_limit.limitTime].limitIndex] = _limit;\n        }\n\n        emit ExchangeLimitUpdated(msg.sender, _exchangeID, _limit.limitValue, _limit.limitTime);\n    }\n\n    /**\n    *  @dev tags the ONCHAINID as being an exchange ID\n    *  @param _exchangeID ONCHAINID to be tagged\n    *  Function can be called only by the owner of this module\n    *  Cannot be called on an address already tagged as being an exchange\n    *  emits an `ExchangeIDAdded` event\n    */\n    function addExchangeID(address _exchangeID) external onlyOwner {\n        if (isExchangeID(_exchangeID)) {\n            revert ONCHAINIDAlreadyTaggedAsExchange(_exchangeID);\n        }\n\n        _exchangeIDs[_exchangeID] = true;\n        emit ExchangeIDAdded(_exchangeID);\n    }\n\n    /**\n    *  @dev untags the ONCHAINID as being an exchange ID\n    *  @param _exchangeID ONCHAINID to be untagged\n    *  Function can be called only by the owner of this module\n    *  Cannot be called on an address not tagged as being an exchange\n    *  emits an `ExchangeIDRemoved` event\n    */\n    function removeExchangeID(address _exchangeID) external onlyOwner {\n        if (!isExchangeID(_exchangeID)) {\n            revert ONCHAINIDNotTaggedAsExchange(_exchangeID);\n        }\n        _exchangeIDs[_exchangeID] = false;\n        emit ExchangeIDRemoved(_exchangeID);\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     */\n    function moduleTransferAction(address _from, address _to, uint256 _value) external override onlyComplianceCall {\n        address senderIdentity = _getIdentity(msg.sender, _from);\n        address receiverIdentity = _getIdentity(msg.sender, _to);\n\n        if (isExchangeID(receiverIdentity) && !_isTokenAgent(msg.sender, _from)) {\n            _increaseExchangeCounters(msg.sender, receiverIdentity, senderIdentity, _value);\n        }\n    }\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address /*_to*/, uint256 /*_value*/) external override onlyComplianceCall { }\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address /*_from*/, uint256 /*_value*/) external override onlyComplianceCall { }\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     */\n    function moduleCheck(\n        address _from,\n        address _to,\n        uint256 _value,\n        address _compliance\n    ) external view override returns (bool) {\n        if (_from == address(0) || _isTokenAgent(_compliance, _from)) {\n            return true;\n        }\n\n        address senderIdentity = _getIdentity(_compliance, _from);\n        if (isExchangeID(senderIdentity)) {\n            return true;\n        }\n\n        address receiverIdentity = _getIdentity(_compliance, _to);\n        if (!isExchangeID(receiverIdentity)) {\n            return true;\n        }\n\n        for (uint256 i = 0; i < _exchangeLimits[_compliance][receiverIdentity].length; i++) {\n            if (_value > _exchangeLimits[_compliance][receiverIdentity][i].limitValue) {\n                return false;\n            }\n\n            uint32 limitTime = _exchangeLimits[_compliance][receiverIdentity][i].limitTime;\n            if (!_isExchangeCounterFinished(_compliance, receiverIdentity, senderIdentity, limitTime)\n                && _exchangeCounters[_compliance][receiverIdentity][senderIdentity][limitTime].value + _value\n                > _exchangeLimits[_compliance][receiverIdentity][i].limitValue) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n    *  @dev getter for `exchangeCounters` variable on the timer parameter of the ExchangeTransferCounter struct\n    *  @param compliance the compliance smart contract address to be checked\n    *  @param _exchangeID the ONCHAINID of the exchange\n    *  @param _investorID the ONCHAINID of the investor to be checked\n    *  @param _limitTime limit time frame\n    *  returns the counter of the given `_limitTime`, `_investorID`, and `exchangeID`\n    */\n    function getExchangeCounter(address compliance, address _exchangeID, address _investorID, uint32 _limitTime)\n        external view returns (ExchangeTransferCounter memory) {\n        return _exchangeCounters[compliance][_exchangeID][_investorID][_limitTime];\n    }\n\n    /**\n    *  @dev getter for `exchangeLimit` variable\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _exchangeID exchange ONCHAINID\n    *  returns the array of limits set for that exchange\n    */\n    function getExchangeLimits(address compliance, address _exchangeID) external view returns (Limit[] memory) {\n        return _exchangeLimits[compliance][_exchangeID];\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure override returns (bool) {\n        return true;\n    }\n\n    /**\n    *  @dev getter for `_exchangeIDs` variable\n    *  tells to the caller if an ONCHAINID belongs to an exchange or not\n    *  @param _exchangeID ONCHAINID to be checked\n    *  returns TRUE if the address corresponds to an exchange, FALSE otherwise\n    */\n    function isExchangeID(address _exchangeID) public view returns (bool){\n        return _exchangeIDs[_exchangeID];\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"TimeExchangeLimitsModule\";\n    }\n\n    /**\n    *  @dev Checks if cooldown must be reset, then check if _value sent has been exceeded,\n    *  if not increases user's OnchainID counters.\n    *  @param compliance the Compliance smart contract address\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID address on which counters will be increased\n    *  @param _value, value of transaction)to be increased\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _increaseExchangeCounters(address compliance, address _exchangeID, address _investorID, uint256 _value) internal {\n        for (uint256 i = 0; i < _exchangeLimits[compliance][_exchangeID].length; i++) {\n            uint32 limitTime = _exchangeLimits[compliance][_exchangeID][i].limitTime;\n            _resetExchangeLimitCooldown(compliance, _exchangeID, _investorID, limitTime);\n            _exchangeCounters[compliance][_exchangeID][_investorID][limitTime].value += _value;\n        }\n    }\n\n    /**\n    *  @dev resets cooldown for the month if cooldown has reached the time limit of 30days\n    *  @param compliance the Compliance smart contract address\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _investorID ONCHAINID to reset\n    *  @param _limitTime limit time frame\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _resetExchangeLimitCooldown(address compliance, address _exchangeID, address _investorID, uint32 _limitTime)\n        internal {\n        if (_isExchangeCounterFinished(compliance, _exchangeID, _investorID, _limitTime)) {\n            ExchangeTransferCounter storage counter =\n                _exchangeCounters[compliance][_exchangeID][_investorID][_limitTime];\n\n            counter.timer = block.timestamp + _limitTime;\n            counter.value = 0;\n        }\n    }\n\n    /**\n    *  @dev checks if the counter time frame has finished since the cooldown has been triggered for this exchange and identity\n    *  @param _compliance the Compliance smart contract to be checked\n    *  @param _exchangeID ONCHAINID of the exchange\n    *  @param _identity ONCHAINID of user wallet\n    *  @param _limitTime limit time frame\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isExchangeCounterFinished(address _compliance, address _exchangeID, address _identity, uint32 _limitTime)\n    internal view returns (bool) {\n        return _exchangeCounters[_compliance][_exchangeID][_identity][_limitTime].timer <= block.timestamp;\n    }\n\n    /**\n    *  @dev checks if the given user address is an agent of token\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _userAddress ONCHAIN identity of the user\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isTokenAgent(address compliance, address _userAddress) internal view returns (bool) {\n        return AgentRole(IModularCompliance(compliance).getTokenBound()).isAgent(_userAddress);\n    }\n\n    /**\n   *  @dev Returns the ONCHAINID (Identity) of the _userAddress\n    *  @param _userAddress Address of the wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _getIdentity(address _compliance, address _userAddress) internal view returns (address) {\n        return address(IToken(IModularCompliance(_compliance).getTokenBound()).identityRegistry().identity\n            (_userAddress));\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/TimeTransfersLimitsModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"../../../roles/AgentRole.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract TimeTransfersLimitsModule is AbstractModuleUpgradeable {\n    /// Struct of transfer Counters\n    struct TransferCounter {\n        uint256 value;\n        uint256 timer;\n    }\n\n    struct Limit {\n        uint32 limitTime;\n        uint256 limitValue;\n    }\n\n    struct IndexLimit {\n        bool attributedLimit;\n        uint8 limitIndex;\n    }\n\n    // Mapping for limit time indexes\n    mapping(address => mapping(uint32 => IndexLimit)) public limitValues;\n\n    /// Mapping for limit time frames\n    mapping(address => Limit[]) public transferLimits;\n\n    /// Mapping for users Counters\n    mapping(address => mapping(address => mapping(uint32 => TransferCounter))) public usersCounters;\n\n    /**\n    *  this event is emitted whenever a transfer limit is updated for the given compliance address and limit time\n    *  the event is emitted by 'setTimeTransferLimit'.\n    *  compliance`is the compliance contract address\n    *  _limitValue is the new limit value for the given limit time\n    *  _limitTime is the period of time of the limit\n    */\n    event TimeTransferLimitUpdated(address indexed compliance, uint32 limitTime, uint256 limitValue);\n\n    error LimitsArraySizeExceeded(address compliance, uint arraySize);\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n    *  @dev Sets the limit of tokens allowed to be transferred in the given time frame.\n    *  @param _limit The limit time and value\n    *  Only the owner of the Compliance smart contract can call this function\n    */\n    function setTimeTransferLimit(Limit calldata _limit) external onlyComplianceCall {\n        bool limitIsAttributed = limitValues[msg.sender][_limit.limitTime].attributedLimit;\n        uint8 limitCount = uint8(transferLimits[msg.sender].length);\n        if (!limitIsAttributed && limitCount >= 4) {\n            revert LimitsArraySizeExceeded(msg.sender, limitCount);\n        }\n        if (!limitIsAttributed && limitCount < 4) {\n            transferLimits[msg.sender].push(_limit);\n            limitValues[msg.sender][_limit.limitTime] = IndexLimit(true, limitCount);\n        } else {\n            transferLimits[msg.sender][limitValues[msg.sender][_limit.limitTime].limitIndex] = _limit;\n        }\n\n        emit TimeTransferLimitUpdated(msg.sender, _limit.limitTime, _limit.limitValue);\n    }\n\n    /**\n     *  @dev See {IModule-moduleTransferAction}.\n     */\n    function moduleTransferAction(address _from, address /*_to*/, uint256 _value) external override onlyComplianceCall {\n        _increaseCounters(msg.sender, _from, _value);\n    }\n\n    /**\n     *  @dev See {IModule-moduleMintAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address _from, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     */\n    function moduleCheck(\n        address _from,\n        address /*_to*/,\n        uint256 _value,\n        address _compliance\n    ) external view override returns (bool) {\n        if (_from == address(0)) {\n            return true;\n        }\n\n        if (_isTokenAgent(_compliance, _from)) {\n            return true;\n        }\n\n        address senderIdentity = _getIdentity(_compliance, _from);\n        for (uint256 i = 0; i < transferLimits[_compliance].length; i++) {\n            if (_value > transferLimits[_compliance][i].limitValue) {\n                return false;\n            }\n\n            if (!_isUserCounterFinished(_compliance, senderIdentity, transferLimits[_compliance][i].limitTime)\n                && usersCounters[_compliance][senderIdentity][transferLimits[_compliance][i].limitTime].value + _value\n                    > transferLimits[_compliance][i].limitValue) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n    *  @dev getter for `transferLimits` variable\n    *  @param _compliance the Compliance smart contract to be checked\n    *  returns array of Limits\n    */\n    function getTimeTransferLimits(address _compliance) external view returns (Limit[] memory limits) {\n        return transferLimits[_compliance];\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure override returns (bool) {\n        return true;\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"TimeTransfersLimitsModule\";\n    }\n\n    /**\n    *  @dev Checks if the cooldown must be reset, then increases user's OnchainID counters,\n    *  @param _compliance the Compliance smart contract address\n    *  @param _userAddress user wallet address\n    *  @param _value, value of transaction)to be increased\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _increaseCounters(address _compliance, address _userAddress, uint256 _value) internal {\n        address identity = _getIdentity(_compliance, _userAddress);\n        for (uint256 i = 0; i < transferLimits[_compliance].length; i++) {\n            _resetUserCounter(_compliance, identity, transferLimits[_compliance][i].limitTime);\n            usersCounters[_compliance][identity][transferLimits[_compliance][i].limitTime].value += _value;\n        }\n    }\n\n    /**\n    *  @dev resets cooldown for the user if cooldown has reached the time limit\n    *  @param _compliance the Compliance smart contract address\n    *  @param _identity ONCHAINID of user wallet\n    *  @param _limitTime limit time frame\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _resetUserCounter(address _compliance, address _identity, uint32 _limitTime) internal {\n        if (_isUserCounterFinished(_compliance, _identity, _limitTime)) {\n            TransferCounter storage counter = usersCounters[_compliance][_identity][_limitTime];\n            counter.timer = block.timestamp + _limitTime;\n            counter.value = 0;\n        }\n    }\n\n    /**\n    *  @dev checks if the counter time frame has finished since the cooldown has been triggered for this identity\n    *  @param _compliance the Compliance smart contract to be checked\n    *  @param _identity ONCHAINID of user wallet\n    *  @param _limitTime limit time frame\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isUserCounterFinished(address _compliance, address _identity, uint32 _limitTime) internal view returns (bool) {\n        return usersCounters[_compliance][_identity][_limitTime].timer <= block.timestamp;\n    }\n\n    /**\n    *  @dev Returns the ONCHAINID (Identity) of the _userAddress\n    *  @param _userAddress Address of the wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _getIdentity(address _compliance, address _userAddress) internal view returns (address) {\n        return address(IToken(IModularCompliance(_compliance).getTokenBound()).identityRegistry().identity\n            (_userAddress));\n    }\n\n    /**\n    *  @dev checks if the given user address is an agent of token\n    *  @param compliance the Compliance smart contract to be checked\n    *  @param _userAddress ONCHAIN identity of the user\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _isTokenAgent(address compliance, address _userAddress) internal view returns (bool) {\n        return AgentRole(IModularCompliance(compliance).getTokenBound()).isAgent(_userAddress);\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/TransferFeesModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../IModularCompliance.sol\";\nimport \"../../../token/IToken.sol\";\nimport \"../../../roles/AgentRole.sol\";\nimport \"./AbstractModuleUpgradeable.sol\";\n\ncontract TransferFeesModule is AbstractModuleUpgradeable {\n    /// Struct of fees\n    struct Fee {\n        uint256 rate; // min = 0, max = 10000, 0.01% = 1, 1% = 100, 100% = 10000\n        address collector;\n    }\n\n    /// Mapping for compliance fees\n    mapping(address => Fee) private _fees;\n\n    /**\n    *  this event is emitted whenever a fee definition is updated for the given compliance address\n    *  the event is emitted by 'setFee'.\n    *  compliance is the compliance contract address\n    *  _rate is the rate of the fee (0.01% = 1, 1% = 100, 100% = 10000)\n    *  _collector is the collector wallet address\n    */\n    event FeeUpdated(address indexed compliance, uint256 _rate, address _collector);\n\n    error FeeRateIsOutOfRange(address compliance, uint256 rate);\n\n    error CollectorAddressIsNotVerified(address compliance, address collector);\n\n    /**\n     * @dev initializes the contract and sets the initial state.\n     * @notice This function should only be called once during the contract deployment.\n     */\n    function initialize() external initializer {\n        __AbstractModule_init();\n    }\n\n    /**\n    *  @dev Sets the fee rate and collector of the given compliance\n    *  @param _rate is the rate of the fee (0.01% = 1, 1% = 100, 100% = 10000)\n    *  @param _collector is the collector wallet address\n    *  Only the owner of the Compliance smart contract can call this function\n    *  Collector wallet address must be verified\n    */\n    function setFee(uint256 _rate, address _collector) external onlyComplianceCall {\n        address tokenAddress = IModularCompliance(msg.sender).getTokenBound();\n        if (_rate > 10000) {\n            revert FeeRateIsOutOfRange(msg.sender, _rate);\n        }\n\n        IIdentityRegistry identityRegistry = IToken(tokenAddress).identityRegistry();\n        if (!identityRegistry.isVerified(_collector)) {\n            revert CollectorAddressIsNotVerified(msg.sender, _collector);\n        }\n\n        _fees[msg.sender].rate = _rate;\n        _fees[msg.sender].collector = _collector;\n        emit FeeUpdated(msg.sender, _rate, _collector);\n    }\n\n    /**\n    *  @dev See {IModule-moduleTransferAction}.\n    */\n    function moduleTransferAction(address _from, address _to, uint256 _value) external override onlyComplianceCall {\n        address senderIdentity = _getIdentity(msg.sender, _from);\n        address receiverIdentity = _getIdentity(msg.sender, _to);\n\n        if (senderIdentity == receiverIdentity) {\n            return;\n        }\n\n        Fee memory fee = _fees[msg.sender];\n        if (fee.rate == 0 || _from == fee.collector || _to == fee.collector) {\n            return;\n        }\n\n        uint256 feeAmount = (_value * fee.rate) / 10000;\n        if (feeAmount == 0) {\n            return;\n        }\n\n        IToken token = IToken(IModularCompliance(msg.sender).getTokenBound());\n        bool sent = token.forcedTransfer(_to, fee.collector, feeAmount);\n        require(sent, \"transfer fee collection failed\");\n    }\n\n    /**\n    *  @dev See {IModule-moduleMintAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleMintAction(address _to, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleBurnAction}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function moduleBurnAction(address _from, uint256 _value) external override onlyComplianceCall {}\n\n    /**\n     *  @dev See {IModule-moduleCheck}.\n     */\n    // solhint-disable-next-line no-unused-vars\n    function moduleCheck(address _from, address _to, uint256 _value, address _compliance) external view override returns (bool) {\n        return true;\n    }\n\n    /**\n    *  @dev getter for `_fees` variable\n    *  @param _compliance the Compliance smart contract to be checked\n    *  returns the Fee\n    */\n    function getFee(address _compliance) external view returns (Fee memory) {\n       return _fees[_compliance];\n    }\n\n    /**\n     *  @dev See {IModule-canComplianceBind}.\n     */\n    function canComplianceBind(address _compliance) external view returns (bool) {\n        address tokenAddress = IModularCompliance(_compliance).getTokenBound();\n        return AgentRole(tokenAddress).isAgent(address(this));\n    }\n\n    /**\n      *  @dev See {IModule-isPlugAndPlay}.\n     */\n    function isPlugAndPlay() external pure returns (bool) {\n        return false;\n    }\n\n    /**\n     *  @dev See {IModule-name}.\n     */\n    function name() public pure returns (string memory _name) {\n        return \"TransferFeesModule\";\n    }\n\n    /**\n    *  @dev Returns the ONCHAINID (Identity) of the _userAddress\n    *  @param _userAddress Address of the wallet\n    *  internal function, can be called only from the functions of the Compliance smart contract\n    */\n    function _getIdentity(address _compliance, address _userAddress) internal view returns (address) {\n        return address(IToken(IModularCompliance(_compliance).getTokenBound()).identityRegistry().identity\n        (_userAddress));\n    }\n}\n"
    },
    "contracts/compliance/modular/modules/TransferRestrictModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n//\r\n//                                             :+#####%%%%%%%%%%%%%%+\r\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\r\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\r\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\r\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\r\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\r\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\r\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\r\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\r\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\r\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\r\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\r\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\r\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\r\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\r\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\r\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\r\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\r\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\r\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\r\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\r\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\r\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\r\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\r\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\r\n//                                          +@@@@@. =@@@=  .+@@@@@*:\r\n//                                          #@@@@#:%@@#. :*@@@@#-\r\n//                                          @@@@@%@@@= :#@@@@+.\r\n//                                         :@@@@@@@#.:#@@@%-\r\n//                                         +@@@@@@-.*@@@*:\r\n//                                         #@@@@#.=@@@+.\r\n//                                         @@@@+-%@%=\r\n//                                        :@@@#%@%=\r\n//                                        +@@@@%-\r\n//                                        :#%%=\r\n//\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny sàrl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./AbstractModuleUpgradeable.sol\";\r\n\r\ncontract TransferRestrictModule is AbstractModuleUpgradeable {\r\n    /// allowed user addresses mapping\r\n    mapping(address => mapping(address => bool)) private _allowedUserAddresses;\r\n\r\n    /**\r\n     *  this event is emitted when a user is allowed for transfer\r\n     *  `_compliance` is the compliance address.\r\n     *  `_userAddress` is the allowed user address\r\n     */\r\n    event UserAllowed(address _compliance, address _userAddress);\r\n\r\n    /**\r\n     *  this event is emitted when a user is disallowed for transfer\r\n     *  `_compliance` is the compliance address.\r\n     *  `_userAddress` is the disallowed user address\r\n     */\r\n    event UserDisallowed(address _compliance, address _userAddress);\r\n\r\n    /**\r\n     * @dev initializes the contract and sets the initial state.\r\n     * @notice This function should only be called once during the contract deployment.\r\n     */\r\n    function initialize() external initializer {\r\n        __AbstractModule_init();\r\n    }\r\n    \r\n    /**\r\n     *  @dev allows a user address for transfer.\r\n     *  @param _userAddress is the address of the user\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `UserAllowed` event\r\n     */\r\n    function allowUser(address _userAddress) external onlyComplianceCall {\r\n        _allowedUserAddresses[msg.sender][_userAddress] = true;\r\n        emit UserAllowed(msg.sender, _userAddress);\r\n    }\r\n\r\n    /**\r\n     *  @dev allows multiple user addresses for transfer.\r\n     *  @param _userAddresses is the array of user addresses\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `UserAllowed` event\r\n     */\r\n    function batchAllowUsers(address[] memory _userAddresses) external onlyComplianceCall {\r\n        uint256 length = _userAddresses.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address _userAddress = _userAddresses[i];\r\n            _allowedUserAddresses[msg.sender][_userAddress] = true;\r\n            emit UserAllowed(msg.sender, _userAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev disallows a user address for transfer.\r\n     *  @param _userAddress is the address of the user\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `UserDisallowed` event\r\n     */\r\n    function disallowUser(address _userAddress) external onlyComplianceCall {\r\n        _allowedUserAddresses[msg.sender][_userAddress] = false;\r\n        emit UserDisallowed(msg.sender, _userAddress);\r\n    }\r\n\r\n    /**\r\n    *  @dev disallows multiple user addresses for transfer.\r\n     *  @param _userAddresses is the array of user addresses\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `UserDisallowed` event\r\n     */\r\n    function batchDisallowUsers(address[] memory _userAddresses) external onlyComplianceCall {\r\n        uint256 length = _userAddresses.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address _userAddress = _userAddresses[i];\r\n            _allowedUserAddresses[msg.sender][_userAddress] = false;\r\n            emit UserDisallowed(msg.sender, _userAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleTransferAction}.\r\n     *  no transfer action required in this module\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function moduleTransferAction(address _from, address _to, uint256 _value) external onlyComplianceCall {}\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleMintAction}.\r\n     *  no mint action required in this module\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function moduleMintAction(address _to, uint256 _value) external onlyComplianceCall {}\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleBurnAction}.\r\n     *  no burn action required in this module\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function moduleBurnAction(address _from, uint256 _value) external onlyComplianceCall {}\r\n\r\n    /**\r\n     *  @dev See {IModule-moduleCheck}.\r\n     */\r\n    function moduleCheck(\r\n        address _from,\r\n        address _to,\r\n        uint256 /*_value*/,\r\n        address _compliance\r\n    ) external view override returns (bool) {\r\n        if(_allowedUserAddresses[_compliance][_from]) {\r\n            return true;\r\n        }\r\n\r\n        return _allowedUserAddresses[_compliance][_to];\r\n    }\r\n\r\n    /**\r\n    *  @dev getter for `_allowedUserAddresses` mapping\r\n    *  @param _compliance the Compliance smart contract to be checked\r\n    *  @param _userAddress the user address to be checked\r\n    *  returns the true if user is allowed to transfer\r\n    */\r\n    function isUserAllowed(address _compliance, address _userAddress) external view returns (bool) {\r\n        return _allowedUserAddresses[_compliance][_userAddress];\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-canComplianceBind}.\r\n     */\r\n    function canComplianceBind(address /*_compliance*/) external view override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-isPlugAndPlay}.\r\n     */\r\n    function isPlugAndPlay() external pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModule-name}.\r\n     */\r\n    function name() public pure returns (string memory _name) {\r\n        return \"TransferRestrictModule\";\r\n    }\r\n}"
    },
    "contracts/DVA/DVATransferManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../roles/AgentRole.sol\";\nimport \"../token/IToken.sol\";\nimport \"./IDVATransferManager.sol\";\n\ncontract DVATransferManager is IDVATransferManager {\n\n    // Mapping for token approval criteria\n    mapping(address => ApprovalCriteria) private _approvalCriteria;\n\n    // Mapping for transfer requests\n    mapping(bytes32 => Transfer) private _transfers;\n\n    // nonce of the transaction allowing the creation of unique transferID\n    uint256 private _txNonce;\n\n    constructor(){\n        _txNonce = 0;\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-setApprovalCriteria}\n     */\n    function setApprovalCriteria(\n        address tokenAddress,\n        bool includeRecipientApprover,\n        bool includeAgentApprover,\n        bool sequentialApproval,\n        address[] memory additionalApprovers\n    ) external {\n        if (!AgentRole(tokenAddress).isAgent(msg.sender)) {\n            revert OnlyTokenAgentCanCall(tokenAddress);\n        }\n\n        if (!IToken(tokenAddress).identityRegistry().isVerified(address(this))) {\n            revert DVAManagerIsNotVerifiedForTheToken(tokenAddress);\n        }\n\n        bytes32 hash = keccak256(\n            abi.encode(\n                tokenAddress,\n                includeRecipientApprover,\n                includeAgentApprover,\n                additionalApprovers\n            )\n        );\n\n        _approvalCriteria[tokenAddress] = ApprovalCriteria(\n            includeRecipientApprover,\n            includeAgentApprover,\n            sequentialApproval,\n            additionalApprovers,\n            hash);\n\n        emit ApprovalCriteriaSet(\n            tokenAddress,\n            includeRecipientApprover,\n            includeAgentApprover,\n            sequentialApproval,\n            additionalApprovers,\n            hash\n        );\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-initiateTransfer}\n     */\n    function initiateTransfer(address tokenAddress, address recipient, uint256 amount) external {\n        ApprovalCriteria memory approvalCriteria = _approvalCriteria[tokenAddress];\n        if (approvalCriteria.hash == bytes32(0)) {\n            revert TokenIsNotRegistered(tokenAddress);\n        }\n\n        IToken token = IToken(tokenAddress);\n        if (!token.identityRegistry().isVerified(recipient)) {\n            revert RecipientIsNotVerified(tokenAddress, recipient);\n        }\n\n        token.transferFrom(msg.sender, address(this), amount);\n\n        uint256 nonce = _txNonce++;\n        bytes32 transferID = calculateTransferID(nonce, msg.sender, recipient, amount);\n\n        Transfer storage transfer = _transfers[transferID];\n        transfer.tokenAddress = tokenAddress;\n        transfer.sender = msg.sender;\n        transfer.recipient = recipient;\n        transfer.amount = amount;\n        transfer.status = TransferStatus.PENDING;\n        transfer.approvalCriteriaHash = approvalCriteria.hash;\n\n        _addApproversToTransfer(transfer, approvalCriteria);\n        emit TransferInitiated(\n            transferID,\n            tokenAddress,\n            msg.sender,\n            recipient,\n            amount,\n            approvalCriteria.hash\n        );\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-approveTransfer}\n     */\n    function approveTransfer(bytes32 transferID) external {\n        Transfer storage transfer = _getPendingTransfer(transferID);\n        if (_approvalCriteriaChanged(transferID, transfer)) {\n            return;\n        }\n\n        bool allApproved = _approveTransfer(transferID, transfer, msg.sender);\n        if (allApproved) {\n            _completeTransfer(transferID, transfer);\n        }\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-delegateApproveTransfer}\n     */\n    function delegateApproveTransfer(bytes32 transferID, Signature[] memory signatures) external {\n        if (signatures.length == 0) {\n            revert SignaturesCanNotBeEmpty(transferID);\n        }\n\n        Transfer storage transfer = _getPendingTransfer(transferID);\n        if (_approvalCriteriaChanged(transferID, transfer)) {\n            return;\n        }\n\n        bytes32 transferHash = _generateTransferSignatureHash(transferID);\n        for (uint256 i = 0; i < signatures.length; i++) {\n            Signature memory signature = signatures[i];\n            address signer = ecrecover(transferHash, signature.v, signature.r, signature.s);\n\n            bool allApproved = _approveTransfer(transferID, transfer, signer);\n            if (allApproved) {\n                _completeTransfer(transferID, transfer);\n                return;\n            }\n        }\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-cancelTransfer}\n     */\n    function cancelTransfer(bytes32 transferID) external {\n        Transfer storage transfer = _getPendingTransfer(transferID);\n        if (msg.sender != transfer.sender) {\n            revert OnlyTransferSenderCanCall(transferID);\n        }\n\n        transfer.status = TransferStatus.CANCELLED;\n        _transferTokensTo(transfer, transfer.sender);\n        emit TransferCancelled(transferID);\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-rejectTransfer}\n     */\n    function rejectTransfer(bytes32 transferID) external {\n        Transfer storage transfer = _getPendingTransfer(transferID);\n        if (_approvalCriteriaChanged(transferID, transfer)) {\n            return;\n        }\n\n        bool rejected = false;\n        ApprovalCriteria memory approvalCriteria = _approvalCriteria[transfer.tokenAddress];\n        for (uint256 i = 0; i < transfer.approvers.length; i++) {\n            Approver storage approver = transfer.approvers[i];\n            if (approver.approved) {\n                continue;\n            }\n\n            if (_canApprove(transfer, approver, msg.sender)) {\n                rejected = true;\n                break;\n            }\n\n            if (approvalCriteria.sequentialApproval) {\n                revert ApprovalsMustBeSequential(transferID);\n            }\n        }\n\n        if (!rejected) {\n            revert ApproverNotFound(transferID, msg.sender);\n        }\n\n        transfer.status = TransferStatus.REJECTED;\n        _transferTokensTo(transfer, transfer.sender);\n        emit TransferRejected(transferID, msg.sender);\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-getApprovalCriteria}\n     */\n    function getApprovalCriteria(address tokenAddress) external view returns (ApprovalCriteria memory) {\n        ApprovalCriteria memory approvalCriteria = _approvalCriteria[tokenAddress];\n        if (approvalCriteria.hash == bytes32(0)) {\n            revert TokenIsNotRegistered(tokenAddress);\n        }\n\n        return approvalCriteria;\n    }\n\n    /**\n     *  @dev getter for the transfer\n     *  @param transferID is the unique ID of the transfer\n     *  returns transfer\n     */\n    function getTransfer(bytes32 transferID) external view returns (Transfer memory) {\n        Transfer memory transfer = _transfers[transferID];\n        if (transfer.tokenAddress == address(0)) {\n            revert InvalidTransferID(transferID);\n        }\n\n        return transfer;\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-getNextApprover}\n     */\n    function getNextApprover(bytes32 transferID) external view returns (address nextApprover, bool anyTokenAgent) {\n        Transfer storage transfer = _getPendingTransfer(transferID);\n        for (uint256 i = 0; i < transfer.approvers.length; i++) {\n            if (transfer.approvers[i].approved) {\n                continue;\n            }\n\n            nextApprover = transfer.approvers[i].wallet;\n            anyTokenAgent = transfer.approvers[i].anyTokenAgent;\n            break;\n        }\n\n        return (nextApprover, anyTokenAgent);\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-getNextTxNonce}\n     */\n    function getNextTxNonce() external view returns (uint256) {\n        return _txNonce;\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-name}\n     */\n    function name() external pure returns (string memory _name) {\n        return \"DVATransferManager\";\n    }\n\n    /**\n     *  @dev See {IDVATransferManager-calculateTransferID}\n     */\n    function calculateTransferID(\n        uint256 _nonce,\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) public pure returns (bytes32){\n        bytes32 transferID = keccak256(abi.encode(\n            _nonce, _sender, _recipient, _amount\n        ));\n        return transferID;\n    }\n\n    // solhint-disable-next-line code-complexity\n    function _approveTransfer(bytes32 transferID, Transfer storage transfer, address caller) internal returns (bool allApproved) {\n        bool approved = false;\n        uint256 pendingApproverCount = 0;\n        ApprovalCriteria memory approvalCriteria = _approvalCriteria[transfer.tokenAddress];\n        for (uint256 i = 0; i < transfer.approvers.length; i++) {\n            Approver storage approver = transfer.approvers[i];\n            if (approver.approved) {\n                continue;\n            }\n\n            if (approved) {\n                pendingApproverCount++;\n                break;\n            }\n\n            if (_canApprove(transfer, approver, caller)) {\n                approved = true;\n                approver.approved = true;\n\n                if (approver.wallet == address(0)) {\n                    approver.wallet = caller;\n                }\n\n                emit TransferApproved(transferID, caller);\n                continue;\n            }\n\n            if (approvalCriteria.sequentialApproval) {\n                revert ApprovalsMustBeSequential(transferID);\n            }\n\n            pendingApproverCount++;\n        }\n\n        if (!approved) {\n            revert ApproverNotFound(transferID, caller);\n        }\n\n        return pendingApproverCount == 0;\n    }\n\n    function _completeTransfer(bytes32 transferID, Transfer storage transfer) internal {\n        transfer.status = TransferStatus.COMPLETED;\n        _transferTokensTo(transfer, transfer.recipient);\n        emit TransferCompleted(\n            transferID,\n            transfer.tokenAddress,\n            transfer.sender,\n            transfer.recipient,\n            transfer.amount\n        );\n    }\n\n    function _approvalCriteriaChanged(bytes32 transferID, Transfer storage transfer) internal returns (bool) {\n        ApprovalCriteria memory approvalCriteria = _approvalCriteria[transfer.tokenAddress];\n        if (transfer.approvalCriteriaHash == approvalCriteria.hash) {\n            return false;\n        }\n\n        delete transfer.approvers;\n        _addApproversToTransfer(transfer, approvalCriteria);\n        transfer.approvalCriteriaHash = approvalCriteria.hash;\n        emit TransferApprovalStateReset(\n            transferID,\n            transfer.approvalCriteriaHash\n        );\n\n        return true;\n    }\n\n    function _addApproversToTransfer(Transfer storage transfer, ApprovalCriteria memory approvalCriteria) internal {\n        if (approvalCriteria.includeRecipientApprover) {\n            transfer.approvers.push(Approver(transfer.recipient, false, false));\n        }\n\n        if (approvalCriteria.includeAgentApprover) {\n            transfer.approvers.push(Approver(address(0), true, false));\n        }\n\n        for (uint256 i = 0; i < approvalCriteria.additionalApprovers.length; i++) {\n            transfer.approvers.push(Approver(approvalCriteria.additionalApprovers[i], false, false));\n        }\n    }\n\n    function _transferTokensTo(Transfer memory transfer, address to) internal {\n        IToken(transfer.tokenAddress).transfer(to, transfer.amount);\n    }\n\n    function _canApprove(Transfer memory transfer, Approver memory approver, address caller) internal view returns (bool) {\n        return approver.wallet == caller ||\n            (approver.anyTokenAgent && approver.wallet == address(0) && AgentRole(transfer.tokenAddress).isAgent(caller));\n    }\n\n    function _getPendingTransfer(bytes32 transferID) internal view returns (Transfer storage) {\n        Transfer storage transfer = _transfers[transferID];\n        if (transfer.tokenAddress == address(0)) {\n            revert InvalidTransferID(transferID);\n        }\n\n        if (transfer.status != TransferStatus.PENDING) {\n            revert TransferIsNotInPendingStatus(transferID);\n        }\n\n        return transfer;\n    }\n\n    function _generateTransferSignatureHash(bytes32 transferID) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", transferID));\n    }\n}\n"
    },
    "contracts/DVA/IDVATransferManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../roles/AgentRole.sol\";\nimport \"../token/IToken.sol\";\n\ninterface IDVATransferManager {\n    enum TransferStatus {\n        PENDING,\n        COMPLETED,\n        CANCELLED,\n        REJECTED\n    }\n\n    struct ApprovalCriteria {\n        bool includeRecipientApprover;\n        bool includeAgentApprover;\n        bool sequentialApproval;\n        address[] additionalApprovers;\n        bytes32 hash;\n    }\n\n    struct Transfer {\n        address tokenAddress;\n        address sender;\n        address recipient;\n        uint256 amount;\n        TransferStatus status;\n        Approver[] approvers;\n        bytes32 approvalCriteriaHash;\n    }\n\n    struct Approver {\n        address wallet; // if anyTokenAgent is true, it will be address(0) on initialization\n        bool anyTokenAgent;\n        bool approved;\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n     *  this event is emitted whenever an approval criteria of a token is modified.\n     *  the event is emitted by 'setApprovalCriteria' function.\n     *  `tokenAddress` is the token address.\n     *  `includeRecipientApprover` determines whether the recipient is included in the approver list\n     *  `includeAgentApprover` determines whether the agent is included in the approver list\n     *  `sequentialApproval` determines whether approvals must be sequential\n     *  `additionalApprovers` are the addresses of additional approvers to be added to the approver list\n     *  `hash` is the approval criteria hash\n     */\n    event ApprovalCriteriaSet(\n        address tokenAddress,\n        bool includeRecipientApprover,\n        bool includeAgentApprover,\n        bool sequentialApproval,\n        address[] additionalApprovers,\n        bytes32 hash\n    );\n\n    /**\n     *  this event is emitted whenever a transfer is initiated\n     *  the event is emitted by 'initiateTransfer' function.\n     *  `transferID` is the unique ID of the transfer\n     *  `tokenAddress` is the token address\n     *  `sender` is the address of the sender\n     *  `recipient` is the address of the recipient\n     *  `amount` is the amount of the transfer\n     *  `approvers` is the list of approvers\n     *  `approvalCriteriaHash` is the approval criteria hash\n     */\n    event TransferInitiated(\n        bytes32 transferID,\n        address tokenAddress,\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes32 approvalCriteriaHash\n    );\n\n    /**\n    *  this event is emitted whenever a transfer is approved by an approver\n    *  the event is emitted by 'approveTransfer' function.\n    *  `transferID` is the unique ID of the transfer\n    *  `approver` is the approver address\n    */\n    event TransferApproved(\n        bytes32 transferID,\n        address approver\n    );\n\n    /**\n    *  this event is emitted whenever a transfer is rejected by an approver\n    *  the event is emitted by 'rejectTransfer' function.\n    *  `transferID` is the unique ID of the transfer\n    *  `rejectedBy` is the approver address\n    */\n    event TransferRejected(\n        bytes32 transferID,\n        address rejectedBy\n    );\n\n    /**\n    *  this event is emitted whenever a transfer is cancelled by the sender\n    *  the event is emitted by 'cancelTransfer' function.\n    *  `transferID` is the unique ID of the transfer\n    */\n    event TransferCancelled(\n        bytes32 transferID\n    );\n\n    /**\n    *  this event is emitted whenever all approvers approve a transfer\n    *  the event is emitted by 'approveTransfer' function.\n    *  `transferID` is the unique ID of the transfer\n    *  `tokenAddress` is the token address\n    *  `sender` is the address of the sender\n    *  `recipient` is the address of the recipient\n    *  `amount` is the amount of the transfer\n    */\n    event TransferCompleted(\n        bytes32 transferID,\n        address tokenAddress,\n        address sender,\n        address recipient,\n        uint256 amount\n    );\n\n    /**\n     *  this event is emitted whenever a transfer approval criteria are reset\n     *  the event is emitted by 'approveTransfer' and 'rejectTransfer' functions.\n     *  `transferID` is the unique ID of the transfer\n     *  `approvers` is the list of approvers\n     *  `approvalCriteriaHash` is the approval criteria hash\n     */\n    event TransferApprovalStateReset(\n        bytes32 transferID,\n        bytes32 approvalCriteriaHash\n    );\n\n    error OnlyTokenAgentCanCall(address _tokenAddress);\n\n    error OnlyTransferSenderCanCall(bytes32 _transferID);\n\n    error TokenIsNotRegistered(address _tokenAddress);\n\n    error RecipientIsNotVerified(address _tokenAddress, address _recipient);\n\n    error DVAManagerIsNotVerifiedForTheToken(address _tokenAddress);\n\n    error InvalidTransferID(bytes32 _transferID);\n\n    error TransferIsNotInPendingStatus(bytes32 _transferID);\n\n    error ApprovalsMustBeSequential(bytes32 _transferID);\n\n    error ApproverNotFound(bytes32 _transferID, address _approver);\n\n    error SignaturesCanNotBeEmpty(bytes32 _transferID);\n\n    /**\n    *  @dev modify the approval criteria of a token\n     *  @param tokenAddress is the token address.\n     *  @param includeRecipientApprover determines whether the recipient is included in the approver list\n     *  @param includeAgentApprover determines whether the agent is included in the approver list\n     *  @param sequentialApproval determines whether approvals must be sequential\n     *  @param additionalApprovers are the addresses of additional approvers to be added to the approver list\n     *  Only token owner can call this function\n     *  DVATransferManager must be an agent of the given token\n     *  emits an `ApprovalCriteriaSet` event\n     */\n    function setApprovalCriteria(\n        address tokenAddress,\n        bool includeRecipientApprover,\n        bool includeAgentApprover,\n        bool sequentialApproval,\n        address[] memory additionalApprovers\n    ) external;\n\n    /**\n     *  @dev initiates a new transfer\n     *  @param tokenAddress is the address of the token\n     *  @param recipient is the address of the recipient\n     *  @param amount is the transfer amount\n     *  Approval criteria must be preset for the given token address\n     *  Sender must give DvA an allowance of at least the specified amount\n     *  Receiver must be verified for the given token address\n     *  emits a `TransferInitiated` event\n     */\n    function initiateTransfer(address tokenAddress, address recipient, uint256 amount) external;\n\n    /**\n     *  @dev approves a transfer\n     *  @param transferID is the unique ID of the transfer\n     *  msg.sender must be an approver of the transfer\n     *  emits a `TransferApproved` event\n     *  emits a `TransferCompleted` event (if all approvers approved the transfer)\n     *  emits a `TransferApprovalStateReset` event (if transfer approval criteria have been reset)\n     */\n    function approveTransfer(bytes32 transferID) external;\n\n    /**\n     *  @dev approves a transfer with delegated signatures\n     *  @param transferID is the unique ID of the transfer\n     *  @param signatures is the array of signatures of the approvers\n     *  emits a `TransferApproved` event\n     *  emits a `TransferCompleted` event (if all approvers approved the transfer)\n     *  emits a `TransferApprovalStateReset` event (if transfer approval criteria have been reset)\n     */\n    function delegateApproveTransfer(bytes32 transferID, Signature[] memory signatures) external;\n\n    /**\n     *  @dev cancels a transfer\n     *  @param transferID is the unique ID of the transfer\n     *  msg.sender must be the sender of the transfer\n     *  emits a `TransferCancelled` event\n     */\n    function cancelTransfer(bytes32 transferID) external;\n\n    /**\n     *  @dev rejects a transfer\n     *  @param transferID is the unique ID of the transfer\n     *  msg.sender must be an approver of the transfer\n     *  emits a `TransferRejected` event\n     *  emits a `TransferApprovalStateReset` event (if transfer approval criteria have been reset)\n     */\n    function rejectTransfer(bytes32 transferID) external;\n\n    /**\n     *  @dev getter for the approval criteria of tokens\n     *  @param tokenAddress is the address of the token\n     *  returns approval criteria of the token\n     */\n    function getApprovalCriteria(address tokenAddress) external view returns (ApprovalCriteria memory);\n\n    /**\n     *  @dev getter for the transfer\n     *  @param transferID is the unique ID of the transfer\n     *  returns transfer\n     */\n    function getTransfer(bytes32 transferID) external view returns (Transfer memory);\n\n    /**\n     *  @dev getter for the next approver of a transfer\n     *  @param transferID is the unique ID of the transfer\n     *  returns address of the next approver and any token agent flag\n     */\n    function getNextApprover(bytes32 transferID) external view returns (address nextApprover, bool anyTokenAgent) ;\n\n    /**\n     *  @dev getter for the next unique nonce value\n     *  returns nonce\n     */\n    function getNextTxNonce() external view returns (uint256);\n\n    /**\n     *  @dev getter for the name of the manager\n     *  @return _name the name of the manager\n     */\n    function name() external pure returns (string memory _name);\n\n    /**\n     *  @dev calculates unique transfer ID\n     *  @param _nonce is the unique nonce value\n     *  @param _sender is the sender of the transfer\n     *  @param _recipient is the recipient of the transfer\n     *  @param _amount is the transfer amount\n     *  returns a unique transfer ID\n     */\n    function calculateTransferID(\n        uint256 _nonce,\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) external pure returns (bytes32);\n}\n\n"
    },
    "contracts/DVD/DVDTransferManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../roles/AgentRole.sol\";\nimport \"../token/IToken.sol\";\n\n\ncontract DVDTransferManager is Ownable {\n\n    /// Types\n\n    struct Delivery {\n        address counterpart;\n        address token;\n        uint256 amount;\n    }\n\n    struct Fee {\n        uint token1Fee;\n        uint token2Fee;\n        uint feeBase;\n        address fee1Wallet;\n        address fee2Wallet;\n    }\n\n    struct TxFees {\n        uint txFee1;\n        uint txFee2;\n        address fee1Wallet;\n        address fee2Wallet;\n    }\n\n    /// variables\n\n    // fee details linked to a parity of tokens\n    mapping(bytes32 => Fee) public fee;\n\n    // tokens to deliver by DVD transfer maker\n    mapping(bytes32 => Delivery) public token1ToDeliver;\n\n    // tokens to deliver by DVD transfer taker\n    mapping(bytes32 => Delivery) public token2ToDeliver;\n\n    // nonce of the transaction allowing the creation of unique transferID\n    uint256 public txNonce;\n\n    /// events\n\n    /**\n     * @dev Emitted when a DVD transfer is initiated by `maker` to swap `token1Amount` tokens `token1` (TREX or not)\n     * for `token2Amount` tokens `token2` with `taker`\n     * this event is emitted by the `initiateDVDTransfer` function\n     */\n    event DVDTransferInitiated(\n        bytes32 indexed transferID,\n        address maker,\n        address indexed token1,\n        uint256 token1Amount,\n        address taker,\n        address indexed token2,\n        uint256 token2Amount);\n\n    /**\n     * @dev Emitted when a DVD transfer is validated by `taker` and\n     * executed either by `taker` either by the agent of the TREX token\n     * if the TREX token is subject to conditional transfers\n     * this event is emitted by the `takeDVDTransfer` function\n     */\n    event DVDTransferExecuted(bytes32 indexed transferID);\n\n    /**\n     * @dev Emitted when a DVD transfer is cancelled\n     * this event is emitted by the `cancelDVDTransfer` function\n     */\n    event DVDTransferCancelled(bytes32 indexed transferID);\n\n    /**\n     * @dev Emitted when a DVD transfer is cancelled\n     * this event is emitted by the `cancelDVDTransfer` function\n     */\n    event FeeModified(\n        bytes32 indexed parity,\n        address token1,\n        address token2,\n        uint fee1,\n        uint fee2,\n        uint feeBase,\n        address fee1Wallet,\n        address fee2Wallet);\n\n    /// functions\n\n    // initiates the nonce at 0\n    constructor(){\n        txNonce = 0;\n    }\n\n    /**\n     *  @dev modify the fees applied to a parity of tokens (tokens can be TREX or ERC20)\n     *  @param _token1 the address of the base token for the parity `_token1`/`_token2`\n     *  @param _token2 the address of the counterpart token for the parity `_token1`/`_token2`\n     *  @param _fee1 the fee to apply on `_token1` leg of the DVD transfer per 10^`_feeBase`\n     *  @param _fee2 the fee to apply on `_token2` leg of the DVD transfer per 10^`_feeBase`\n     *  @param _feeBase the precision of the fee setting, e.g.\n     *  if `_feeBase` == 2 then `_fee1` and `_fee2` are in % (fee/10^`_feeBase`)\n     *  @param _fee1Wallet the wallet address receiving fees applied on `_token1`\n     *  @param _fee2Wallet the wallet address receiving fees applied on `_token2`\n     *  `_token1` and `_token2` need to be ERC20 or TREX tokens addresses, otherwise the transaction will fail\n     *  `msg.sender` has to be owner of the DVD contract or the owner of the TREX token involved in the parity (if any)\n     *  requires fees to be lower than 100%\n     *  requires `_feeBase` to be higher or equal to 2 (precision 10^2)\n     *  requires `_feeBase` to be lower or equal to 5 (precision 10^5) to avoid overflows\n     *  requires `_fee1Wallet` & `_fee2Wallet` to be non empty addresses if `_fee1` & `_fee2` are respectively set\n     *  note that if fees are not set for a parity the default fee is basically 0%\n     *  emits a `FeeModified` event\n     */\n    function modifyFee(\n        address _token1,\n        address _token2,\n        uint _fee1,\n        uint _fee2,\n        uint _feeBase,\n        address _fee1Wallet,\n        address _fee2Wallet) external {\n        require(\n            msg.sender == owner() ||\n            isTREXOwner(_token1, msg.sender) ||\n            isTREXOwner(_token2, msg.sender)\n            , \"Ownable: only owner can call\");\n        require(\n            IERC20(_token1).totalSupply() != 0 &&\n            IERC20(_token2).totalSupply() != 0\n            , \"invalid address : address is not an ERC20\");\n        require(\n            _fee1 <= 10**_feeBase && _fee1 >= 0 &&\n            _fee2 <= 10**_feeBase && _fee2 >= 0 &&\n            _feeBase <= 5 &&\n            _feeBase >= 2\n            , \"invalid fee settings\");\n        if (_fee1 > 0) {\n            require(_fee1Wallet != address(0), \"fee wallet 1 cannot be zero address\");\n        }\n        if (_fee2 > 0) {\n            require(_fee2Wallet != address(0), \"fee wallet 2 cannot be zero address\");\n        }\n        bytes32 _parity = calculateParity(_token1, _token2);\n        Fee memory parityFee;\n        parityFee.token1Fee = _fee1;\n        parityFee.token2Fee = _fee2;\n        parityFee.feeBase = _feeBase;\n        parityFee.fee1Wallet = _fee1Wallet;\n        parityFee.fee2Wallet = _fee2Wallet;\n        fee[_parity] = parityFee;\n        emit FeeModified(_parity, _token1, _token2, _fee1, _fee2, _feeBase, _fee1Wallet, _fee2Wallet);\n        bytes32 _reflectParity = calculateParity(_token2, _token1);\n        Fee memory reflectParityFee;\n        reflectParityFee.token1Fee = _fee2;\n        reflectParityFee.token2Fee = _fee1;\n        reflectParityFee.feeBase = _feeBase;\n        reflectParityFee.fee1Wallet = _fee2Wallet;\n        reflectParityFee.fee2Wallet = _fee1Wallet;\n        fee[_reflectParity] = reflectParityFee;\n        emit FeeModified(_reflectParity, _token2, _token1, _fee2, _fee1, _feeBase, _fee2Wallet, _fee1Wallet);\n    }\n\n    /**\n     *  @dev initiates a DVD transfer between `msg.sender` & `_counterpart`\n     *  @param _token1 the address of the token (ERC20 or TREX) provided by `msg.sender`\n     *  @param _token1Amount the amount of `_token1` that `msg.sender` will send to `_counterpart` at DVD execution time\n     *  @param _counterpart the address of the counterpart, which will receive `_token1Amount` of `_token1` in exchange for\n     *  `_token2Amount` of `_token2`\n     *  @param _token2 the address of the token (ERC20 or TREX) provided by `_counterpart`\n     *  @param _token2Amount the amount of `_token2` that `_counterpart` will send to `msg.sender` at DVD execution time\n     *  requires `msg.sender` to have enough `_token1` tokens to process the DVD transfer\n     *  requires `DVDTransferManager` contract to have the necessary allowance to process the DVD transfer on `msg.sender`\n     *  requires `_counterpart` to not be the 0 address\n     *  requires `_token1` & `_token2` to be valid token addresses\n     *  emits a `DVDTransferInitiated` event\n     */\n    function initiateDVDTransfer(\n        address _token1,\n        uint256 _token1Amount,\n        address _counterpart,\n        address _token2,\n        uint256 _token2Amount) external {\n        require(IERC20(_token1).balanceOf(msg.sender) >= _token1Amount, \"Not enough tokens in balance\");\n        require(\n            IERC20(_token1).allowance(msg.sender, address(this)) >= _token1Amount\n            , \"not enough allowance to initiate transfer\");\n        require (_counterpart != address(0), \"counterpart cannot be null\");\n        require(IERC20(_token2).totalSupply() != 0, \"invalid address : address is not an ERC20\");\n        Delivery memory token1;\n        token1.counterpart = msg.sender;\n        token1.token = _token1;\n        token1.amount = _token1Amount;\n        Delivery memory token2;\n        token2.counterpart = _counterpart;\n        token2.token = _token2;\n        token2.amount = _token2Amount;\n        bytes32 transferID =\n        calculateTransferID(\n                txNonce,\n                token1.counterpart,\n                token1.token,\n                token1.amount,\n                token2.counterpart,\n                token2.token,\n                token2.amount);\n        token1ToDeliver[transferID] = token1;\n        token2ToDeliver[transferID] = token2;\n        emit DVDTransferInitiated(\n                transferID,\n                token1.counterpart,\n                token1.token,\n                token1.amount,\n                token2.counterpart,\n                token2.token,\n                token2.amount);\n        txNonce++;\n    }\n\n    /**\n     *  @dev execute a DVD transfer that was previously initiated through the `initiateDVDTransfer` function\n     *  @param _transferID the DVD transfer identifier as calculated through\n     *  the `calculateTransferID` function for the initiated DVD transfer to execute\n     *  requires `_transferID` to exist (DVD transfer has to be initiated)\n     *  requires that taker (counterpart sending token2) has enough tokens in balance to process the DVD transfer\n     *  requires that `DVDTransferManager` contract has enough allowance to process the `token2` leg of the DVD transfer\n     *  requires that `msg.sender` is the taker OR the TREX agent in case a\n     *  TREX token is involved in the transfer (in case of conditional transfer\n     *  the agent can call the function when the transfer has been approved)\n     *  if fees apply on one side or both sides of the transfer the fees will be sent,\n     *  at transaction time, to the fees wallet previously set\n     *  in case fees apply the counterparts will receive less than the amounts\n     *  included in the DVD transfer as part of the transfer is redirected to the\n     *  fee wallet at transfer execution time\n     *  if one or both legs of the transfer are TREX, then all the relevant\n     *  checks apply on the transaction (compliance + identity checks)\n     *  and the transaction WILL FAIL if the TREX conditions of transfer are\n     *  not respected, please refer to {Token-transfer} and {Token-transferFrom} to\n     *  know more about TREX conditions for transfers\n     *  once the DVD transfer is executed the `_transferID` is removed from the pending `_transferID` pool\n     *  emits a `DVDTransferExecuted` event\n     */\n    function takeDVDTransfer(bytes32 _transferID) external {\n        Delivery memory token1 = token1ToDeliver[_transferID];\n        Delivery memory token2 = token2ToDeliver[_transferID];\n        require(\n            token1.counterpart != address(0) && token2.counterpart != address(0)\n            , \"transfer ID does not exist\");\n        IERC20 token1Contract = IERC20(token1.token);\n        IERC20 token2Contract = IERC20(token2.token);\n        require (\n            msg.sender == token2.counterpart ||\n            isTREXAgent(token1.token, msg.sender) ||\n            isTREXAgent(token2.token, msg.sender)\n            , \"transfer has to be done by the counterpart or by owner\");\n        require(\n            token2Contract.balanceOf(token2.counterpart) >= token2.amount\n            , \"Not enough tokens in balance\");\n        require(\n            token2Contract.allowance(token2.counterpart, address(this)) >= token2.amount\n            , \"not enough allowance to transfer\");\n        TxFees memory fees = calculateFee(_transferID);\n        if (fees.txFee1 != 0) {\n            token1Contract.transferFrom(token1.counterpart, token2.counterpart, (token1.amount - fees.txFee1));\n            token1Contract.transferFrom(token1.counterpart, fees.fee1Wallet, fees.txFee1);\n        }\n        if (fees.txFee1 == 0) {\n            token1Contract.transferFrom(token1.counterpart, token2.counterpart, token1.amount);\n        }\n        if (fees.txFee2 != 0) {\n            token2Contract.transferFrom(token2.counterpart, token1.counterpart, (token2.amount - fees.txFee2));\n            token2Contract.transferFrom(token2.counterpart, fees.fee2Wallet, fees.txFee2);\n        }\n        if (fees.txFee2 == 0) {\n            token2Contract.transferFrom(token2.counterpart, token1.counterpart, token2.amount);\n        }\n        delete token1ToDeliver[_transferID];\n        delete token2ToDeliver[_transferID];\n        emit DVDTransferExecuted(_transferID);\n    }\n\n    /**\n     *  @dev delete a pending DVD transfer that was previously initiated\n     *  through the `initiateDVDTransfer` function from the pool\n     *  @param _transferID the DVD transfer identifier as calculated through\n     *  the `calculateTransferID` function for the initiated DVD transfer to delete\n     *  requires `_transferID` to exist (DVD transfer has to be initiated)\n     *  requires that `msg.sender` is the taker or the maker or the `DVDTransferManager` contract\n     *  owner or the TREX agent in case a TREX token is involved in the transfer\n     *  once the `cancelDVDTransfer` is executed the `_transferID` is removed from the pending `_transferID` pool\n     *  emits a `DVDTransferCancelled` event\n     */\n    function cancelDVDTransfer(bytes32 _transferID) external {\n        Delivery memory token1 = token1ToDeliver[_transferID];\n        Delivery memory token2 = token2ToDeliver[_transferID];\n        require(token1.counterpart != address(0) && token2.counterpart != address(0), \"transfer ID does not exist\");\n        require (\n            msg.sender == token2.counterpart ||\n            msg.sender == token1.counterpart ||\n            msg.sender == owner() ||\n            isTREXAgent(token1.token, msg.sender) ||\n            isTREXAgent(token2.token, msg.sender)\n            , \"you are not allowed to cancel this transfer\");\n        delete token1ToDeliver[_transferID];\n        delete token2ToDeliver[_transferID];\n        emit DVDTransferCancelled(_transferID);\n    }\n\n    /**\n     *  @dev check if `_token` corresponds to a functional TREX token (with identity registry initiated)\n     *  @param _token the address token to check\n     *  the function will try to call `identityRegistry()` on\n     *  the address, which is a getter specific to TREX tokens\n     *  if the call pass and returns an address it means that\n     *  the token is a TREX, otherwise it's not a TREX\n     *  return `true` if the token is a TREX, `false` otherwise\n     */\n    function isTREX(address _token) public view returns (bool) {\n        try IToken(_token).identityRegistry() returns (IIdentityRegistry _ir) {\n            if (address(_ir) != address(0)) {\n                return true;\n            }\n        return false;\n        }\n        catch {\n            return false;\n        }\n    }\n\n    /**\n     *  @dev check if `_user` is a TREX agent of `_token`\n     *  @param _token the address token to check\n     *  @param _user the wallet address\n     *  if `_token` is a TREX token this function will check if `_user` is registered as an agent on it\n     *  return `true` if `_user` is agent of `_token`, return `false` otherwise\n     */\n    function isTREXAgent(address _token, address _user) public view returns (bool) {\n        if (isTREX(_token)){\n            return AgentRole(_token).isAgent(_user);\n        }\n        return false;\n    }\n\n    /**\n     *  @dev check if `_user` is a TREX owner of `_token`\n     *  @param _token the address token to check\n     *  @param _user the wallet address\n     *  if `_token` is a TREX token this function will check if `_user` is registered as an owner on it\n     *  return `true` if `_user` is owner of `_token`, return `false` otherwise\n     */\n    function isTREXOwner(address _token, address _user) public view returns (bool) {\n        if (isTREX(_token)){\n            return Ownable(_token).owner() == _user;\n        }\n        return false;\n    }\n\n    /**\n     *  @dev calculates the fees to apply to a specific transfer depending\n     *  on the fees applied to the parity used in the transfer\n     *  @param _transferID the DVD transfer identifier as calculated through the\n     *  `calculateTransferID` function for the transfer to calculate fees on\n     *  requires `_transferID` to exist (DVD transfer has to be initiated)\n     *  returns the fees to apply on each leg of the transfer in the form of a `TxFees` struct\n     */\n    function calculateFee(bytes32 _transferID) public view returns(TxFees memory) {\n        TxFees memory fees;\n        Delivery memory token1 = token1ToDeliver[_transferID];\n        Delivery memory token2 = token2ToDeliver[_transferID];\n        require(\n            token1.counterpart != address(0) && token2.counterpart != address(0)\n        , \"transfer ID does not exist\");\n        bytes32 parity = calculateParity(token1.token, token2.token);\n        Fee memory feeDetails = fee[parity];\n        if (feeDetails.token1Fee != 0 || feeDetails.token2Fee != 0 ){\n            uint _txFee1 =\n            (token1.amount * feeDetails.token1Fee * 10**(feeDetails.feeBase - 2)) / (10**feeDetails.feeBase);\n            uint _txFee2 =\n            (token2.amount * feeDetails.token2Fee * 10**(feeDetails.feeBase - 2)) / (10**feeDetails.feeBase);\n            fees.txFee1 = _txFee1;\n            fees.txFee2 = _txFee2;\n            fees.fee1Wallet = feeDetails.fee1Wallet;\n            fees.fee2Wallet = feeDetails.fee2Wallet;\n            return fees;\n        }\n        else {\n            fees.txFee1 = 0;\n            fees.txFee2 = 0;\n            fees.fee1Wallet = address(0);\n            fees.fee2Wallet = address(0);\n            return fees;\n        }\n    }\n\n    /**\n     *  @dev calculates the parity byte signature\n     *  @param _token1 the address of the base token\n     *  @param _token2 the address of the counterpart token\n     *  return the byte signature of the parity\n     */\n    function calculateParity (address _token1, address _token2) public pure returns (bytes32) {\n        bytes32 parity = keccak256(abi.encode(_token1, _token2));\n        return parity;\n    }\n\n    /**\n     *  @dev calculates the transferID depending on DVD transfer parameters\n     *  @param _nonce the nonce of the transfer on the smart contract\n     *  @param _maker the address of the DVD transfer maker (initiator of the transfer)\n     *  @param _token1 the address of the token that the maker is providing\n     *  @param _token1Amount the amount of tokens `_token1` provided by the maker\n     *  @param _taker the address of the DVD transfer taker (executor of the transfer)\n     *  @param _token2 the address of the token that the taker is providing\n     *  @param _token2Amount the amount of tokens `_token2` provided by the taker\n     *  return the identifier of the DVD transfer as a byte signature\n     */\n    function calculateTransferID (\n        uint256 _nonce,\n        address _maker,\n        address _token1,\n        uint256 _token1Amount,\n        address _taker,\n        address _token2,\n        uint256 _token2Amount\n    ) public pure returns (bytes32){\n        bytes32 transferID = keccak256(abi.encode(\n                _nonce, _maker, _token1, _token1Amount, _taker, _token2, _token2Amount\n            ));\n        return transferID;\n    }\n}\n"
    },
    "contracts/factory/ITREXFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.17;\n\ninterface ITREXFactory {\n\n    /// Types\n\n    struct TokenDetails {\n        // address of the owner of all contracts\n        address owner;\n        // name of the token\n        string name;\n        // symbol / ticker of the token\n        string symbol;\n        // decimals of the token (can be between 0 and 18)\n        uint8 decimals;\n        // identity registry storage address\n        // set it to ZERO address if you want to deploy a new storage\n        // if an address is provided, please ensure that the factory is set as owner of the contract\n        address irs;\n        // ONCHAINID of the token\n        // solhint-disable-next-line var-name-mixedcase\n        address ONCHAINID;\n        // list of agents of the identity registry (can be set to an AgentManager contract)\n        address[] irAgents;\n        // list of agents of the token\n        address[] tokenAgents;\n        // modules to bind to the compliance, indexes are corresponding to the settings callData indexes\n        // if a module doesn't require settings, it can be added at the end of the array, at index > settings.length\n        address[] complianceModules;\n        // settings calls for compliance modules\n        bytes[] complianceSettings;\n    }\n\n    struct ClaimDetails {\n        // claim topics required\n        uint256[] claimTopics;\n        // trusted issuers addresses\n        address[] issuers;\n        // claims that issuers are allowed to emit, by index, index corresponds to the `issuers` indexes\n        uint256[][] issuerClaims;\n    }\n\n    /// events\n\n    /// event emitted whenever a single contract is deployed by the factory\n    event Deployed(address indexed _addr);\n\n    /// event emitted when the Identity Factory is set\n    event IdFactorySet(address _idFactory);\n\n    /// event emitted when the implementation authority of the factory contract is set\n    event ImplementationAuthoritySet(address _implementationAuthority);\n\n    /// event emitted by the factory when a full suite of T-REX contracts is deployed\n    event TREXSuiteDeployed(address indexed _token, address _ir, address _irs, address _tir, address _ctr, address\n    _mc, string indexed _salt);\n\n    /// functions\n\n    /**\n     *  @dev setter for implementation authority contract address\n     *  the implementation authority contract contains the addresses of all implementation contracts\n     *  the proxies created by the factory will use the different implementations available\n     *  in the implementation authority contract\n     *  Only owner can call.\n     *  emits `ImplementationAuthoritySet` event\n     *  @param _implementationAuthority The address of the implementation authority smart contract\n     */\n    function setImplementationAuthority(address _implementationAuthority) external;\n\n    /**\n     *  @dev setter for identity factory contract address\n     *  the identity factory contract is used by the TREX Factory to deploy the ONCHAINID\n     *  of the token in case the ONCHAINID is not specified\n     *  Only owner can call.\n     *  emits `IdFactorySet` event\n     *  @param _idFactory The address of the identity factory contract\n     */\n    function setIdFactory(address _idFactory) external;\n\n    /**\n     *  @dev function used to deploy a new TREX token and set all the parameters as required by the issuer paperwork\n     *  this function will deploy and set the contracts as follow :\n     *  Token : deploy the token contract (proxy) and set the name, symbol, ONCHAINID, decimals, owner, agents,\n     *  IR address , Compliance address\n     *  Identity Registry : deploy the IR contract (proxy) and set the owner, agents,\n     *  IRS address, TIR address, CTR address\n     *  IRS : deploy IRS contract (proxy) if required (address set as 0 in the TokenDetails, bind IRS to IR, set owner\n     *  CTR : deploy CTR contract (proxy), set required claims, set owner\n     *  TIR : deploy TIR contract (proxy), set trusted issuers, set owner\n     *  Compliance: deploy modular compliance, bind with token, add modules, set modules parameters, set owner\n     *  All contracts are deployed using CREATE2 opcode, and therefore are deployed at a predetermined address\n     *  The address can be the same on all EVM blockchains as long as the factory address is the same as well\n     *  Only owner can call.\n     *  emits `TREXSuiteDeployed` event\n     *  @param _salt the salt used to make the contracts deployments with CREATE2\n     *  @param _tokenDetails The details of the token to deploy (see struct TokenDetails for more details)\n     *  @param _claimDetails The details of the claims and claim issuers (see struct ClaimDetails for more details)\n     *  cannot add more than 5 agents on IR and 5 agents on Token\n     *  cannot add more than 5 claim topics required and more than 5 trusted issuers\n     *  cannot add more than 30 compliance settings transactions\n     */\n    function deployTREXSuite(\n        string memory _salt,\n        TokenDetails calldata _tokenDetails,\n        ClaimDetails calldata _claimDetails) external;\n\n    /**\n     *  @dev function that can be used to recover the ownership of contracts owned by the factory\n     *  typically used for IRS contracts owned by the factory (ownership of IRS is mandatory to call bind function)\n     *  @param _contract The smart contract address\n     *  @param _newOwner The address to transfer ownership to\n     *  Only owner can call.\n     */\n    function recoverContractOwnership(address _contract, address _newOwner) external;\n\n    /**\n     *  @dev getter for implementation authority address\n     */\n    function getImplementationAuthority() external view returns(address);\n\n    /**\n     *  @dev getter for identity factory address\n     */\n    function getIdFactory() external view returns(address);\n\n    /**\n     *  @dev getter for token address corresponding to salt string\n     *  @param _salt The salt string that was used to deploy the token\n     */\n    function getToken(string calldata _salt) external view returns(address);\n}\n"
    },
    "contracts/factory/ITREXGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.17;\n\nimport \"./ITREXFactory.sol\";\n\ninterface ITREXGateway {\n\n    /// Types\n\n    struct Fee {\n        // amount of fee tokens to pay for 1 deployment\n        uint256 fee;\n        // address of the token used to pay fees\n        address feeToken;\n        // address collecting fees\n        address feeCollector;\n    }\n\n    /// events\n\n    /// event emitted when the _factory variable is set/modified\n    event FactorySet(address indexed factory);\n\n    /// event emitted when the public deployment status is set/modified\n    event PublicDeploymentStatusSet(bool indexed publicDeploymentStatus);\n\n    /// event emitted when the deployment fees details are set/modified\n    event DeploymentFeeSet(uint256 indexed fee, address indexed feeToken, address indexed feeCollector);\n\n    /// event emitted when the deployment fees are enabled/disabled\n    event DeploymentFeeEnabled(bool indexed isEnabled);\n\n    /// event emitted when an address is flagged as a deployer\n    event DeployerAdded(address indexed deployer);\n\n    /// event emitted when a deployer address loses deployment privileges\n    event DeployerRemoved(address indexed deployer);\n\n    /// event emitted when a discount on deployment fees is granted for an address\n    event FeeDiscountApplied(address indexed deployer, uint16 discount);\n\n    /// event emitted whenever a TREX token has been deployed by the TREX factory through the use of the Gateway\n    event GatewaySuiteDeploymentProcessed(address indexed requester, address intendedOwner, uint256 feeApplied);\n\n    /// Functions\n\n    /**\n    * @notice Sets the factory contract address used for deploying TREX smart contracts.\n    * @dev Only the owner can call this method. Emits a `FactorySet` event upon successful execution.\n    * Reverts if the provided factory address is zero.\n    * @param factory The address of the new factory contract.\n    * emits FactorySet When the new factory address is set.\n    */\n    function setFactory(address factory) external;\n\n    /**\n    * @notice Sets the status for public deployments of TREX contracts.\n    * @dev Enables or disables public deployments. If the function call doesn't change the current status, it will revert.\n    * Only the owner can call this method. Emits a `PublicDeploymentStatusSet` event upon successful execution.\n    * Reverts with `PublicDeploymentAlreadyEnabled` if trying to enable when already enabled.\n    * Reverts with `PublicDeploymentAlreadyDisabled` if trying to disable when already disabled.\n    * @param _isEnabled Determines if public deployments are enabled (`true`) or disabled (`false`).\n    * emits PublicDeploymentStatusSet When the new public deployment status is set.\n    */\n    function setPublicDeploymentStatus(bool _isEnabled) external;\n\n    /**\n    * @notice Transfers the ownership of the Factory contract.\n    * @dev Only the owner can call this method. Utilizes the `transferOwnership` function of the Ownable pattern.\n    * @param _newOwner Address of the new owner for the Factory contract.\n    */\n    function transferFactoryOwnership(address _newOwner) external;\n\n    /**\n    * @notice Toggles the deployment fee status for TREX contracts.\n    * @dev Enables or disables the deployment fees. If the function call doesn't change the current status, it will revert.\n    * Only the owner can call this method. Emits a `DeploymentFeeEnabled` event upon successful execution.\n    * Reverts with `DeploymentFeesAlreadyEnabled` if trying to enable when already enabled.\n    * Reverts with `DeploymentFeesAlreadyDisabled` if trying to disable when already disabled.\n    * @param _isEnabled Determines if deployment fees are enabled (`true`) or disabled (`false`).\n    * emits DeploymentFeeEnabled When the new deployment fee status is set.\n    */\n    function enableDeploymentFee(bool _isEnabled) external;\n\n    /**\n    * @notice Sets the deployment fee details for TREX contracts.\n    * @dev Only the owner can call this method. The function establishes the amount,\n    * token type, and collector address for the deployment fee.\n    * Reverts if either the provided `_feeToken` or `_feeCollector` address is zero.\n    * Emits a `DeploymentFeeSet` event upon successful execution.\n    * @param _fee The amount to be set as the deployment fee.\n    * @param _feeToken Address of the token used for the deployment fee.\n    * @param _feeCollector Address that will collect the deployment fees.\n    * emits DeploymentFeeSet Indicates that the deployment fee details have been successfully set.\n    */\n    function setDeploymentFee(uint256 _fee, address _feeToken, address _feeCollector) external;\n\n    /**\n    * @notice Adds an address to the list of approved deployers.\n    * @dev Only an admin (owner or agent) can call this method. If the provided `deployer` address\n    * is already an approved deployer, the function will revert.\n    * Emits a `DeployerAdded` event upon successful addition.\n    * @param deployer Address to be added to the list of approved deployers.\n    * emits DeployerAdded Indicates that a new deployer address has been successfully added.\n    */\n    function addDeployer(address deployer) external;\n\n    /**\n    * @notice Adds multiple addresses to the list of approved deployers in a single transaction.\n    * @dev This function allows batch addition of deployers. It can only be called by an admin (owner or agent).\n    * The function will revert if the length of the `deployers` array is more than 500 to prevent excessive gas consumption.\n    * It will also revert if any address in the `deployers` array is already an approved deployer.\n    * Emits a `DeployerAdded` event for each successfully added deployer.\n    * @param deployers An array of addresses to be added to the list of approved deployers.\n    */\n    function batchAddDeployer(address[] calldata deployers) external;\n\n    /**\n    * @notice Removes an address from the list of approved deployers.\n    * @dev Only an admin (owner or agent) can call this method. If the provided `deployer` address\n    * is not an approved deployer, the function will revert.\n    * Emits a `DeployerRemoved` event upon successful removal.\n    * @param deployer Address to be removed from the list of approved deployers.\n    * emits DeployerRemoved Indicates that a deployer address has been successfully removed.\n    */\n    function removeDeployer(address deployer) external;\n\n    /**\n    * @notice Removes multiple addresses from the list of approved deployers in a single transaction.\n    * @dev This function allows batch removal of deployers. It can only be called by an admin (owner or agent).\n    * The function will revert if the length of the `deployers` array is more than 500 to prevent excessive gas consumption.\n    * It will also revert if any address in the `deployers` array is not an approved deployer.\n    * Emits a `DeployerRemoved` event for each successfully removed deployer.\n    * @param deployers An array of addresses to be removed from the list of approved deployers.\n    */\n    function batchRemoveDeployer(address[] calldata deployers) external;\n\n    /**\n    * @notice Applies a fee discount to a specific deployer's address.\n    * @dev Only an admin (owner or agent) can call this method.\n    * The fee discount is expressed per 10,000 (10000 = 100%, 1000 = 10%, etc.).\n    * If the discount exceeds 10000, the function will revert. Emits a `FeeDiscountApplied` event upon successful application.\n    * @param deployer Address of the deployer to which the discount will be applied.\n    * @param discount The discount rate, expressed per 10,000.\n    * emits FeeDiscountApplied Indicates that a fee discount has been successfully applied to a deployer.\n    */\n    function applyFeeDiscount(address deployer, uint16 discount) external;\n\n    /**\n    * @notice Applies fee discounts to multiple deployers in a single transaction.\n    * @dev Allows batch application of fee discounts. Can only be called by an admin (owner or agent).\n    * The function will revert if the length of the `deployers` array exceeds 500, to prevent excessive gas consumption.\n    * Each discount in the `discounts` array is expressed per 10,000 (10000 = 100%, 1000 = 10%, etc.).\n    * The function will also revert if any discount in the `discounts` array exceeds 10000.\n    * Emits a `FeeDiscountApplied` event for each successfully applied discount.\n    * @param deployers An array of deployer addresses to which the discounts will be applied.\n    * @param discounts An array of discount rates, each corresponding\n    * to a deployer in the `deployers` array, expressed per 10,000.\n    */\n    function batchApplyFeeDiscount(address[] calldata deployers, uint16[] calldata discounts) external;\n\n    /**\n    * @notice Deploys a TREX suite of contracts using provided token and claim details.\n    * @dev This function performs multiple checks before deploying:\n    * 1. If public deployments are disabled, only approved deployers can execute this function.\n    * 2. If public deployments are enabled, an external entity can deploy only on its\n    *    behalf and not for other addresses unless it's an approved deployer.\n    *\n    * If deployment fees are enabled and applicable (after considering any discounts for the deployer),\n    * the fee is collected from the deployer's address.\n    *\n    * The actual TREX suite deployment is then triggered via the factory contract,\n    * and a unique salt is derived from the token owner's address and the token name for the deployment.\n    *\n    * @param _tokenDetails Struct containing details necessary for token deployment such as name, symbol, etc.\n    * @param _claimDetails Struct containing details related to claims for the token.\n    * emits GatewaySuiteDeploymentProcessed This event is emitted post-deployment, indicating the deployer, the token\n    * owner, and the fee applied.\n    */\n    function deployTREXSuite(\n        ITREXFactory.TokenDetails memory _tokenDetails,\n        ITREXFactory.ClaimDetails memory _claimDetails\n    ) external;\n\n    /**\n    * @notice Deploys multiple TREX suites of contracts in a single transaction using provided arrays of token and claim details.\n    * @dev This batch function allows deploying up to 5 TREX suites at once.\n    * It performs the same checks as `deployTREXSuite` for each suite:\n    * 1. If public deployments are disabled, only approved deployers can execute this function.\n    * 2. If public deployments are enabled, an external entity can deploy only on its behalf\n    * and not for other addresses unless it's an approved deployer.\n    *\n    * Deployment fees, if enabled and applicable, are collected for each suite deployment based on the deployer's address.\n    *\n    * Each TREX suite deployment is triggered via the factory contract, with a\n    * unique salt derived from the token owner's address and token name.\n    *\n    * @param _tokenDetails Array of structs, each containing details necessary for token deployment such as name, symbol, etc.\n    * @param _claimDetails Array of structs, each containing details related to claims for the respective token.\n    * reverts with BatchMaxLengthExceeded if the length of either `_tokenDetails` or `_claimDetails` arrays exceeds 5.\n    * reverts with PublicDeploymentsNotAllowed if public deployments are disabled and the caller is not an approved\n    * deployer.\n    * reverts with  PublicCannotDeployOnBehalf if public deployments are enabled and the caller attempts to deploy on\n    * behalf of a different address without being an approved deployer.\n    * emits GatewaySuiteDeploymentProcessed This event is emitted for each deployed suite, indicating\n    * the deployer, the token owner, and any fee applied.\n    */\n    function batchDeployTREXSuite(\n        ITREXFactory.TokenDetails[] memory _tokenDetails,\n        ITREXFactory.ClaimDetails[] memory _claimDetails) external;\n\n    /**\n    * @notice Retrieves the current public deployment status.\n    * @dev Indicates whether public deployments of TREX contracts are currently allowed.\n    * @return A boolean value representing the public deployment status: `true` if\n    * public deployments are allowed, `false` otherwise.\n    */\n    function getPublicDeploymentStatus() external view returns(bool);\n\n    /**\n    * @notice Retrieves the address of the current Factory contract.\n    * @dev The Factory contract is responsible for deploying TREX contracts. This function allows querying its address.\n    * @return Address of the current Factory contract.\n    */\n    function getFactory() external view returns(address);\n\n    /**\n    * @notice Retrieves the current deployment fee details.\n    * @dev This function provides details about the deployment fee, including the amount, token type, and the collector address.\n    * @return Fee struct containing:\n    *   - `fee`: The amount to be paid as the deployment fee.\n    *   - `feeToken`: Address of the token used for the deployment fee.\n    *   - `feeCollector`: Address that collects the deployment fees.\n    */\n    function getDeploymentFee() external view returns(Fee memory);\n\n    /**\n    * @notice Checks if the deployment fee is currently enabled.\n    * @dev Provides a way to determine if deployers are currently required to pay a fee when deploying TREX contracts.\n    * @return A boolean value indicating whether the deployment fee is enabled (`true`) or disabled (`false`).\n    */\n    function isDeploymentFeeEnabled() external view returns(bool);\n\n    /**\n    * @notice Checks if the provided address is an approved deployer.\n    * @dev Determines if a specific address has permissions to deploy TREX contracts.\n    * @param deployer Address to be checked for deployer permissions.\n    * @return A boolean value indicating whether the provided address is an approved deployer (`true`) or not (`false`).\n    */\n    function isDeployer(address deployer) external view returns(bool);\n\n    /**\n    * @notice Calculates the deployment fee for a given deployer after accounting for any discounts.\n    * @dev The fee discount, if any, is expressed per 10,000 (e.g., 10000 = 100%, 1000 = 10%, etc.).\n    * The final fee is derived by subtracting the discount amount from the original fee.\n    * @param deployer Address of the deployer for which the fee will be calculated.\n    * @return The calculated fee after accounting for potential discounts.\n    */\n    function calculateFee(address deployer) external view returns(uint256);\n}\n"
    },
    "contracts/factory/TREXFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.17;\n\nimport \"../roles/AgentRole.sol\";\nimport \"../token/IToken.sol\";\nimport \"../registry/interface/IClaimTopicsRegistry.sol\";\nimport \"../registry/interface/IIdentityRegistry.sol\";\nimport \"../compliance/modular/IModularCompliance.sol\";\nimport \"../registry/interface/ITrustedIssuersRegistry.sol\";\nimport \"../registry/interface/IIdentityRegistryStorage.sol\";\nimport \"../proxy/authority/ITREXImplementationAuthority.sol\";\nimport \"../proxy/TokenProxy.sol\";\nimport \"../proxy/ClaimTopicsRegistryProxy.sol\";\nimport \"../proxy/IdentityRegistryProxy.sol\";\nimport \"../proxy/IdentityRegistryStorageProxy.sol\";\nimport \"../proxy/TrustedIssuersRegistryProxy.sol\";\nimport \"../proxy/ModularComplianceProxy.sol\";\nimport \"./ITREXFactory.sol\";\nimport \"@onchain-id/solidity/contracts/factory/IIdFactory.sol\";\n\n\ncontract TREXFactory is ITREXFactory, Ownable {\n\n    /// the address of the implementation authority contract used in the tokens deployed by the factory\n    address private _implementationAuthority;\n\n    /// the address of the Identity Factory used to deploy token OIDs\n    address private _idFactory;\n\n    /// mapping containing info about the token contracts corresponding to salt already used for CREATE2 deployments\n    mapping(string => address) public tokenDeployed;\n\n    /// constructor is setting the implementation authority and the Identity Factory of the TREX factory\n    constructor(address implementationAuthority_, address idFactory_) {\n        setImplementationAuthority(implementationAuthority_);\n        setIdFactory(idFactory_);\n    }\n\n    /**\n     *  @dev See {ITREXFactory-deployTREXSuite}.\n     */\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function deployTREXSuite(string memory _salt, TokenDetails calldata _tokenDetails, ClaimDetails calldata\n        _claimDetails)\n    external override onlyOwner {\n        require(tokenDeployed[_salt] == address(0)\n        , \"token already deployed\");\n        require((_claimDetails.issuers).length == (_claimDetails.issuerClaims).length\n        , \"claim pattern not valid\");\n        require((_claimDetails.issuers).length <= 5\n        , \"max 5 claim issuers at deployment\");\n        require((_claimDetails.claimTopics).length <= 5\n        , \"max 5 claim topics at deployment\");\n        require((_tokenDetails.irAgents).length <= 5 && (_tokenDetails.tokenAgents).length <= 5\n        , \"max 5 agents at deployment\");\n        require((_tokenDetails.complianceModules).length <= 30\n        , \"max 30 module actions at deployment\");\n        require((_tokenDetails.complianceModules).length >= (_tokenDetails.complianceSettings).length\n        , \"invalid compliance pattern\");\n\n        ITrustedIssuersRegistry tir = ITrustedIssuersRegistry(_deployTIR(_salt, _implementationAuthority));\n        IClaimTopicsRegistry ctr = IClaimTopicsRegistry(_deployCTR(_salt, _implementationAuthority));\n        IModularCompliance mc = IModularCompliance(_deployMC(_salt, _implementationAuthority));\n        IIdentityRegistryStorage irs;\n        if (_tokenDetails.irs == address(0)) {\n            irs = IIdentityRegistryStorage(_deployIRS(_salt, _implementationAuthority));\n        }\n        else {\n            irs = IIdentityRegistryStorage(_tokenDetails.irs);\n        }\n        IIdentityRegistry ir = IIdentityRegistry(_deployIR(_salt, _implementationAuthority, address(tir),\n            address(ctr), address(irs)));\n        IToken token = IToken(_deployToken\n            (\n                _salt,\n                _implementationAuthority,\n                address(ir),\n                address(mc),\n                _tokenDetails.name,\n                _tokenDetails.symbol,\n                _tokenDetails.decimals,\n                _tokenDetails.ONCHAINID\n            ));\n        if(_tokenDetails.ONCHAINID == address(0)) {\n            address _tokenID = IIdFactory(_idFactory).createTokenIdentity(address(token), _tokenDetails.owner, _salt);\n            token.setOnchainID(_tokenID);\n        }\n        for (uint256 i = 0; i < (_claimDetails.claimTopics).length; i++) {\n            ctr.addClaimTopic(_claimDetails.claimTopics[i]);\n        }\n        for (uint256 i = 0; i < (_claimDetails.issuers).length; i++) {\n            tir.addTrustedIssuer(IClaimIssuer((_claimDetails).issuers[i]), _claimDetails.issuerClaims[i]);\n        }\n        irs.bindIdentityRegistry(address(ir));\n        AgentRole(address(ir)).addAgent(address(token));\n        for (uint256 i = 0; i < (_tokenDetails.irAgents).length; i++) {\n            AgentRole(address(ir)).addAgent(_tokenDetails.irAgents[i]);\n        }\n        for (uint256 i = 0; i < (_tokenDetails.tokenAgents).length; i++) {\n            AgentRole(address(token)).addAgent(_tokenDetails.tokenAgents[i]);\n        }\n        for (uint256 i = 0; i < (_tokenDetails.complianceModules).length; i++) {\n            if (!mc.isModuleBound(_tokenDetails.complianceModules[i])) {\n                mc.addModule(_tokenDetails.complianceModules[i]);\n            }\n            if (i < (_tokenDetails.complianceSettings).length) {\n                mc.callModuleFunction(_tokenDetails.complianceSettings[i], _tokenDetails.complianceModules[i]);\n            }\n        }\n        tokenDeployed[_salt] = address(token);\n        (Ownable(address(token))).transferOwnership(_tokenDetails.owner);\n        (Ownable(address(ir))).transferOwnership(_tokenDetails.owner);\n        (Ownable(address(tir))).transferOwnership(_tokenDetails.owner);\n        (Ownable(address(ctr))).transferOwnership(_tokenDetails.owner);\n        (Ownable(address(mc))).transferOwnership(_tokenDetails.owner);\n        emit TREXSuiteDeployed(address(token), address(ir), address(irs), address(tir), address(ctr), address(mc), _salt);\n    }\n\n    /**\n     *  @dev See {ITREXFactory-recoverContractOwnership}.\n     */\n    function recoverContractOwnership(address _contract, address _newOwner) external override onlyOwner {\n        (Ownable(_contract)).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev See {ITREXFactory-getImplementationAuthority}.\n     */\n    function getImplementationAuthority() external override view returns(address) {\n        return _implementationAuthority;\n    }\n\n    /**\n     *  @dev See {ITREXFactory-getIdFactory}.\n     */\n    function getIdFactory() external override view returns(address) {\n        return _idFactory;\n    }\n\n    /**\n     *  @dev See {ITREXFactory-getToken}.\n     */\n    function getToken(string calldata _salt) external override view returns(address) {\n        return tokenDeployed[_salt];\n    }\n\n    /**\n     *  @dev See {ITREXFactory-setImplementationAuthority}.\n     */\n    function setImplementationAuthority(address implementationAuthority_) public override onlyOwner {\n        require(implementationAuthority_ != address(0), \"invalid argument - zero address\");\n        // should not be possible to set an implementation authority that is not complete\n        require(\n            (ITREXImplementationAuthority(implementationAuthority_)).getTokenImplementation() != address(0)\n            && (ITREXImplementationAuthority(implementationAuthority_)).getCTRImplementation() != address(0)\n            && (ITREXImplementationAuthority(implementationAuthority_)).getIRImplementation() != address(0)\n            && (ITREXImplementationAuthority(implementationAuthority_)).getIRSImplementation() != address(0)\n            && (ITREXImplementationAuthority(implementationAuthority_)).getMCImplementation() != address(0)\n            && (ITREXImplementationAuthority(implementationAuthority_)).getTIRImplementation() != address(0),\n            \"invalid Implementation Authority\");\n        _implementationAuthority = implementationAuthority_;\n        emit ImplementationAuthoritySet(implementationAuthority_);\n    }\n\n    /**\n     *  @dev See {ITREXFactory-setIdFactory}.\n     */\n    function setIdFactory(address idFactory_) public override onlyOwner {\n        require(idFactory_ != address(0), \"invalid argument - zero address\");\n        _idFactory = idFactory_;\n        emit IdFactorySet(idFactory_);\n    }\n\n    /// deploy function with create2 opcode call\n    /// returns the address of the contract created\n    function _deploy(string memory salt, bytes memory bytecode) private returns (address) {\n        bytes32 saltBytes = bytes32(keccak256(abi.encodePacked(salt)));\n        address addr;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let encoded_data := add(0x20, bytecode) // load initialization code.\n            let encoded_size := mload(bytecode)     // load init code's length.\n            addr := create2(0, encoded_data, encoded_size, saltBytes)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n        emit Deployed(addr);\n        return addr;\n    }\n\n    /// function used to deploy a trusted issuers registry using CREATE2\n    function _deployTIR\n    (\n        string memory _salt,\n        address implementationAuthority_\n    ) private returns (address){\n        bytes memory _code = type(TrustedIssuersRegistryProxy).creationCode;\n        bytes memory _constructData = abi.encode(implementationAuthority_);\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\n        return _deploy(_salt, bytecode);\n    }\n\n    /// function used to deploy a claim topics registry using CREATE2\n    function  _deployCTR\n    (\n        string memory _salt,\n        address implementationAuthority_\n    ) private returns (address) {\n        bytes memory _code = type(ClaimTopicsRegistryProxy).creationCode;\n        bytes memory _constructData = abi.encode(implementationAuthority_);\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\n        return _deploy(_salt, bytecode);\n    }\n\n    /// function used to deploy modular compliance contract using CREATE2\n    function  _deployMC\n    (\n        string memory _salt,\n        address implementationAuthority_\n    ) private returns (address) {\n        bytes memory _code = type(ModularComplianceProxy).creationCode;\n        bytes memory _constructData = abi.encode(implementationAuthority_);\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\n        return _deploy(_salt, bytecode);\n    }\n\n    /// function used to deploy an identity registry storage using CREATE2\n    function _deployIRS\n    (\n        string memory _salt,\n        address implementationAuthority_\n    ) private returns (address) {\n        bytes memory _code = type(IdentityRegistryStorageProxy).creationCode;\n        bytes memory _constructData = abi.encode(implementationAuthority_);\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\n        return _deploy(_salt, bytecode);\n    }\n\n    /// function used to deploy an identity registry using CREATE2\n    function _deployIR\n    (\n        string memory _salt,\n        address implementationAuthority_,\n        address _trustedIssuersRegistry,\n        address _claimTopicsRegistry,\n        address _identityStorage\n    ) private returns (address) {\n        bytes memory _code = type(IdentityRegistryProxy).creationCode;\n        bytes memory _constructData = abi.encode\n        (\n            implementationAuthority_,\n            _trustedIssuersRegistry,\n            _claimTopicsRegistry,\n            _identityStorage\n        );\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\n        return _deploy(_salt, bytecode);\n    }\n\n    /// function used to deploy a token using CREATE2\n    function _deployToken\n    (\n        string memory _salt,\n        address implementationAuthority_,\n        address _identityRegistry,\n        address _compliance,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        address _onchainId\n    ) private returns (address) {\n        bytes memory _code = type(TokenProxy).creationCode;\n        bytes memory _constructData = abi.encode\n        (\n            implementationAuthority_,\n            _identityRegistry,\n            _compliance,\n            _name,\n            _symbol,\n            _decimals,\n            _onchainId\n        );\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\n        return _deploy(_salt, bytecode);\n    }\n}\n"
    },
    "contracts/factory/TREXGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\npragma solidity 0.8.17;\n\nimport \"./ITREXGateway.sol\";\nimport \"../roles/AgentRole.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// A required parameter was set to the Zero address.\nerror ZeroAddress();\n\n/// The Public Deployment Status is already set properly\nerror PublicDeploymentAlreadyEnabled();\n\n/// The Public Deployment Status is already set properly\nerror PublicDeploymentAlreadyDisabled();\n\n/// The Deployment fees are already enabled\nerror DeploymentFeesAlreadyEnabled();\n\n/// The Deployment fees are already disabled\nerror DeploymentFeesAlreadyDisabled();\n\n/// The address is already a deployer\nerror DeployerAlreadyExists(address deployer);\n\n/// The address is not a deployer\nerror DeployerDoesNotExist(address deployer);\n\n/// Cannot deploy if not deployer when public deployment disabled\nerror PublicDeploymentsNotAllowed();\n\n/// Public deployers can only deploy for themselves\nerror PublicCannotDeployOnBehalf();\n\n/// Discount cannot be bigger than 10000 (100%)\nerror DiscountOutOfRange();\n\n/// Only Owner or Agent can call\nerror OnlyAdminCall();\n\n/// Batch Size is too big, could run out of gas\nerror BatchMaxLengthExceeded(uint16 lengthLimit);\n\n\ncontract TREXGateway is ITREXGateway, AgentRole {\n\n    /// address of the TREX Factory that is managed by the Gateway\n    address private _factory;\n\n    /// public deployment status variable\n    bool private _publicDeploymentStatus;\n\n    /// deployment fee details\n    Fee private _deploymentFee;\n\n    /// deployment fees enabling variable\n    bool private _deploymentFeeEnabled;\n\n    /// mapping containing all deployer addresses\n    mapping(address => bool) private _deployers;\n\n    /// mapping for deployment discounts on fees\n    mapping(address => uint16) private _feeDiscount;\n\n    /// constructor of the contract, setting up the factory address and\n    /// the public deployment status\n    constructor(address factory, bool publicDeploymentStatus) {\n        _factory = factory;\n        _publicDeploymentStatus = publicDeploymentStatus;\n        emit FactorySet(factory);\n        emit PublicDeploymentStatusSet(publicDeploymentStatus);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-setFactory}.\n     */\n    function setFactory(address factory) external override onlyOwner {\n        if(factory == address(0)) {\n            revert ZeroAddress();\n        }\n        _factory = factory;\n        emit FactorySet(factory);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-setPublicDeploymentStatus}.\n     */\n    function setPublicDeploymentStatus(bool _isEnabled) external override onlyOwner {\n        if(_isEnabled == _publicDeploymentStatus && _isEnabled == true) {\n            revert PublicDeploymentAlreadyEnabled();\n        }\n        if(_isEnabled == _publicDeploymentStatus && _isEnabled == false) {\n            revert PublicDeploymentAlreadyDisabled();\n        }\n        _publicDeploymentStatus = _isEnabled;\n        emit PublicDeploymentStatusSet(_isEnabled);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-transferFactoryOwnership}.\n     */\n    function transferFactoryOwnership(address _newOwner) external override onlyOwner {\n        Ownable(_factory).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-enableDeploymentFee}.\n     */\n    function enableDeploymentFee(bool _isEnabled) external override onlyOwner {\n        if(_isEnabled == _deploymentFeeEnabled && _isEnabled == true) {\n            revert DeploymentFeesAlreadyEnabled();\n        }\n        if(_isEnabled == _deploymentFeeEnabled && _isEnabled == false) {\n            revert DeploymentFeesAlreadyDisabled();\n        }\n        _deploymentFeeEnabled = _isEnabled;\n        emit DeploymentFeeEnabled(_isEnabled);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-setDeploymentFee}.\n     */\n    function setDeploymentFee(uint256 _fee, address _feeToken, address _feeCollector) external override onlyOwner {\n        if(_feeToken == address(0) || _feeCollector == address(0)) {\n            revert ZeroAddress();\n        }\n        _deploymentFee.fee = _fee;\n        _deploymentFee.feeToken = _feeToken;\n        _deploymentFee.feeCollector = _feeCollector;\n        emit DeploymentFeeSet(_fee, _feeToken, _feeCollector);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-batchAddDeployer}.\n     */\n    function batchAddDeployer(address[] calldata deployers) external override {\n        if(!isAgent(msg.sender) && msg.sender != owner()) {\n            revert OnlyAdminCall();\n        }\n        if(deployers.length > 500) {\n            revert BatchMaxLengthExceeded(500);\n        }\n        for (uint256 i = 0; i < deployers.length; i++) {\n            if(isDeployer(deployers[i])) {\n                revert DeployerAlreadyExists(deployers[i]);\n            }\n            _deployers[deployers[i]] = true;\n            emit DeployerAdded(deployers[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITREXGateway-addDeployer}.\n     */\n    function addDeployer(address deployer) external override {\n        if(!isAgent(msg.sender) && msg.sender != owner()) {\n            revert OnlyAdminCall();\n        }\n        if(isDeployer(deployer)) {\n            revert DeployerAlreadyExists(deployer);\n        }\n        _deployers[deployer] = true;\n        emit DeployerAdded(deployer);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-batchRemoveDeployer}.\n     */\n    function batchRemoveDeployer(address[] calldata deployers) external override {\n        if(!isAgent(msg.sender) && msg.sender != owner()) {\n            revert OnlyAdminCall();\n        }\n        if(deployers.length > 500) {\n            revert BatchMaxLengthExceeded(500);\n        }\n        for (uint256 i = 0; i < deployers.length; i++) {\n            if(!isDeployer(deployers[i])) {\n                revert DeployerDoesNotExist(deployers[i]);\n            }\n            delete _deployers[deployers[i]];\n            emit DeployerRemoved(deployers[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITREXGateway-removeDeployer}.\n     */\n    function removeDeployer(address deployer) external override {\n        if(!isAgent(msg.sender) && msg.sender != owner()) {\n            revert OnlyAdminCall();\n        }\n        if(!isDeployer(deployer)) {\n            revert DeployerDoesNotExist(deployer);\n        }\n        delete _deployers[deployer];\n        emit DeployerRemoved(deployer);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-batchApplyFeeDiscount}.\n     */\n    function batchApplyFeeDiscount(address[] calldata deployers, uint16[] calldata discounts) external override {\n        if(!isAgent(msg.sender) && msg.sender != owner()) {\n            revert OnlyAdminCall();\n        }\n        if(deployers.length > 500) {\n            revert BatchMaxLengthExceeded(500);\n        }\n        for (uint256 i = 0; i < deployers.length; i++) {\n            if(discounts[i] > 10000) {\n                revert DiscountOutOfRange();\n            }\n            _feeDiscount[deployers[i]] = discounts[i];\n            emit FeeDiscountApplied(deployers[i], discounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITREXGateway-applyFeeDiscount}.\n     */\n    function applyFeeDiscount(address deployer, uint16 discount) external override {\n        if(!isAgent(msg.sender) && msg.sender != owner()) {\n            revert OnlyAdminCall();\n        }\n        if(discount > 10000) {\n            revert DiscountOutOfRange();\n        }\n        _feeDiscount[deployer] = discount;\n        emit FeeDiscountApplied(deployer, discount);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-batchDeployTREXSuite}.\n     */\n    function batchDeployTREXSuite(\n        ITREXFactory.TokenDetails[] memory _tokenDetails,\n        ITREXFactory.ClaimDetails[] memory _claimDetails) external override\n    {\n        if(_tokenDetails.length > 5) {\n            revert BatchMaxLengthExceeded(5);\n        }\n        for (uint256 i = 0; i < _tokenDetails.length; i++) {\n            deployTREXSuite(_tokenDetails[i], _claimDetails[i]);\n        }\n    }\n\n    /**\n     *  @dev See {ITREXGateway-getPublicDeploymentStatus}.\n     */\n    function getPublicDeploymentStatus() external override view returns(bool) {\n        return _publicDeploymentStatus;\n    }\n\n    /**\n     *  @dev See {ITREXGateway-getFactory}.\n     */\n    function getFactory() external override view returns(address) {\n        return _factory;\n    }\n\n    /**\n     *  @dev See {ITREXGateway-getDeploymentFee}.\n     */\n    function getDeploymentFee() external override view returns(Fee memory) {\n        return _deploymentFee;\n    }\n\n    /**\n     *  @dev See {ITREXGateway-isDeploymentFeeEnabled}.\n     */\n    function isDeploymentFeeEnabled() external override view returns(bool) {\n        return _deploymentFeeEnabled;\n    }\n\n    /**\n     *  @dev See {ITREXGateway-deployTREXSuite}.\n     */\n    function deployTREXSuite(ITREXFactory.TokenDetails memory _tokenDetails, ITREXFactory.ClaimDetails memory _claimDetails)\n    public override {\n        if(_publicDeploymentStatus == false && !isDeployer(msg.sender)) {\n            revert PublicDeploymentsNotAllowed();\n        }\n        if(_publicDeploymentStatus == true && msg.sender != _tokenDetails.owner && !isDeployer(msg.sender)) {\n            revert PublicCannotDeployOnBehalf();\n        }\n        uint256 feeApplied = 0;\n        if(_deploymentFeeEnabled == true) {\n            if(_deploymentFee.fee > 0 && _feeDiscount[msg.sender] < 10000) {\n                feeApplied = calculateFee(msg.sender);\n                IERC20(_deploymentFee.feeToken).transferFrom(\n                    msg.sender,\n                    _deploymentFee.feeCollector,\n                    feeApplied\n                );\n            }\n        }\n        string memory _salt  = string(abi.encodePacked(Strings.toHexString(_tokenDetails.owner), _tokenDetails.name));\n        ITREXFactory(_factory).deployTREXSuite(_salt, _tokenDetails, _claimDetails);\n        emit GatewaySuiteDeploymentProcessed(msg.sender, _tokenDetails.owner, feeApplied);\n    }\n\n    /**\n     *  @dev See {ITREXGateway-isDeployer}.\n     */\n    function isDeployer(address deployer) public override view returns(bool) {\n        return _deployers[deployer];\n    }\n\n    /**\n     *  @dev See {ITREXGateway-calculateFee}.\n     */\n    function calculateFee(address deployer) public override view returns(uint256) {\n        return _deploymentFee.fee - ((_feeDiscount[deployer] * _deploymentFee.fee) / 10000);\n    }\n}\n"
    },
    "contracts/proxy/AbstractProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./interface/IProxy.sol\";\nimport \"./authority/ITREXImplementationAuthority.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract AbstractProxy is IProxy, Initializable {\n\n    /**\n     *  @dev See {IProxy-setImplementationAuthority}.\n     */\n    function setImplementationAuthority(address _newImplementationAuthority) external override {\n        require(msg.sender == getImplementationAuthority(), \"only current implementationAuthority can call\");\n        require(_newImplementationAuthority != address(0), \"invalid argument - zero address\");\n        require(\n            (ITREXImplementationAuthority(_newImplementationAuthority)).getTokenImplementation() != address(0)\n            && (ITREXImplementationAuthority(_newImplementationAuthority)).getCTRImplementation() != address(0)\n            && (ITREXImplementationAuthority(_newImplementationAuthority)).getIRImplementation() != address(0)\n            && (ITREXImplementationAuthority(_newImplementationAuthority)).getIRSImplementation() != address(0)\n            && (ITREXImplementationAuthority(_newImplementationAuthority)).getMCImplementation() != address(0)\n            && (ITREXImplementationAuthority(_newImplementationAuthority)).getTIRImplementation() != address(0)\n        , \"invalid Implementation Authority\");\n        _storeImplementationAuthority(_newImplementationAuthority);\n        emit ImplementationAuthoritySet(_newImplementationAuthority);\n    }\n\n    /**\n     *  @dev See {IProxy-getImplementationAuthority}.\n     */\n    function getImplementationAuthority() public override view returns(address) {\n        address implemAuth;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            implemAuth := sload(0x821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc)\n        }\n        return implemAuth;\n    }\n\n    /**\n     *  @dev store the implementationAuthority contract address using the ERC-3643 implementation slot in storage\n     *  the slot storage is the result of `keccak256(\"ERC-3643.proxy.beacon\")`\n     */\n    function _storeImplementationAuthority(address implementationAuthority) internal {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(0x821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc, implementationAuthority)\n        }\n    }\n\n}\n"
    },
    "contracts/proxy/authority/IAFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./TREXImplementationAuthority.sol\";\n\ncontract IAFactory is IIAFactory {\n\n    /// variables\n\n    /// address of the trex factory\n    address private _trexFactory;\n\n    /// mapping allowing to know if an IA was deployed by the factory or not\n    mapping(address => bool) private _deployedByFactory;\n\n    /// functions\n\n    constructor (address trexFactory) {\n        _trexFactory = trexFactory;\n    }\n\n    /**\n     *  @dev See {IIAFactory-deployIA}.\n     */\n    function deployIA(address _token) external override returns (address){\n        if (ITREXFactory(_trexFactory).getImplementationAuthority() != msg.sender) {\n            revert(\"only reference IA can deploy\");}\n        TREXImplementationAuthority _newIA =\n        new TREXImplementationAuthority(false, ITREXImplementationAuthority(msg.sender).getTREXFactory(), address(this));\n        _newIA.fetchVersion(ITREXImplementationAuthority(msg.sender).getCurrentVersion());\n        _newIA.useTREXVersion(ITREXImplementationAuthority(msg.sender).getCurrentVersion());\n        Ownable(_newIA).transferOwnership(Ownable(_token).owner());\n        _deployedByFactory[address(_newIA)] = true;\n        emit ImplementationAuthorityDeployed(address(_newIA));\n        return address(_newIA);\n    }\n\n    /**\n     *  @dev See {IIAFactory-deployedByFactory}.\n     */\n    function deployedByFactory(address _ia) external view override returns (bool) {\n        return _deployedByFactory[_ia];\n    }\n}\n"
    },
    "contracts/proxy/authority/IIAFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\ninterface IIAFactory {\n\n    /// events\n\n    /// event emitted when a new TREXImplementationAuthority is deployed\n    event ImplementationAuthorityDeployed(address indexed _ia);\n\n    /// functions\n\n    /**\n     *  @dev deploy a new TREXImplementationAuthority smart contract\n     *  @param _token the token for which the new IA will be used\n     *  function called by the `changeImplementationAuthority` function\n     *  can be called only by the reference TREXImplementationAuthority contract\n     *  the new contract deployed will contain all the versions from reference IA\n     *  the new contract will be set on the same version as the reference IA\n     *  ownership of the new IA is transferred to the Owner of the token\n     *  emits a `ImplementationAuthorityDeployed` event\n     *  returns the address of the IA contract deployed\n     */\n    function deployIA(address _token) external returns (address);\n\n    /**\n     *  @dev function used to know if an IA contract was deployed by the factory or not\n     *  @param _ia the address of TREXImplementationAuthority contract\n     */\n    function deployedByFactory(address _ia) external view returns (bool);\n}\n"
    },
    "contracts/proxy/authority/ITREXImplementationAuthority.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface ITREXImplementationAuthority {\n\n    /// types\n\n    struct TREXContracts {\n        // address of token implementation contract\n        address tokenImplementation;\n        // address of ClaimTopicsRegistry implementation contract\n        address ctrImplementation;\n        // address of IdentityRegistry implementation contract\n        address irImplementation;\n        // address of IdentityRegistryStorage implementation contract\n        address irsImplementation;\n        // address of TrustedIssuersRegistry implementation contract\n        address tirImplementation;\n        // address of ModularCompliance implementation contract\n        address mcImplementation;\n    }\n\n    struct Version {\n        // major version\n        uint8 major;\n        // minor version\n        uint8 minor;\n        // patch version\n        uint8 patch;\n    }\n\n    /// events\n\n    /// event emitted when a new TREX version is added to the contract memory\n    event TREXVersionAdded(Version indexed version, TREXContracts indexed trex);\n\n    /// event emitted when a new TREX version is fetched from reference contract by auxiliary contract\n    event TREXVersionFetched(Version indexed version, TREXContracts indexed trex);\n\n    /// event emitted when the current version is updated\n    event VersionUpdated(Version indexed version);\n\n    /// event emitted by the constructor when the IA is deployed\n    event ImplementationAuthoritySet(bool referenceStatus, address trexFactory);\n\n    /// event emitted when the TREX factory address is set\n    event TREXFactorySet(address indexed trexFactory);\n\n    /// event emitted when the IA factory address is set\n    event IAFactorySet(address indexed iaFactory);\n\n    /// event emitted when a token issuer decides to change current IA for a new one\n    event ImplementationAuthorityChanged(address indexed _token, address indexed _newImplementationAuthority);\n\n    /// functions\n\n    /**\n     *  @dev allows to fetch a TREX version available on the reference contract\n     *  can be called only from auxiliary contracts, not on reference (main) contract\n     *  throws if the version was already fetched\n     *  adds the new version on the local storage\n     *  allowing the update of contracts through the `useTREXVersion` afterwards\n     */\n    function fetchVersion(Version calldata _version) external;\n\n    /**\n     *  @dev setter for _trexFactory variable\n     *  _trexFactory is set at deployment for auxiliary contracts\n     *  for main contract it must be set post-deployment as main IA is\n     *  deployed before the TREXFactory.\n     *  @param trexFactory the address of TREXFactory contract\n     *  emits a TREXFactorySet event\n     *  only Owner can call\n     *  can be called only on main contract, auxiliary contracts cannot call\n     */\n    function setTREXFactory(address trexFactory) external;\n\n    /**\n     *  @dev setter for _iaFactory variable\n     *  _iaFactory is set at zero address for auxiliary contracts\n     *  for main contract it can be set post-deployment or at deployment\n     *  in the constructor\n     *  @param iaFactory the address of IAFactory contract\n     *  emits a IAFactorySet event\n     *  only Owner can call\n     *  can be called only on main contract, auxiliary contracts cannot call\n     */\n    function setIAFactory(address iaFactory) external;\n\n    /**\n     *  @dev adds a new Version of TREXContracts to the mapping\n     *  only callable on the reference contract\n     *  only Owner can call this function\n     *  @param _version the new version to add to the mapping\n     *  @param _trex the list of contracts corresponding to the new version\n     *  _trex cannot contain zero addresses\n     *  emits a `TREXVersionAdded` event\n     */\n    function addTREXVersion(Version calldata _version, TREXContracts calldata _trex) external;\n\n    /**\n     *  @dev updates the current version in use by the proxies\n     *  variation of the `useTREXVersion` allowing to use a new version\n     *  this function calls in a single transaction the `addTREXVersion`\n     *  and the `useTREXVersion` using an existing version\n     *  @param _version the version to use\n     *  @param _trex the set of contracts corresponding to the version\n     *  only Owner can call (check performed in addTREXVersion)\n     *  only reference contract can call (check performed in addTREXVersion)\n     *  emits a `TREXVersionAdded`event\n     *  emits a `VersionUpdated` event\n     */\n    function addAndUseTREXVersion(Version calldata _version, TREXContracts calldata _trex) external;\n\n    /**\n     *  @dev updates the current version in use by the proxies\n     *  @param _version the version to use\n     *  reverts if _version is already used or if version does not exist\n     *  only Owner can call\n     *  emits a `VersionUpdated` event\n     */\n    function useTREXVersion(Version calldata _version) external;\n\n    /**\n     *  @dev change the implementationAuthority address of all proxy contracts linked to a given token\n     *  only the owner of all proxy contracts can call this function\n     *  @param _token the address of the token proxy\n     *  @param _newImplementationAuthority the address of the new IA contract\n     *  caller has to be owner of all contracts linked to the token and impacted by the change\n     *  Set _newImplementationAuthority on zero address to deploy a new IA contract\n     *  New IA contracts can only be deployed ONCE per token and only if current IA is the main IA\n     *  if _newImplementationAuthority is not a new contract it must be using the same version\n     *  as the current IA contract.\n     *  calls `setImplementationAuthority` on all proxies linked to the token\n     *  emits a `ImplementationAuthorityChanged` event\n     */\n    function changeImplementationAuthority(address _token, address _newImplementationAuthority) external;\n\n    /**\n     *  @dev getter function returning the current version of contracts used by proxies\n     */\n    function getCurrentVersion() external view returns (Version memory);\n\n    /**\n     *  @dev getter function returning the contracts corresponding to a version\n     *  @param _version the version that contracts are requested for\n     */\n    function getContracts(Version calldata _version) external view returns (TREXContracts memory);\n\n    /**\n     *  @dev getter function returning address of reference TREX factory\n     */\n    function getTREXFactory() external view returns (address);\n\n    /**\n     *  @dev getter function returning address of token contract implementation\n     *  currently used by the proxies using this TREXImplementationAuthority\n     */\n    function getTokenImplementation() external view returns (address);\n\n    /**\n     *  @dev getter function returning address of ClaimTopicsRegistry contract implementation\n     *  currently used by the proxies using this TREXImplementationAuthority\n     */\n    function getCTRImplementation() external view returns (address);\n\n    /**\n     *  @dev getter function returning address of IdentityRegistry contract implementation\n     *  currently used by the proxies using this TREXImplementationAuthority\n     */\n    function getIRImplementation() external view returns (address);\n\n    /**\n     *  @dev getter function returning address of IdentityRegistryStorage contract implementation\n     *  currently used by the proxies using this TREXImplementationAuthority\n     */\n    function getIRSImplementation() external view returns (address);\n\n    /**\n     *  @dev getter function returning address of TrustedIssuersRegistry contract implementation\n     *  currently used by the proxies using this TREXImplementationAuthority\n     */\n    function getTIRImplementation() external view returns (address);\n\n    /**\n     *  @dev getter function returning address of ModularCompliance contract implementation\n     *  currently used by the proxies using this TREXImplementationAuthority\n     */\n    function getMCImplementation() external view returns (address);\n\n    /**\n     *  @dev returns true if the contract is the main contract\n     *  returns false if the contract is an auxiliary contract\n     */\n    function isReferenceContract() external view returns (bool);\n\n    /**\n     *  @dev getter for reference contract address\n     */\n    function getReferenceContract() external view returns (address);\n}"
    },
    "contracts/proxy/authority/TREXImplementationAuthority.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./ITREXImplementationAuthority.sol\";\nimport \"../../token/IToken.sol\";\nimport \"../interface/IProxy.sol\";\nimport \"../../factory/ITREXFactory.sol\";\nimport \"./IIAFactory.sol\";\n\ncontract TREXImplementationAuthority is ITREXImplementationAuthority, Ownable {\n\n    /// variables\n\n    /// current version\n    Version private _currentVersion;\n\n    /// mapping to get contracts of each version\n    mapping(bytes32 => TREXContracts) private _contracts;\n\n    /// reference ImplementationAuthority used by the TREXFactory\n    bool private _reference;\n\n    /// address of TREXFactory contract\n    address private _trexFactory;\n\n    /// address of factory for TREXImplementationAuthority contracts\n    address private _iaFactory;\n\n    /// functions\n\n    /**\n     *  @dev Constructor of the ImplementationAuthority contract\n     *  @param referenceStatus boolean value determining if the contract\n     *  is the main IA or an auxiliary contract\n     *  @param trexFactory the address of TREXFactory referencing the main IA\n     *  if `referenceStatus` is true then `trexFactory` at deployment is set\n     *  on zero address. In that scenario, call `setTREXFactory` post-deployment\n     *  @param iaFactory the address for the factory of IA contracts\n     *  emits `ImplementationAuthoritySet` event\n     *  emits a `IAFactorySet` event\n     */\n    constructor (bool referenceStatus, address trexFactory, address iaFactory) {\n        _reference = referenceStatus;\n        _trexFactory = trexFactory;\n        _iaFactory = iaFactory;\n        emit ImplementationAuthoritySet(referenceStatus, trexFactory);\n        emit IAFactorySet(iaFactory);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-setTREXFactory}.\n     */\n    function setTREXFactory(address trexFactory) external override onlyOwner {\n        require(\n            isReferenceContract() &&\n            ITREXFactory(trexFactory).getImplementationAuthority() == address(this)\n        , \"only reference contract can call\");\n        _trexFactory = trexFactory;\n        emit TREXFactorySet(trexFactory);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-setIAFactory}.\n     */\n    function setIAFactory(address iaFactory) external override onlyOwner {\n        require(\n            isReferenceContract() &&\n            ITREXFactory(_trexFactory).getImplementationAuthority() == address(this)\n        , \"only reference contract can call\");\n        _iaFactory = iaFactory;\n        emit IAFactorySet(iaFactory);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-useTREXVersion}.\n     */\n    function addAndUseTREXVersion(Version calldata _version, TREXContracts calldata _trex) external override {\n        addTREXVersion(_version, _trex);\n        useTREXVersion(_version);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-fetchVersionList}.\n     */\n    function fetchVersion(Version calldata _version) external override {\n        require(!isReferenceContract(), \"cannot call on reference contract\");\n        if (_contracts[_versionToBytes(_version)].tokenImplementation != address(0)) {\n            revert(\"version fetched already\");\n        }\n        _contracts[_versionToBytes(_version)] =\n        ITREXImplementationAuthority(getReferenceContract()).getContracts(_version);\n        emit TREXVersionFetched(_version, _contracts[_versionToBytes(_version)]);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-changeImplementationAuthority}.\n     */\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function changeImplementationAuthority(address _token, address _newImplementationAuthority) external override {\n        require(_token != address(0), \"invalid argument - zero address\");\n        if(_newImplementationAuthority == address(0) && !isReferenceContract()){\n            revert(\"only reference contract can deploy new IAs\");}\n\n        address _ir = address(IToken(_token).identityRegistry());\n        address _mc = address(IToken(_token).compliance());\n        address _irs = address(IIdentityRegistry(_ir).identityStorage());\n        address _ctr = address(IIdentityRegistry(_ir).topicsRegistry());\n        address _tir = address(IIdentityRegistry(_ir).issuersRegistry());\n\n        // calling this function requires ownership of ALL contracts of the T-REX suite\n        if(\n            Ownable(_token).owner() != msg.sender\n            || Ownable(_ir).owner() != msg.sender\n            || Ownable(_mc).owner() != msg.sender\n            || Ownable(_irs).owner() != msg.sender\n            || Ownable(_ctr).owner() != msg.sender\n            || Ownable(_tir).owner() != msg.sender) {\n            revert(\"caller NOT owner of all contracts impacted\");\n        }\n\n        if(_newImplementationAuthority == address(0)) {\n            _newImplementationAuthority = IIAFactory(_iaFactory).deployIA(_token);\n        }\n        else {\n            if(\n                _versionToBytes(ITREXImplementationAuthority(_newImplementationAuthority).getCurrentVersion()) !=\n                _versionToBytes(_currentVersion)) {\n                revert(\"version of new IA has to be the same as current IA\");\n            }\n            if(\n                ITREXImplementationAuthority(_newImplementationAuthority).isReferenceContract() &&\n                _newImplementationAuthority != getReferenceContract()) {\n                revert(\"new IA is NOT reference contract\");\n            }\n            if(\n                !IIAFactory(_iaFactory).deployedByFactory(_newImplementationAuthority) &&\n            _newImplementationAuthority != getReferenceContract()) {\n                revert(\"invalid IA\");\n            }\n        }\n\n        IProxy(_token).setImplementationAuthority(_newImplementationAuthority);\n        IProxy(_ir).setImplementationAuthority(_newImplementationAuthority);\n        IProxy(_mc).setImplementationAuthority(_newImplementationAuthority);\n        IProxy(_ctr).setImplementationAuthority(_newImplementationAuthority);\n        IProxy(_tir).setImplementationAuthority(_newImplementationAuthority);\n        // IRS can be shared by multiple tokens, and therefore could have been updated already\n        if (IProxy(_irs).getImplementationAuthority() == address(this)) {\n            IProxy(_irs).setImplementationAuthority(_newImplementationAuthority);\n        }\n        emit ImplementationAuthorityChanged(_token, _newImplementationAuthority);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getCurrentVersion}.\n     */\n    function getCurrentVersion() external view override returns (Version memory) {\n        return _currentVersion;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getContracts}.\n     */\n    function getContracts(Version calldata _version) external view override returns (TREXContracts memory) {\n        return _contracts[_versionToBytes(_version)];\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getTREXFactory}.\n     */\n    function getTREXFactory() external view override returns (address) {\n        return _trexFactory;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getTokenImplementation}.\n     */\n    function getTokenImplementation() external view override returns (address) {\n        return _contracts[_versionToBytes(_currentVersion)].tokenImplementation;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getCTRImplementation}.\n     */\n    function getCTRImplementation() external view override returns (address) {\n        return _contracts[_versionToBytes(_currentVersion)].ctrImplementation;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getIRImplementation}.\n     */\n    function getIRImplementation() external view override returns (address) {\n        return _contracts[_versionToBytes(_currentVersion)].irImplementation;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getIRSImplementation}.\n     */\n    function getIRSImplementation() external view override returns (address) {\n        return _contracts[_versionToBytes(_currentVersion)].irsImplementation;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getTIRImplementation}.\n     */\n    function getTIRImplementation() external view override returns (address) {\n        return _contracts[_versionToBytes(_currentVersion)].tirImplementation;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getMCImplementation}.\n     */\n    function getMCImplementation() external view override returns (address) {\n        return _contracts[_versionToBytes(_currentVersion)].mcImplementation;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-addTREXVersion}.\n     */\n    function addTREXVersion(Version calldata _version, TREXContracts calldata _trex) public override onlyOwner {\n        require(isReferenceContract(), \"ONLY reference contract can add versions\");\n        if (_contracts[_versionToBytes(_version)].tokenImplementation != address(0)) {\n            revert(\"version already exists\");\n        }\n        require(\n            _trex.ctrImplementation != address(0)\n            && _trex.irImplementation != address(0)\n            && _trex.irsImplementation != address(0)\n            && _trex.mcImplementation != address(0)\n            && _trex.tirImplementation != address(0)\n            && _trex.tokenImplementation != address(0)\n        , \"invalid argument - zero address\");\n        _contracts[_versionToBytes(_version)] = _trex;\n        emit TREXVersionAdded(_version, _trex);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-useTREXVersion}.\n     */\n    function useTREXVersion(Version calldata _version) public override onlyOwner {\n        if (_versionToBytes(_version) == _versionToBytes(_currentVersion)) {\n            revert(\"version already in use\");\n        }\n        if (_contracts[_versionToBytes(_version)].tokenImplementation == address(0)) {\n            revert(\"invalid argument - non existing version\");\n        }\n        _currentVersion = _version;\n        emit VersionUpdated(_version);\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-isReferenceContract}.\n     */\n    function isReferenceContract() public view override returns (bool) {\n        return _reference;\n    }\n\n    /**\n     *  @dev See {ITREXImplementationAuthority-getReferenceContract}.\n     */\n    function getReferenceContract() public view override returns (address) {\n        return ITREXFactory(_trexFactory).getImplementationAuthority();\n    }\n\n    /**\n     *  @dev casting function Version => bytes to allow compare values easier\n     */\n    function _versionToBytes(Version memory _version) private pure returns(bytes32) {\n        return bytes32(keccak256(abi.encodePacked(_version.major, _version.minor, _version.patch)));\n    }\n}"
    },
    "contracts/proxy/ClaimTopicsRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./AbstractProxy.sol\";\n\ncontract ClaimTopicsRegistryProxy is AbstractProxy {\n\n    constructor(address implementationAuthority) {\n        require(implementationAuthority != address(0), \"invalid argument - zero address\");\n        _storeImplementationAuthority(implementationAuthority);\n        emit ImplementationAuthoritySet(implementationAuthority);\n\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getCTRImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = logic.delegatecall(abi.encodeWithSignature(\"init()\"));\n        require(success, \"Initialization failed.\");\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getCTRImplementation();\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n            case 0 {\n                revert(0, retSz)\n            }\n            default {\n                return(0, retSz)\n            }\n        }\n    }\n}"
    },
    "contracts/proxy/IdentityRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./AbstractProxy.sol\";\n\ncontract IdentityRegistryProxy is AbstractProxy {\n\n    constructor(\n        address implementationAuthority,\n        address _trustedIssuersRegistry,\n        address _claimTopicsRegistry,\n        address _identityStorage\n    ) {\n        require(\n        implementationAuthority != address(0)\n        && _trustedIssuersRegistry != address(0)\n        && _claimTopicsRegistry != address(0)\n        && _identityStorage != address(0)\n        , \"invalid argument - zero address\");\n        _storeImplementationAuthority(implementationAuthority);\n        emit ImplementationAuthoritySet(implementationAuthority);\n\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getIRImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = logic.delegatecall(\n            abi.encodeWithSignature(\n                    \"init(address,address,address)\",\n                    _trustedIssuersRegistry,\n                    _claimTopicsRegistry,\n                    _identityStorage));\n        require(success, \"Initialization failed.\");\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getIRImplementation();\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n            case 0 {\n                revert(0, retSz)\n            }\n            default {\n                return(0, retSz)\n            }\n        }\n    }\n}"
    },
    "contracts/proxy/IdentityRegistryStorageProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./AbstractProxy.sol\";\n\ncontract IdentityRegistryStorageProxy is AbstractProxy {\n\n    constructor(address implementationAuthority) {\n        require(implementationAuthority != address(0), \"invalid argument - zero address\");\n        _storeImplementationAuthority(implementationAuthority);\n        emit ImplementationAuthoritySet(implementationAuthority);\n\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getIRSImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = logic.delegatecall(abi.encodeWithSignature(\"init()\"));\n        require(success, \"Initialization failed.\");\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getIRSImplementation();\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n            case 0 {\n                revert(0, retSz)\n            }\n            default {\n                return(0, retSz)\n            }\n        }\n    }\n}"
    },
    "contracts/proxy/interface/IProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface IProxy {\n\n    /// events\n\n    event ImplementationAuthoritySet(address indexed _implementationAuthority);\n\n    /// functions\n\n    function setImplementationAuthority(address _newImplementationAuthority) external;\n\n    function getImplementationAuthority() external view returns(address);\n}\n"
    },
    "contracts/proxy/ModularComplianceProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./AbstractProxy.sol\";\n\ncontract ModularComplianceProxy is AbstractProxy {\n\n    constructor(address implementationAuthority) {\n        require(implementationAuthority != address(0), \"invalid argument - zero address\");\n        _storeImplementationAuthority(implementationAuthority);\n        emit ImplementationAuthoritySet(implementationAuthority);\n\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getMCImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = logic.delegatecall(abi.encodeWithSignature(\"init()\"));\n        require(success, \"Initialization failed.\");\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getMCImplementation();\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n            case 0 {\n                revert(0, retSz)\n            }\n            default {\n                return(0, retSz)\n            }\n        }\n    }\n}\n"
    },
    "contracts/proxy/TokenProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./AbstractProxy.sol\";\n\ncontract TokenProxy is AbstractProxy {\n\n    constructor(\n        address implementationAuthority,\n        address _identityRegistry,\n        address _compliance,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        // _onchainID can be 0 address if the token has no ONCHAINID, ONCHAINID can be set later by the token Owner\n        address _onchainID\n    ) {\n        require(\n            implementationAuthority != address(0)\n            && _identityRegistry != address(0)\n            && _compliance != address(0)\n        , \"invalid argument - zero address\");\n        require(\n            keccak256(abi.encode(_name)) != keccak256(abi.encode(\"\"))\n            && keccak256(abi.encode(_symbol)) != keccak256(abi.encode(\"\"))\n        , \"invalid argument - empty string\");\n        require(0 <= _decimals && _decimals <= 18, \"decimals between 0 and 18\");\n        _storeImplementationAuthority(implementationAuthority);\n        emit ImplementationAuthoritySet(implementationAuthority);\n\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getTokenImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = logic.delegatecall(\n                abi.encodeWithSignature(\n                    \"init(address,address,string,string,uint8,address)\",\n                    _identityRegistry,\n                    _compliance,\n                    _name,\n                    _symbol,\n                    _decimals,\n                    _onchainID\n                )\n            );\n        require(success, \"Initialization failed.\");\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getTokenImplementation();\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n                case 0 {\n                    revert(0, retSz)\n                }\n                default {\n                    return(0, retSz)\n                }\n        }\n    }\n}\n"
    },
    "contracts/proxy/TrustedIssuersRegistryProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./AbstractProxy.sol\";\n\ncontract TrustedIssuersRegistryProxy is AbstractProxy {\n\n    constructor(address implementationAuthority) {\n        require(implementationAuthority != address(0), \"invalid argument - zero address\");\n        _storeImplementationAuthority(implementationAuthority);\n        emit ImplementationAuthoritySet(implementationAuthority);\n\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getTIRImplementation();\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = logic.delegatecall(abi.encodeWithSignature(\"init()\"));\n        require(success, \"Initialization failed.\");\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address logic = (ITREXImplementationAuthority(getImplementationAuthority())).getTIRImplementation();\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n            case 0 {\n                revert(0, retSz)\n            }\n            default {\n                return(0, retSz)\n            }\n        }\n    }\n}\n"
    },
    "contracts/registry/implementation/ClaimTopicsRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../storage/CTRStorage.sol\";\nimport \"../interface/IClaimTopicsRegistry.sol\";\n\ncontract ClaimTopicsRegistry is IClaimTopicsRegistry, OwnableUpgradeable, CTRStorage {\n\n    function init() external initializer {\n        __Ownable_init();\n    }\n\n    /**\n     *  @dev See {IClaimTopicsRegistry-addClaimTopic}.\n     */\n    function addClaimTopic(uint256 _claimTopic) external override onlyOwner {\n        uint256 length = _claimTopics.length;\n        require(length < 15, \"cannot require more than 15 topics\");\n        for (uint256 i = 0; i < length; i++) {\n            require(_claimTopics[i] != _claimTopic, \"claimTopic already exists\");\n        }\n        _claimTopics.push(_claimTopic);\n        emit ClaimTopicAdded(_claimTopic);\n    }\n\n    /**\n     *  @dev See {IClaimTopicsRegistry-removeClaimTopic}.\n     */\n    function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {\n        uint256 length = _claimTopics.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_claimTopics[i] == _claimTopic) {\n                _claimTopics[i] = _claimTopics[length - 1];\n                _claimTopics.pop();\n                emit ClaimTopicRemoved(_claimTopic);\n                break;\n            }\n        }\n    }\n\n    /**\n     *  @dev See {IClaimTopicsRegistry-getClaimTopics}.\n     */\n    function getClaimTopics() external view override returns (uint256[] memory) {\n        return _claimTopics;\n    }\n}\n"
    },
    "contracts/registry/implementation/IdentityRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\nimport \"../interface/IClaimTopicsRegistry.sol\";\nimport \"../interface/ITrustedIssuersRegistry.sol\";\nimport \"../interface/IIdentityRegistry.sol\";\nimport \"../../roles/AgentRoleUpgradeable.sol\";\nimport \"../interface/IIdentityRegistryStorage.sol\";\nimport \"../storage/IRStorage.sol\";\n\n\ncontract IdentityRegistry is IIdentityRegistry, AgentRoleUpgradeable, IRStorage {\n\n    /**\n     *  @dev the constructor initiates the Identity Registry smart contract\n     *  @param _trustedIssuersRegistry the trusted issuers registry linked to the Identity Registry\n     *  @param _claimTopicsRegistry the claim topics registry linked to the Identity Registry\n     *  @param _identityStorage the identity registry storage linked to the Identity Registry\n     *  emits a `ClaimTopicsRegistrySet` event\n     *  emits a `TrustedIssuersRegistrySet` event\n     *  emits an `IdentityStorageSet` event\n     */\n    function init(\n        address _trustedIssuersRegistry,\n        address _claimTopicsRegistry,\n        address _identityStorage\n    ) external initializer {\n        require(\n            _trustedIssuersRegistry != address(0)\n            && _claimTopicsRegistry != address(0)\n            && _identityStorage != address(0)\n        , \"invalid argument - zero address\");\n        _tokenTopicsRegistry = IClaimTopicsRegistry(_claimTopicsRegistry);\n        _tokenIssuersRegistry = ITrustedIssuersRegistry(_trustedIssuersRegistry);\n        _tokenIdentityStorage = IIdentityRegistryStorage(_identityStorage);\n        emit ClaimTopicsRegistrySet(_claimTopicsRegistry);\n        emit TrustedIssuersRegistrySet(_trustedIssuersRegistry);\n        emit IdentityStorageSet(_identityStorage);\n        __Ownable_init();\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-batchRegisterIdentity}.\n     */\n    function batchRegisterIdentity(\n        address[] calldata _userAddresses,\n        IIdentity[] calldata _identities,\n        uint16[] calldata _countries\n    ) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            registerIdentity(_userAddresses[i], _identities[i], _countries[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-updateIdentity}.\n     */\n    function updateIdentity(address _userAddress, IIdentity _identity) external override onlyAgent {\n        IIdentity oldIdentity = identity(_userAddress);\n        _tokenIdentityStorage.modifyStoredIdentity(_userAddress, _identity);\n        emit IdentityUpdated(oldIdentity, _identity);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-updateCountry}.\n     */\n    function updateCountry(address _userAddress, uint16 _country) external override onlyAgent {\n        _tokenIdentityStorage.modifyStoredInvestorCountry(_userAddress, _country);\n        emit CountryUpdated(_userAddress, _country);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-deleteIdentity}.\n     */\n    function deleteIdentity(address _userAddress) external override onlyAgent {\n        IIdentity oldIdentity = identity(_userAddress);\n        _tokenIdentityStorage.removeIdentityFromStorage(_userAddress);\n        emit IdentityRemoved(_userAddress, oldIdentity);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-setIdentityRegistryStorage}.\n     */\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external override onlyOwner {\n        _tokenIdentityStorage = IIdentityRegistryStorage(_identityRegistryStorage);\n        emit IdentityStorageSet(_identityRegistryStorage);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-setClaimTopicsRegistry}.\n     */\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external override onlyOwner {\n        _tokenTopicsRegistry = IClaimTopicsRegistry(_claimTopicsRegistry);\n        emit ClaimTopicsRegistrySet(_claimTopicsRegistry);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-setTrustedIssuersRegistry}.\n     */\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external override onlyOwner {\n        _tokenIssuersRegistry = ITrustedIssuersRegistry(_trustedIssuersRegistry);\n        emit TrustedIssuersRegistrySet(_trustedIssuersRegistry);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-isVerified}.\n     */\n    // solhint-disable-next-line code-complexity\n    function isVerified(address _userAddress) external view override returns (bool) {\n        if (address(identity(_userAddress)) == address(0)) {return false;}\n        uint256[] memory requiredClaimTopics = _tokenTopicsRegistry.getClaimTopics();\n        if (requiredClaimTopics.length == 0) {\n            return true;\n        }\n\n        uint256 foundClaimTopic;\n        uint256 scheme;\n        address issuer;\n        bytes memory sig;\n        bytes memory data;\n        uint256 claimTopic;\n        for (claimTopic = 0; claimTopic < requiredClaimTopics.length; claimTopic++) {\n            IClaimIssuer[] memory trustedIssuers =\n            _tokenIssuersRegistry.getTrustedIssuersForClaimTopic(requiredClaimTopics[claimTopic]);\n\n            if (trustedIssuers.length == 0) {return false;}\n\n            bytes32[] memory claimIds = new bytes32[](trustedIssuers.length);\n            for (uint256 i = 0; i < trustedIssuers.length; i++) {\n                claimIds[i] = keccak256(abi.encode(trustedIssuers[i], requiredClaimTopics[claimTopic]));\n            }\n\n            for (uint256 j = 0; j < claimIds.length; j++) {\n                (foundClaimTopic, scheme, issuer, sig, data, ) = identity(_userAddress).getClaim(claimIds[j]);\n\n                if (foundClaimTopic == requiredClaimTopics[claimTopic]) {\n                    try IClaimIssuer(issuer).isClaimValid(identity(_userAddress), requiredClaimTopics[claimTopic], sig,\n                        data) returns(bool _validity) {\n\n                        if (\n                            _validity\n                        ) {\n                            j = claimIds.length;\n                        }\n                        if (!_validity && j == (claimIds.length - 1)) {\n                            return false;\n                        }\n                    } catch {\n                        if (j == (claimIds.length - 1)) {\n                            return false;\n                        }\n                    }\n                } else if (j == (claimIds.length - 1)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-investorCountry}.\n     */\n    function investorCountry(address _userAddress) external view override returns (uint16) {\n        return _tokenIdentityStorage.storedInvestorCountry(_userAddress);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-issuersRegistry}.\n     */\n    function issuersRegistry() external view override returns (ITrustedIssuersRegistry) {\n        return _tokenIssuersRegistry;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-topicsRegistry}.\n     */\n    function topicsRegistry() external view override returns (IClaimTopicsRegistry) {\n        return _tokenTopicsRegistry;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-identityStorage}.\n     */\n    function identityStorage() external view override returns (IIdentityRegistryStorage) {\n        return _tokenIdentityStorage;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-contains}.\n     */\n    function contains(address _userAddress) external view override returns (bool) {\n        if (address(identity(_userAddress)) == address(0)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-registerIdentity}.\n     */\n    function registerIdentity(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) public override onlyAgent {\n        _tokenIdentityStorage.addIdentityToStorage(_userAddress, _identity, _country);\n        emit IdentityRegistered(_userAddress, _identity);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistry-identity}.\n     */\n    function identity(address _userAddress) public view override returns (IIdentity) {\n        return _tokenIdentityStorage.storedIdentity(_userAddress);\n    }\n}\n"
    },
    "contracts/registry/implementation/IdentityRegistryStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\nimport \"../../roles/AgentRoleUpgradeable.sol\";\nimport \"../interface/IIdentityRegistryStorage.sol\";\nimport \"../storage/IRSStorage.sol\";\n\ncontract IdentityRegistryStorage is IIdentityRegistryStorage, AgentRoleUpgradeable, IRSStorage {\n\n    function init() external initializer {\n        __Ownable_init();\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-addIdentityToStorage}.\n     */\n    function addIdentityToStorage(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external override onlyAgent {\n        require(\n            _userAddress != address(0)\n            && address(_identity) != address(0)\n        , \"invalid argument - zero address\");\n        require(address(_identities[_userAddress].identityContract) == address(0), \"address stored already\");\n        _identities[_userAddress].identityContract = _identity;\n        _identities[_userAddress].investorCountry = _country;\n        emit IdentityStored(_userAddress, _identity);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-modifyStoredIdentity}.\n     */\n    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external override onlyAgent {\n        require(\n            _userAddress != address(0)\n            && address(_identity) != address(0)\n        , \"invalid argument - zero address\");\n        require(address(_identities[_userAddress].identityContract) != address(0), \"address not stored yet\");\n        IIdentity oldIdentity = _identities[_userAddress].identityContract;\n        _identities[_userAddress].identityContract = _identity;\n        emit IdentityModified(oldIdentity, _identity);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-modifyStoredInvestorCountry}.\n     */\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external override onlyAgent {\n        require(_userAddress != address(0), \"invalid argument - zero address\");\n        require(address(_identities[_userAddress].identityContract) != address(0), \"address not stored yet\");\n        _identities[_userAddress].investorCountry = _country;\n        emit CountryModified(_userAddress, _country);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-removeIdentityFromStorage}.\n     */\n    function removeIdentityFromStorage(address _userAddress) external override onlyAgent {\n        require(_userAddress != address(0), \"invalid argument - zero address\");\n        require(address(_identities[_userAddress].identityContract) != address(0), \"address not stored yet\");\n        IIdentity oldIdentity = _identities[_userAddress].identityContract;\n        delete _identities[_userAddress];\n        emit IdentityUnstored(_userAddress, oldIdentity);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-bindIdentityRegistry}.\n     */\n    function bindIdentityRegistry(address _identityRegistry) external override {\n        require(_identityRegistry != address(0), \"invalid argument - zero address\");\n        require(_identityRegistries.length < 300, \"cannot bind more than 300 IR to 1 IRS\");\n        addAgent(_identityRegistry);\n        _identityRegistries.push(_identityRegistry);\n        emit IdentityRegistryBound(_identityRegistry);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-unbindIdentityRegistry}.\n     */\n    function unbindIdentityRegistry(address _identityRegistry) external override {\n        require(_identityRegistry != address(0), \"invalid argument - zero address\");\n        require(_identityRegistries.length > 0, \"identity registry is not stored\");\n        uint256 length = _identityRegistries.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_identityRegistries[i] == _identityRegistry) {\n                _identityRegistries[i] = _identityRegistries[length - 1];\n                _identityRegistries.pop();\n                break;\n            }\n        }\n        removeAgent(_identityRegistry);\n        emit IdentityRegistryUnbound(_identityRegistry);\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-linkedIdentityRegistries}.\n     */\n    function linkedIdentityRegistries() external view override returns (address[] memory) {\n        return _identityRegistries;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-storedIdentity}.\n     */\n    function storedIdentity(address _userAddress) external view override returns (IIdentity) {\n        return _identities[_userAddress].identityContract;\n    }\n\n    /**\n     *  @dev See {IIdentityRegistryStorage-storedInvestorCountry}.\n     */\n    function storedInvestorCountry(address _userAddress) external view override returns (uint16) {\n        return _identities[_userAddress].investorCountry;\n    }\n}\n"
    },
    "contracts/registry/implementation/TrustedIssuersRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../interface/ITrustedIssuersRegistry.sol\";\nimport \"../storage/TIRStorage.sol\";\n\n\ncontract TrustedIssuersRegistry is ITrustedIssuersRegistry, OwnableUpgradeable, TIRStorage {\n\n    function init() external initializer {\n        __Ownable_init();\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-addTrustedIssuer}.\n     */\n    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external override onlyOwner {\n        require(address(_trustedIssuer) != address(0), \"invalid argument - zero address\");\n        require(_trustedIssuerClaimTopics[address(_trustedIssuer)].length == 0, \"trusted Issuer already exists\");\n        require(_claimTopics.length > 0, \"trusted claim topics cannot be empty\");\n        require(_claimTopics.length <= 15, \"cannot have more than 15 claim topics\");\n        require(_trustedIssuers.length < 50, \"cannot have more than 50 trusted issuers\");\n        _trustedIssuers.push(_trustedIssuer);\n        _trustedIssuerClaimTopics[address(_trustedIssuer)] = _claimTopics;\n        for (uint256 i = 0; i < _claimTopics.length; i++) {\n            _claimTopicsToTrustedIssuers[_claimTopics[i]].push(_trustedIssuer);\n        }\n        emit TrustedIssuerAdded(_trustedIssuer, _claimTopics);\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-removeTrustedIssuer}.\n     */\n    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external override onlyOwner {\n        require(address(_trustedIssuer) != address(0), \"invalid argument - zero address\");\n        require(_trustedIssuerClaimTopics[address(_trustedIssuer)].length != 0, \"NOT a trusted issuer\");\n        uint256 length = _trustedIssuers.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_trustedIssuers[i] == _trustedIssuer) {\n                _trustedIssuers[i] = _trustedIssuers[length - 1];\n                _trustedIssuers.pop();\n                break;\n            }\n        }\n        for (\n            uint256 claimTopicIndex = 0;\n            claimTopicIndex < _trustedIssuerClaimTopics[address(_trustedIssuer)].length;\n            claimTopicIndex++) {\n            uint256 claimTopic = _trustedIssuerClaimTopics[address(_trustedIssuer)][claimTopicIndex];\n            uint256 topicsLength = _claimTopicsToTrustedIssuers[claimTopic].length;\n            for (uint256 i = 0; i < topicsLength; i++) {\n                if (_claimTopicsToTrustedIssuers[claimTopic][i] == _trustedIssuer) {\n                    _claimTopicsToTrustedIssuers[claimTopic][i] =\n                    _claimTopicsToTrustedIssuers[claimTopic][topicsLength - 1];\n                    _claimTopicsToTrustedIssuers[claimTopic].pop();\n                    break;\n                }\n            }\n        }\n        delete _trustedIssuerClaimTopics[address(_trustedIssuer)];\n        emit TrustedIssuerRemoved(_trustedIssuer);\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-updateIssuerClaimTopics}.\n     */\n    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external override onlyOwner {\n        require(address(_trustedIssuer) != address(0), \"invalid argument - zero address\");\n        require(_trustedIssuerClaimTopics[address(_trustedIssuer)].length != 0, \"NOT a trusted issuer\");\n        require(_claimTopics.length <= 15, \"cannot have more than 15 claim topics\");\n        require(_claimTopics.length > 0, \"claim topics cannot be empty\");\n\n        for (uint256 i = 0; i < _trustedIssuerClaimTopics[address(_trustedIssuer)].length; i++) {\n            uint256 claimTopic = _trustedIssuerClaimTopics[address(_trustedIssuer)][i];\n            uint256 topicsLength = _claimTopicsToTrustedIssuers[claimTopic].length;\n            for (uint256 j = 0; j < topicsLength; j++) {\n                if (_claimTopicsToTrustedIssuers[claimTopic][j] == _trustedIssuer) {\n                    _claimTopicsToTrustedIssuers[claimTopic][j] =\n                    _claimTopicsToTrustedIssuers[claimTopic][topicsLength - 1];\n                    _claimTopicsToTrustedIssuers[claimTopic].pop();\n                    break;\n                }\n            }\n        }\n        _trustedIssuerClaimTopics[address(_trustedIssuer)] = _claimTopics;\n        for (uint256 i = 0; i < _claimTopics.length; i++) {\n            _claimTopicsToTrustedIssuers[_claimTopics[i]].push(_trustedIssuer);\n        }\n        emit ClaimTopicsUpdated(_trustedIssuer, _claimTopics);\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-getTrustedIssuers}.\n     */\n    function getTrustedIssuers() external view override returns (IClaimIssuer[] memory) {\n        return _trustedIssuers;\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-getTrustedIssuersForClaimTopic}.\n     */\n    function getTrustedIssuersForClaimTopic(uint256 claimTopic) external view override returns (IClaimIssuer[] memory) {\n        return _claimTopicsToTrustedIssuers[claimTopic];\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-isTrustedIssuer}.\n     */\n    function isTrustedIssuer(address _issuer) external view override returns (bool) {\n        if(_trustedIssuerClaimTopics[_issuer].length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-getTrustedIssuerClaimTopics}.\n     */\n    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view override returns (uint256[] memory) {\n        require(_trustedIssuerClaimTopics[address(_trustedIssuer)].length != 0, \"trusted Issuer doesn\\'t exist\");\n        return _trustedIssuerClaimTopics[address(_trustedIssuer)];\n    }\n\n    /**\n     *  @dev See {ITrustedIssuersRegistry-hasClaimTopic}.\n     */\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view override returns (bool) {\n        uint256 length = _trustedIssuerClaimTopics[_issuer].length;\n        uint256[] memory claimTopics = _trustedIssuerClaimTopics[_issuer];\n        for (uint256 i = 0; i < length; i++) {\n            if (claimTopics[i] == _claimTopic) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/registry/interface/IClaimTopicsRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface IClaimTopicsRegistry {\n    /**\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n     *  the event is emitted by the 'addClaimTopic' function\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\n     */\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n\n    /**\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n     *  the event is emitted by the 'removeClaimTopic' function\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\n     */\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    /**\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\n     * Only owner can call.\n     * emits `ClaimTopicAdded` event\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\n     * @param _claimTopic The claim topic index\n     */\n    function addClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\n     *  Only owner can call.\n     *  emits `ClaimTopicRemoved` event\n     *  @param _claimTopic The claim topic index\n     */\n    function removeClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Get the trusted claim topics for the security token\n     *  @return Array of trusted claim topics\n     */\n    function getClaimTopics() external view returns (uint256[] memory);\n}\n"
    },
    "contracts/registry/interface/IIdentityRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./ITrustedIssuersRegistry.sol\";\nimport \"./IClaimTopicsRegistry.sol\";\nimport \"./IIdentityRegistryStorage.sol\";\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IIdentityRegistry {\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\n     */\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\n\n    /**\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `identityStorage` is the address of the Identity Registry Storage contract\n     */\n    event IdentityStorageSet(address indexed identityStorage);\n\n    /**\n     *  this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\n     */\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\n\n    /**\n     *  this event is emitted when an Identity is registered into the Identity Registry.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity is removed from the Identity Registry.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\n\n    /**\n     *  @dev Register an identity contract corresponding to a user address.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityRegistered` event\n     */\n    function registerIdentity(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the identity registry.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityRemoved` event\n     */\n    function deleteIdentity(address _userAddress) external;\n\n    /**\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\n     *  emits `IdentityStorageSet` event\n     */\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\n\n    /**\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\n     *  emits `ClaimTopicsRegistrySet` event\n     */\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\n\n    /**\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\n     *  emits `TrustedIssuersRegistrySet` event\n     */\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryUpdated` event\n     */\n    function updateCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityUpdated` event\n     */\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\n\n    /**\n     *  @dev function allowing to register identities in batch\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  Requires that none of the users has an identity contract already registered.\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the users\n     *  @param _identities The addresses of the corresponding identity contracts\n     *  @param _countries The countries of the corresponding investors\n     *  emits _userAddresses.length `IdentityRegistered` events\n     */\n    function batchRegisterIdentity(\n        address[] calldata _userAddresses,\n        IIdentity[] calldata _identities,\n        uint16[] calldata _countries\n    ) external;\n\n    /**\n     *  @dev This functions checks whether a wallet has its Identity registered or not\n     *  in the Identity Registry.\n     *  @param _userAddress The address of the user to be checked.\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\n     */\n    function contains(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev This functions checks whether an identity contract\n     *  corresponding to the provided user address has the required claims or not based\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\n     *  @param _userAddress The address of the user to be verified.\n     *  @return 'True' if the address is verified, 'false' if not.\n     */\n    function isVerified(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function identity(address _userAddress) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function investorCountry(address _userAddress) external view returns (uint16);\n\n    /**\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\n     */\n    function identityStorage() external view returns (IIdentityRegistryStorage);\n\n    /**\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\n     */\n    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\n\n    /**\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\n     */\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\n}\n"
    },
    "contracts/registry/interface/IIdentityRegistryStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ninterface IIdentityRegistryStorage {\n\n    /// events\n\n    /**\n     *  this event is emitted when an Identity is registered into the storage contract.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityStored(address indexed investorAddress, IIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity is removed from the storage contract.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityUnstored(address indexed investorAddress, IIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityModified(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryModified(address indexed investorAddress, uint16 indexed country);\n\n    /**\n     *  this event is emitted when an Identity Registry is bound to the storage contract\n     *  the event is emitted by the 'addIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry added\n     */\n    event IdentityRegistryBound(address indexed identityRegistry);\n\n    /**\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\n     *  the event is emitted by the 'removeIdentityRegistry' function\n     *  `identityRegistry` is the address of the identity registry removed\n     */\n    event IdentityRegistryUnbound(address indexed identityRegistry);\n\n    /// functions\n\n    /**\n     *  @dev adds an identity contract corresponding to a user address in the storage.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityStored` event\n     */\n    function addIdentityToStorage(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the storage.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityUnstored` event\n     */\n    function removeIdentityFromStorage(address _userAddress) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryModified` event\n     */\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by an address set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityModified` event\n     */\n    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external;\n\n    /**\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\n     *  cannot bind more than 300 IR to 1 IRS\n     *  @param _identityRegistry The identity registry address to add.\n     */\n    function bindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\n     *  @param _identityRegistry The identity registry address to remove.\n     */\n    function unbindIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev Returns the identity registries linked to the storage contract\n     */\n    function linkedIdentityRegistries() external view returns (address[] memory);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedIdentity(address _userAddress) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function storedInvestorCountry(address _userAddress) external view returns (uint16);\n}\n"
    },
    "contracts/registry/interface/ITrustedIssuersRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\n\ninterface ITrustedIssuersRegistry {\n    /**\n     *  this event is emitted when a trusted issuer is added in the registry.\n     *  the event is emitted by the addTrustedIssuer function\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\n     */\n    event TrustedIssuerAdded(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\n\n    /**\n     *  this event is emitted when a trusted issuer is removed from the registry.\n     *  the event is emitted by the removeTrustedIssuer function\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n     */\n    event TrustedIssuerRemoved(IClaimIssuer indexed trustedIssuer);\n\n    /**\n     *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\n     *  the event is emitted by the updateIssuerClaimTopics function\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\n     */\n    event ClaimTopicsUpdated(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\n\n    /**\n     *  @dev registers a ClaimIssuer contract as trusted claim issuer.\n     *  Requires that a ClaimIssuer contract doesn't already exist\n     *  Requires that the claimTopics set is not empty\n     *  Requires that there is no more than 15 claimTopics\n     *  Requires that there is no more than 50 Trusted issuers\n     *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits a `TrustedIssuerAdded` event\n     */\n    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\n\n    /**\n     *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\n     *  Requires that the claim issuer contract to be registered first\n     *  @param _trustedIssuer the claim issuer to remove.\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits a `TrustedIssuerRemoved` event\n     */\n    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external;\n\n    /**\n     *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\n     *  Requires that this ClaimIssuer contract already exists in the registry\n     *  Requires that the provided claimTopics set is not empty\n     *  Requires that there is no more than 15 claimTopics\n     *  @param _trustedIssuer the claim issuer to update.\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\n     *  emits a `ClaimTopicsUpdated` event\n     */\n    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\n\n    /**\n     *  @dev Function for getting all the trusted claim issuers stored.\n     *  @return array of all claim issuers registered.\n     */\n    function getTrustedIssuers() external view returns (IClaimIssuer[] memory);\n\n    /**\n     *  @dev Function for getting all the trusted issuer allowed for a given claim topic.\n     *  @param claimTopic the claim topic to get the trusted issuers for.\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\n     */\n    function getTrustedIssuersForClaimTopic(uint256 claimTopic) external view returns (IClaimIssuer[] memory);\n\n    /**\n     *  @dev Checks if the ClaimIssuer contract is trusted\n     *  @param _issuer the address of the ClaimIssuer contract\n     *  @return true if the issuer is trusted, false otherwise.\n     */\n    function isTrustedIssuer(address _issuer) external view returns (bool);\n\n    /**\n     *  @dev Function for getting all the claim topic of trusted claim issuer\n     *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\n     *  @param _trustedIssuer the trusted issuer concerned.\n     *  @return The set of claim topics that the trusted issuer is allowed to emit\n     */\n    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view returns (uint256[] memory);\n\n    /**\n     *  @dev Function for checking if the trusted claim issuer is allowed\n     *  to emit a certain claim topic\n     *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\n     *  @return true if the issuer is trusted for this claim topic.\n     */\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view returns (bool);\n}\n"
    },
    "contracts/registry/storage/CTRStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ncontract CTRStorage {\n    /// @dev All required Claim Topics\n    uint256[] internal _claimTopics;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}"
    },
    "contracts/registry/storage/IRSStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\ncontract IRSStorage {\n    /// @dev struct containing the identity contract and the country of the user\n    struct Identity {\n        IIdentity identityContract;\n        uint16 investorCountry;\n    }\n    /// @dev mapping between a user address and the corresponding identity\n    mapping(address => Identity) internal _identities;\n\n    /// @dev array of Identity Registries linked to this storage\n    address[] internal _identityRegistries;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}"
    },
    "contracts/registry/storage/IRStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../interface/IClaimTopicsRegistry.sol\";\nimport \"../interface/ITrustedIssuersRegistry.sol\";\nimport \"../interface/IIdentityRegistryStorage.sol\";\n\ncontract IRStorage {\n    /// @dev Address of the ClaimTopicsRegistry Contract\n    IClaimTopicsRegistry internal _tokenTopicsRegistry;\n\n    /// @dev Address of the TrustedIssuersRegistry Contract\n    ITrustedIssuersRegistry internal _tokenIssuersRegistry;\n\n    /// @dev Address of the IdentityRegistryStorage Contract\n    IIdentityRegistryStorage internal _tokenIdentityStorage;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}"
    },
    "contracts/registry/storage/TIRStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\n\ncontract TIRStorage {\n    /// @dev Array containing all TrustedIssuers identity contract address.\n    IClaimIssuer[] internal _trustedIssuers;\n\n    /// @dev Mapping between a trusted issuer address and its corresponding claimTopics.\n    mapping(address => uint256[]) internal _trustedIssuerClaimTopics;\n\n    /// @dev Mapping between a claim topic and the allowed trusted issuers for it.\n    mapping(uint256 => IClaimIssuer[]) internal _claimTopicsToTrustedIssuers;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/roles/AgentRole.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Roles.sol\";\n\ncontract AgentRole is Ownable {\n    using Roles for Roles.Role;\n\n    Roles.Role private _agents;\n\n    event AgentAdded(address indexed _agent);\n    event AgentRemoved(address indexed _agent);\n\n    modifier onlyAgent() {\n        require(isAgent(msg.sender), \"AgentRole: caller does not have the Agent role\");\n        _;\n    }\n\n    function addAgent(address _agent) public onlyOwner {\n        require(_agent != address(0), \"invalid argument - zero address\");\n        _agents.add(_agent);\n        emit AgentAdded(_agent);\n    }\n\n    function removeAgent(address _agent) public onlyOwner {\n        require(_agent != address(0), \"invalid argument - zero address\");\n        _agents.remove(_agent);\n        emit AgentRemoved(_agent);\n    }\n\n    function isAgent(address _agent) public view returns (bool) {\n        return _agents.has(_agent);\n    }\n}\n"
    },
    "contracts/roles/AgentRoleUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Roles.sol\";\n\ncontract AgentRoleUpgradeable is OwnableUpgradeable {\n    using Roles for Roles.Role;\n\n    Roles.Role private _agents;\n\n    event AgentAdded(address indexed _agent);\n    event AgentRemoved(address indexed _agent);\n\n    modifier onlyAgent() {\n        require(isAgent(msg.sender), \"AgentRole: caller does not have the Agent role\");\n        _;\n    }\n\n    function addAgent(address _agent) public onlyOwner {\n        require(_agent != address(0), \"invalid argument - zero address\");\n        _agents.add(_agent);\n        emit AgentAdded(_agent);\n    }\n\n    function removeAgent(address _agent) public onlyOwner {\n        require(_agent != address(0), \"invalid argument - zero address\");\n        _agents.remove(_agent);\n        emit AgentRemoved(_agent);\n    }\n\n    function isAgent(address _agent) public view returns (bool) {\n        return _agents.has(_agent);\n    }\n}\n"
    },
    "contracts/roles/permissioning/agent/AgentManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\n\nimport \"../../../token/IToken.sol\";\nimport \"../../../registry/interface/IIdentityRegistry.sol\";\nimport \"./AgentRoles.sol\";\n\ncontract AgentManager is AgentRoles {\n    /// @dev the token managed by this AgentManager contract\n    IToken public token;\n\n    constructor(address _token) {\n        token = IToken(_token);\n    }\n\n    /**\n     *  @dev calls the `forcedTransfer` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-forcedTransfer}.\n     *  Requires that `_onchainID` is set as TransferManager on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callForcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isTransferManager(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Transfer Manager\"\n        );\n        token.forcedTransfer(_from, _to, _amount);\n    }\n\n    /**\n     *  @dev calls the `batchForcedTransfer` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-batchForcedTransfer}.\n     *  Requires that `_onchainID` is set as TransferManager on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBatchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isTransferManager(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Transfer Manager\"\n        );\n        token.batchForcedTransfer(_fromList, _toList, _amounts);\n    }\n\n    /**\n     *  @dev calls the `pause` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-pause}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callPause(IIdentity _onchainID) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.pause();\n    }\n\n    /**\n     *  @dev calls the `unpause` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-unpause}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callUnpause(IIdentity _onchainID) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.unpause();\n    }\n\n    /**\n     *  @dev calls the `mint` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-mint}.\n     *  Requires that `_onchainID` is set as SupplyModifier on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callMint(\n        address _to,\n        uint256 _amount,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isSupplyModifier(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Supply Modifier\"\n        );\n        token.mint(_to, _amount);\n    }\n\n    /**\n     *  @dev calls the `batchMint` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-batchMint}.\n     *  Requires that `_onchainID` is set as SupplyModifier on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBatchMint(\n        address[] calldata _toList,\n        uint256[] calldata _amounts,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isSupplyModifier(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Supply Modifier\"\n        );\n        token.batchMint(_toList, _amounts);\n    }\n\n    /**\n     *  @dev calls the `burn` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-burn}.\n     *  Requires that `_onchainID` is set as SupplyModifier on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBurn(\n        address _userAddress,\n        uint256 _amount,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isSupplyModifier(\n                address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Supply Modifier\"\n        );\n        token.burn(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev calls the `batchBurn` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-batchBurn}.\n     *  Requires that `_onchainID` is set as SupplyModifier on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBatchBurn(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isSupplyModifier(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Supply Modifier\"\n        );\n        token.batchBurn(_userAddresses, _amounts);\n    }\n\n    /**\n     *  @dev calls the `setAddressFrozen` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-setAddressFrozen}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetAddressFrozen(\n        address _userAddress,\n        bool _freeze,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.setAddressFrozen(_userAddress, _freeze);\n    }\n\n    /**\n     *  @dev calls the `batchSetAddressFrozen` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-batchSetAddressFrozen}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBatchSetAddressFrozen(\n        address[] calldata _userAddresses,\n        bool[] calldata _freeze,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.batchSetAddressFrozen(_userAddresses, _freeze);\n    }\n\n    /**\n     *  @dev calls the `freezePartialTokens` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-freezePartialTokens}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callFreezePartialTokens(\n        address _userAddress,\n        uint256 _amount,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.freezePartialTokens(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev calls the `batchFreezePartialTokens` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-batchFreezePartialTokens}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBatchFreezePartialTokens(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.batchFreezePartialTokens(_userAddresses, _amounts);\n    }\n\n    /**\n     *  @dev calls the `unfreezePartialTokens` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-unfreezePartialTokens}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callUnfreezePartialTokens(\n        address _userAddress,\n        uint256 _amount,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.unfreezePartialTokens(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev calls the `batchUnfreezePartialTokens` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-batchUnfreezePartialTokens}.\n     *  Requires that `_onchainID` is set as Freezer on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callBatchUnfreezePartialTokens(\n        address[] calldata _userAddresses,\n        uint256[] calldata _amounts,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isFreezer(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Freezer\");\n        token.batchUnfreezePartialTokens(_userAddresses, _amounts);\n    }\n\n    /**\n     *  @dev calls the `recoveryAddress` function on the Token contract\n     *  AgentManager has to be set as agent on the token smart contract to process this function\n     *  See {IToken-recoveryAddress}.\n     *  Requires that `_managerOnchainID` is set as RecoveryAgent on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_managerOnchainID`\n     *  @param _managerOnchainID the onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callRecoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _onchainID,\n        IIdentity _managerOnchainID\n    ) external {\n        require(\n            isRecoveryAgent(address(_managerOnchainID)) &&\n            _managerOnchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT Recovery Agent\"\n        );\n        token.recoveryAddress(_lostWallet, _newWallet, _onchainID);\n    }\n\n    /**\n     *  @dev calls the `registerIdentity` function on the Identity Registry contract\n     *  AgentManager has to be set as agent on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-registerIdentity}.\n     *  Requires that `ManagerOnchainID` is set as WhiteListManager on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_managerOnchainID`\n     *  @param _managerOnchainID the onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callRegisterIdentity(\n        address _userAddress,\n        IIdentity _onchainID,\n        uint16 _country,\n        IIdentity _managerOnchainID\n    ) external {\n        require(\n            isWhiteListManager(address(_managerOnchainID)) &&\n            _managerOnchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT WhiteList Manager\"\n        );\n        token.identityRegistry().registerIdentity(_userAddress, _onchainID, _country);\n    }\n\n    /**\n     *  @dev calls the `updateIdentity` function on the Identity Registry contract\n     *  AgentManager has to be set as agent on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-updateIdentity}.\n     *  Requires that `_onchainID` is set as WhiteListManager on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callUpdateIdentity(\n        address _userAddress,\n        IIdentity _identity,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isWhiteListManager(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT WhiteList Manager\"\n        );\n        token.identityRegistry().updateIdentity(_userAddress, _identity);\n    }\n\n    /**\n     *  @dev calls the `updateCountry` function on the Identity Registry contract\n     *  AgentManager has to be set as agent on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-updateCountry}.\n     *  Requires that `_onchainID` is set as WhiteListManager on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callUpdateCountry(\n        address _userAddress,\n        uint16 _country,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isWhiteListManager(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT WhiteList Manager\"\n        );\n        token.identityRegistry().updateCountry(_userAddress, _country);\n    }\n\n    /**\n     *  @dev calls the `deleteIdentity` function on the Identity Registry contract\n     *  AgentManager has to be set as agent on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-deleteIdentity}.\n     *  Requires that `_onchainID` is set as WhiteListManager on the AgentManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callDeleteIdentity(address _userAddress, IIdentity _onchainID) external {\n        require(\n            isWhiteListManager(address(_onchainID)) &&\n            _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2)\n            , \"Role: Sender is NOT WhiteList Manager\"\n        );\n        token.identityRegistry().deleteIdentity(_userAddress);\n    }\n}\n"
    },
    "contracts/roles/permissioning/agent/AgentRoles.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../Roles.sol\";\n\ncontract AgentRoles is Ownable {\n    using Roles for Roles.Role;\n\n    /// variables\n\n    Roles.Role private _supplyModifiers;\n    Roles.Role private _freezers;\n    Roles.Role private _transferManagers;\n    Roles.Role private _recoveryAgents;\n    Roles.Role private _complianceAgents;\n    Roles.Role private _whiteListManagers;\n    Roles.Role private _agentAdmin;\n\n    /// events\n\n    event RoleAdded(address indexed _agent, string _role);\n    event RoleRemoved(address indexed _agent, string _role);\n\n    /// modifiers\n\n    modifier onlyAdmin() {\n        require(owner() == msg.sender || isAgentAdmin(_msgSender()), \"Role: Sender is NOT Admin\");\n        _;\n    }\n\n    /// functions\n\n    /// @dev AgentAdmin Role _agentAdmin\n\n    function addAgentAdmin(address _agent) external onlyAdmin {\n        _agentAdmin.add(_agent);\n        string memory _role = \"AgentAdmin\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeAgentAdmin(address _agent) external onlyAdmin {\n        _agentAdmin.remove(_agent);\n        string memory _role = \"AgentAdmin\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addSupplyModifier(address _agent) external onlyAdmin {\n        _supplyModifiers.add(_agent);\n        string memory _role = \"SupplyModifier\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeSupplyModifier(address _agent) external onlyAdmin {\n        _supplyModifiers.remove(_agent);\n        string memory _role = \"SupplyModifier\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addFreezer(address _agent) external onlyAdmin {\n        _freezers.add(_agent);\n        string memory _role = \"Freezer\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeFreezer(address _agent) external onlyAdmin {\n        _freezers.remove(_agent);\n        string memory _role = \"Freezer\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addTransferManager(address _agent) external onlyAdmin {\n        _transferManagers.add(_agent);\n        string memory _role = \"TransferManager\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeTransferManager(address _agent) external onlyAdmin {\n        _transferManagers.remove(_agent);\n        string memory _role = \"TransferManager\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addRecoveryAgent(address _agent) external onlyAdmin {\n        _recoveryAgents.add(_agent);\n        string memory _role = \"RecoveryAgent\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeRecoveryAgent(address _agent) external onlyAdmin {\n        _recoveryAgents.remove(_agent);\n        string memory _role = \"RecoveryAgent\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addComplianceAgent(address _agent) external onlyAdmin {\n        _complianceAgents.add(_agent);\n        string memory _role = \"ComplianceAgent\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeComplianceAgent(address _agent) external onlyAdmin {\n        _complianceAgents.remove(_agent);\n        string memory _role = \"ComplianceAgent\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addWhiteListManager(address _agent) external onlyAdmin {\n        _whiteListManagers.add(_agent);\n        string memory _role = \"WhiteListManager\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeWhiteListManager(address _agent) external onlyAdmin {\n        _whiteListManagers.remove(_agent);\n        string memory _role = \"WhiteListManager\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function isAgentAdmin(address _agent) public view returns (bool) {\n        return _agentAdmin.has(_agent);\n    }\n\n    function isWhiteListManager(address _agent) public view returns (bool) {\n        return _whiteListManagers.has(_agent);\n    }\n\n    function isComplianceAgent(address _agent) public view returns (bool) {\n        return _complianceAgents.has(_agent);\n    }\n\n    function isRecoveryAgent(address _agent) public view returns (bool) {\n        return _recoveryAgents.has(_agent);\n    }\n\n    function isTransferManager(address _agent) public view returns (bool) {\n        return _transferManagers.has(_agent);\n    }\n\n    function isFreezer(address _agent) public view returns (bool) {\n        return _freezers.has(_agent);\n    }\n\n    function isSupplyModifier(address _agent) public view returns (bool) {\n        return _supplyModifiers.has(_agent);\n    }\n}\n"
    },
    "contracts/roles/permissioning/agent/AgentRolesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../../Roles.sol\";\n\ncontract AgentRolesUpgradeable is OwnableUpgradeable\n\n {\n    using Roles for Roles.Role;\n\n    /// variables\n\n    Roles.Role private _supplyModifiers;\n    Roles.Role private _freezers;\n    Roles.Role private _transferManagers;\n    Roles.Role private _recoveryAgents;\n    Roles.Role private _complianceAgents;\n    Roles.Role private _whiteListManagers;\n    Roles.Role private _agentAdmin;\n\n    /// events\n\n    event RoleAdded(address indexed _agent, string _role);\n    event RoleRemoved(address indexed _agent, string _role);\n\n    /// modifiers\n\n    modifier onlyAdmin() {\n        require(owner() == msg.sender || isAgentAdmin(_msgSender()), \"Role: Sender is NOT Admin\");\n        _;\n    }\n\n    /// functions\n\n    /// @dev AgentAdmin Role _agentAdmin\n\n    function addAgentAdmin(address _agent) external onlyAdmin {\n        _agentAdmin.add(_agent);\n        string memory _role = \"AgentAdmin\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeAgentAdmin(address _agent) external onlyAdmin {\n        _agentAdmin.remove(_agent);\n        string memory _role = \"AgentAdmin\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addSupplyModifier(address _agent) external onlyAdmin {\n        _supplyModifiers.add(_agent);\n        string memory _role = \"SupplyModifier\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeSupplyModifier(address _agent) external onlyAdmin {\n        _supplyModifiers.remove(_agent);\n        string memory _role = \"SupplyModifier\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addFreezer(address _agent) external onlyAdmin {\n        _freezers.add(_agent);\n        string memory _role = \"Freezer\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeFreezer(address _agent) external onlyAdmin {\n        _freezers.remove(_agent);\n        string memory _role = \"Freezer\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addTransferManager(address _agent) external onlyAdmin {\n        _transferManagers.add(_agent);\n        string memory _role = \"TransferManager\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeTransferManager(address _agent) external onlyAdmin {\n        _transferManagers.remove(_agent);\n        string memory _role = \"TransferManager\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addRecoveryAgent(address _agent) external onlyAdmin {\n        _recoveryAgents.add(_agent);\n        string memory _role = \"RecoveryAgent\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeRecoveryAgent(address _agent) external onlyAdmin {\n        _recoveryAgents.remove(_agent);\n        string memory _role = \"RecoveryAgent\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addComplianceAgent(address _agent) external onlyAdmin {\n        _complianceAgents.add(_agent);\n        string memory _role = \"ComplianceAgent\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeComplianceAgent(address _agent) external onlyAdmin {\n        _complianceAgents.remove(_agent);\n        string memory _role = \"ComplianceAgent\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function addWhiteListManager(address _agent) external onlyAdmin {\n        _whiteListManagers.add(_agent);\n        string memory _role = \"WhiteListManager\";\n        emit RoleAdded(_agent, _role);\n    }\n\n    function removeWhiteListManager(address _agent) external onlyAdmin {\n        _whiteListManagers.remove(_agent);\n        string memory _role = \"WhiteListManager\";\n        emit RoleRemoved(_agent, _role);\n    }\n\n    function isAgentAdmin(address _agent) public view returns (bool) {\n        return _agentAdmin.has(_agent);\n    }\n\n    function isWhiteListManager(address _agent) public view returns (bool) {\n        return _whiteListManagers.has(_agent);\n    }\n\n    function isComplianceAgent(address _agent) public view returns (bool) {\n        return _complianceAgents.has(_agent);\n    }\n\n    function isRecoveryAgent(address _agent) public view returns (bool) {\n        return _recoveryAgents.has(_agent);\n    }\n\n    function isTransferManager(address _agent) public view returns (bool) {\n        return _transferManagers.has(_agent);\n    }\n\n    function isFreezer(address _agent) public view returns (bool) {\n        return _freezers.has(_agent);\n    }\n\n    function isSupplyModifier(address _agent) public view returns (bool) {\n        return _supplyModifiers.has(_agent);\n    }\n}\n"
    },
    "contracts/roles/permissioning/owner/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../../../token/IToken.sol\";\nimport \"../../../registry/interface/IIdentityRegistry.sol\";\nimport \"../../../registry/interface/ITrustedIssuersRegistry.sol\";\nimport \"../../../registry/interface/IClaimTopicsRegistry.sol\";\nimport \"../../../compliance/legacy/ICompliance.sol\";\nimport \"./OwnerRoles.sol\";\nimport \"../../AgentRole.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\";\n\ncontract OwnerManager is OwnerRoles {\n    /// @dev the token that is managed by this OwnerManager Contract\n    IToken public token;\n\n    /// @dev Event emitted for each executed interaction with the compliance contract.\n    ///\n    /// For gas efficiency, only the interaction calldata selector (first 4\n    /// bytes) is included in the event. For interactions without calldata or\n    /// whose calldata is shorter than 4 bytes, the selector will be `0`.\n    event ComplianceInteraction(address indexed target, bytes4 selector);\n\n    /**\n     *  @dev the constructor initiates the OwnerManager contract\n     *  and sets msg.sender as owner of the contract\n     *  @param _token the token managed by this OwnerManager contract\n     */\n    constructor(address _token) {\n        token = IToken(_token);\n    }\n\n    /**\n     *  @dev calls the `setIdentityRegistry` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-setIdentityRegistry}.\n     *  Requires that `_onchainID` is set as RegistryAddressSetter on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetIdentityRegistry(address _identityRegistry, IIdentity _onchainID) external {\n        require(\n            isRegistryAddressSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Registry Address Setter\"\n        );\n        token.setIdentityRegistry(_identityRegistry);\n    }\n\n    /**\n     *  @dev calls the `setCompliance` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-setCompliance}.\n     *  Requires that `_onchainID` is set as ComplianceSetter on the OwnerManager contract\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetCompliance(address _compliance, IIdentity _onchainID) external {\n        require(\n            isComplianceSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Compliance Setter\"\n        );\n        token.setCompliance(_compliance);\n    }\n\n    /**\n     *  @dev calls any onlyOwner function available on the compliance contract\n     *  OwnerManager has to be set as owner on the compliance smart contract to process this function\n     *  Requires that `_onchainID` is set as ComplianceManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callComplianceFunction(bytes calldata callData, IIdentity _onchainID) external {\n        require(\n            isComplianceManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Compliance Manager\");\n        address target = address(token.compliance());\n\n        // NOTE: Use assembly to call the interaction instead of a low level\n        // call for two reasons:\n        // - We don't want to copy the return data, since we discard it for\n        // interactions.\n        // - Solidity will under certain conditions generate code to copy input\n        // calldata twice to memory (the second being a \"memcopy loop\").\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            calldatacopy(freeMemoryPointer, callData.offset, callData.length)\n            if iszero(\n                call(\n                    gas(),\n                    target,\n                    0,\n                    freeMemoryPointer,\n                    callData.length,\n                    0,\n                    0\n                    ))\n                {\n                    returndatacopy(0, 0, returndatasize())\n                    revert(0, returndatasize())\n                }\n            }\n\n        emit ComplianceInteraction(target, _selector(callData));\n\n        }\n\n    /**\n     *  @dev calls the `setName` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-setName}.\n     *  Requires that `_onchainID` is set as TokenInfoManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetTokenName(string calldata _name, IIdentity _onchainID) external {\n        require(\n            isTokenInfoManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Token Information Manager\"\n        );\n        token.setName(_name);\n    }\n\n    /**\n     *  @dev calls the `setSymbol` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-setSymbol}.\n     *  Requires that `_onchainID` is set as TokenInfoManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetTokenSymbol(string calldata _symbol, IIdentity _onchainID) external {\n        require(\n            isTokenInfoManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Token Information Manager\"\n        );\n        token.setSymbol(_symbol);\n    }\n\n    /**\n     *  @dev calls the `setOnchainID` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-setOnchainID}.\n     *  Requires that `_tokenOnchainID` is set as TokenInfoManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetTokenOnchainID(address _tokenOnchainID, IIdentity _onchainID) external {\n        require(\n            isTokenInfoManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Token Information Manager\"\n        );\n        token.setOnchainID(_tokenOnchainID);\n    }\n\n    /**\n     *  @dev calls the `setClaimTopicsRegistry` function on the Identity Registry contract\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-setClaimTopicsRegistry}.\n     *  Requires that `_onchainID` is set as RegistryAddressSetter on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetClaimTopicsRegistry(address _claimTopicsRegistry, IIdentity _onchainID) external {\n        require(\n            isRegistryAddressSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Registry Address Setter\"\n        );\n        token.identityRegistry().setClaimTopicsRegistry(_claimTopicsRegistry);\n    }\n\n    /**\n     *  @dev calls the `setTrustedIssuersRegistry` function on the Identity Registry contract\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-setTrustedIssuersRegistry}.\n     *  Requires that `_onchainID` is set as RegistryAddressSetter on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callSetTrustedIssuersRegistry(address _trustedIssuersRegistry, IIdentity _onchainID) external {\n        require(\n            isRegistryAddressSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT Registry Address Setter\"\n        );\n        token.identityRegistry().setTrustedIssuersRegistry(_trustedIssuersRegistry);\n    }\n\n    /**\n     *  @dev calls the `addTrustedIssuer` function on the Trusted Issuers Registry contract\n     *  OwnerManager has to be set as owner on the Trusted Issuers Registry smart contract to process this function\n     *  See {ITrustedIssuersRegistry-addTrustedIssuer}.\n     *  Requires that `_onchainID` is set as IssuersRegistryManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callAddTrustedIssuer(\n        IClaimIssuer _trustedIssuer,\n        uint256[] calldata _claimTopics,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isIssuersRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT IssuersRegistryManager\"\n        );\n        token.identityRegistry().issuersRegistry().addTrustedIssuer(_trustedIssuer, _claimTopics);\n    }\n\n    /**\n     *  @dev calls the `removeTrustedIssuer` function on the Trusted Issuers Registry contract\n     *  OwnerManager has to be set as owner on the Trusted Issuers Registry smart contract to process this function\n     *  See {ITrustedIssuersRegistry-removeTrustedIssuer}.\n     *  Requires that `_onchainID` is set as IssuersRegistryManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callRemoveTrustedIssuer(IClaimIssuer _trustedIssuer, IIdentity _onchainID) external {\n        require(\n            isIssuersRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT IssuersRegistryManager\"\n        );\n        token.identityRegistry().issuersRegistry().removeTrustedIssuer(_trustedIssuer);\n    }\n\n    /**\n     *  @dev calls the `updateIssuerClaimTopics` function on the Trusted Issuers Registry contract\n     *  OwnerManager has to be set as owner on the Trusted Issuers Registry smart contract to process this function\n     *  See {ITrustedIssuersRegistry-updateIssuerClaimTopics}.\n     *  Requires that `_onchainID` is set as IssuersRegistryManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callUpdateIssuerClaimTopics(\n        IClaimIssuer _trustedIssuer,\n        uint256[] calldata _claimTopics,\n        IIdentity _onchainID\n    ) external {\n        require(\n            isIssuersRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT IssuersRegistryManager\"\n        );\n        token.identityRegistry().issuersRegistry().updateIssuerClaimTopics(_trustedIssuer, _claimTopics);\n    }\n\n    /**\n     *  @dev calls the `addClaimTopic` function on the Claim Topics Registry contract\n     *  OwnerManager has to be set as owner on the Claim Topics Registry smart contract to process this function\n     *  See {IClaimTopicsRegistry-addClaimTopic}.\n     *  Requires that `_onchainID` is set as ClaimRegistryManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callAddClaimTopic(uint256 _claimTopic, IIdentity _onchainID) external {\n        require(\n            isClaimRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT ClaimRegistryManager\"\n        );\n        token.identityRegistry().topicsRegistry().addClaimTopic(_claimTopic);\n    }\n\n    /**\n     *  @dev calls the `removeClaimTopic` function on the Claim Topics Registry contract\n     *  OwnerManager has to be set as owner on the Claim Topics Registry smart contract to process this function\n     *  See {IClaimTopicsRegistry-removeClaimTopic}.\n     *  Requires that `_onchainID` is set as ClaimRegistryManager on the OwnerManager contract\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \"i call this function and i am Bob\"\n     */\n    function callRemoveClaimTopic(uint256 _claimTopic, IIdentity _onchainID) external {\n        require(\n            isClaimRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\n            \"Role: Sender is NOT ClaimRegistryManager\"\n        );\n        token.identityRegistry().topicsRegistry().removeClaimTopic(_claimTopic);\n    }\n\n    /**\n     *  @dev calls the `transferOwnershipOnTokenContract` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-transferOwnershipOnTokenContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callTransferOwnershipOnTokenContract(address _newOwner) external onlyAdmin {\n        Ownable(address(token)).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev calls the `transferOwnershipOnIdentityRegistryContract` function on the Identity Registry contract\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-transferOwnershipOnIdentityRegistryContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callTransferOwnershipOnIdentityRegistryContract(address _newOwner) external onlyAdmin {\n        Ownable(address(token.identityRegistry())).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev calls the `transferOwnershipOnComplianceContract` function on the Compliance contract\n     *  OwnerManager has to be set as owner on the Compliance smart contract to process this function\n     *  See {ICompliance-transferOwnershipOnComplianceContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callTransferOwnershipOnComplianceContract(address _newOwner) external onlyAdmin {\n        Ownable(address(token.compliance())).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev calls the `transferOwnershipOnClaimTopicsRegistryContract` function on the Claim Topics Registry contract\n     *  OwnerManager has to be set as owner on the Claim Topics registry smart contract to process this function\n     *  See {IClaimTopicsRegistry-transferOwnershipOnClaimTopicsRegistryContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callTransferOwnershipOnClaimTopicsRegistryContract(address _newOwner) external onlyAdmin {\n        Ownable(address(token.identityRegistry().topicsRegistry())).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev calls the `transferOwnershipOnIssuersRegistryContract` function on the Trusted Issuers Registry contract\n     *  OwnerManager has to be set as owner on the Trusted Issuers registry smart contract to process this function\n     *  See {ITrustedIssuersRegistry-transferOwnershipOnIssuersRegistryContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callTransferOwnershipOnIssuersRegistryContract(address _newOwner) external onlyAdmin {\n        Ownable(address(token.identityRegistry().issuersRegistry())).transferOwnership(_newOwner);\n    }\n\n    /**\n     *  @dev calls the `addAgentOnTokenContract` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-addAgentOnTokenContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callAddAgentOnTokenContract(address _agent) external onlyAdmin {\n        AgentRole(address(token)).addAgent(_agent);\n    }\n\n    /**\n     *  @dev calls the `removeAgentOnTokenContract` function on the token contract\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\n     *  See {IToken-removeAgentOnTokenContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callRemoveAgentOnTokenContract(address _agent) external onlyAdmin {\n        AgentRole(address(token)).removeAgent(_agent);\n    }\n\n    /**\n     *  @dev calls the `addAgentOnIdentityRegistryContract` function on the Identity Registry contract\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-addAgentOnIdentityRegistryContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callAddAgentOnIdentityRegistryContract(address _agent) external onlyAdmin {\n        AgentRole(address(token.identityRegistry())).addAgent(_agent);\n    }\n\n    /**\n     *  @dev calls the `removeAgentOnIdentityRegistryContract` function on the Identity Registry contract\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\n     *  See {IIdentityRegistry-removeAgentOnIdentityRegistryContract}.\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\n     */\n    function callRemoveAgentOnIdentityRegistryContract(address _agent) external onlyAdmin {\n        AgentRole(address(token.identityRegistry())).removeAgent(_agent);\n    }\n\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\n    /// @param callData Interaction data.\n    /// @return result The 4 byte function selector of the call encoded in\n    /// this interaction.\n    function _selector(bytes calldata callData) internal pure returns (bytes4 result) {\n        if (callData.length >= 4) {\n            // NOTE: Read the first word of the interaction's calldata. The\n            // value does not need to be shifted since `bytesN` values are left\n            // aligned, and the value does not need to be masked since masking\n            // occurs when the value is accessed and not stored:\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                result := calldataload(callData.offset)\n            }\n        }\n    }\n}\n"
    },
    "contracts/roles/permissioning/owner/OwnerRoles.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../Roles.sol\";\n\ncontract OwnerRoles is Ownable {\n    using Roles for Roles.Role;\n\n    /// variables\n\n    Roles.Role private _ownerAdmin;\n    Roles.Role private _registryAddressSetter;\n    Roles.Role private _complianceSetter;\n    Roles.Role private _complianceManager;\n    Roles.Role private _claimRegistryManager;\n    Roles.Role private _issuersRegistryManager;\n    Roles.Role private _tokenInfoManager;\n\n    /// events\n\n    event RoleAdded(address indexed _owner, string _role);\n    event RoleRemoved(address indexed _owner, string _role);\n\n    /// modifiers\n\n    modifier onlyAdmin() {\n        require(owner() == msg.sender || isOwnerAdmin(_msgSender()), \"Role: Sender is NOT Admin\");\n        _;\n    }\n\n    /// functions\n\n    function addOwnerAdmin(address _owner) external onlyAdmin {\n        _ownerAdmin.add(_owner);\n        string memory _role = \"OwnerAdmin\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeOwnerAdmin(address _owner) external onlyAdmin {\n        _ownerAdmin.remove(_owner);\n        string memory _role = \"OwnerAdmin\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addRegistryAddressSetter(address _owner) external onlyAdmin {\n        _registryAddressSetter.add(_owner);\n        string memory _role = \"RegistryAddressSetter\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeRegistryAddressSetter(address _owner) external onlyAdmin {\n        _registryAddressSetter.remove(_owner);\n        string memory _role = \"RegistryAddressSetter\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addComplianceSetter(address _owner) external onlyAdmin {\n        _complianceSetter.add(_owner);\n        string memory _role = \"ComplianceSetter\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeComplianceSetter(address _owner) external onlyAdmin {\n        _complianceSetter.remove(_owner);\n        string memory _role = \"ComplianceSetter\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addComplianceManager(address _owner) external onlyAdmin {\n        _complianceManager.add(_owner);\n        string memory _role = \"ComplianceManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeComplianceManager(address _owner) external onlyAdmin {\n        _complianceManager.remove(_owner);\n        string memory _role = \"ComplianceManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addClaimRegistryManager(address _owner) external onlyAdmin {\n        _claimRegistryManager.add(_owner);\n        string memory _role = \"ClaimRegistryManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeClaimRegistryManager(address _owner) external onlyAdmin {\n        _claimRegistryManager.remove(_owner);\n        string memory _role = \"ClaimRegistryManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addIssuersRegistryManager(address _owner) external onlyAdmin {\n        _issuersRegistryManager.add(_owner);\n        string memory _role = \"IssuersRegistryManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeIssuersRegistryManager(address _owner) external onlyAdmin {\n        _issuersRegistryManager.remove(_owner);\n        string memory _role = \"IssuersRegistryManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addTokenInfoManager(address _owner) external onlyAdmin {\n        _tokenInfoManager.add(_owner);\n        string memory _role = \"TokenInfoManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeTokenInfoManager(address _owner) external onlyAdmin {\n        _tokenInfoManager.remove(_owner);\n        string memory _role = \"TokenInfoManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function isOwnerAdmin(address _owner) public view returns (bool) {\n        return _ownerAdmin.has(_owner);\n    }\n\n    function isTokenInfoManager(address _owner) public view returns (bool) {\n        return _tokenInfoManager.has(_owner);\n    }\n\n    function isIssuersRegistryManager(address _owner) public view returns (bool) {\n        return _issuersRegistryManager.has(_owner);\n    }\n\n    function isClaimRegistryManager(address _owner) public view returns (bool) {\n        return _claimRegistryManager.has(_owner);\n    }\n\n    function isComplianceManager(address _owner) public view returns (bool) {\n        return _complianceManager.has(_owner);\n    }\n\n    function isComplianceSetter(address _owner) public view returns (bool) {\n        return _complianceSetter.has(_owner);\n    }\n\n    function isRegistryAddressSetter(address _owner) public view returns (bool) {\n        return _registryAddressSetter.has(_owner);\n    }\n}\n"
    },
    "contracts/roles/permissioning/owner/OwnerRolesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../../Roles.sol\";\n\ncontract OwnerRolesUpgradeable is OwnableUpgradeable\n\n {\n    using Roles for Roles.Role;\n\n    /// variables\n\n    Roles.Role private _ownerAdmin;\n    Roles.Role private _registryAddressSetter;\n    Roles.Role private _complianceSetter;\n    Roles.Role private _complianceManager;\n    Roles.Role private _claimRegistryManager;\n    Roles.Role private _issuersRegistryManager;\n    Roles.Role private _tokenInfoManager;\n\n    /// events\n\n    event RoleAdded(address indexed _owner, string _role);\n    event RoleRemoved(address indexed _owner, string _role);\n\n    /// modifiers\n\n    modifier onlyAdmin() {\n        require(owner() == msg.sender || isOwnerAdmin(_msgSender()), \"Role: Sender is NOT Admin\");\n        _;\n    }\n\n    /// functions\n\n    function addOwnerAdmin(address _owner) external onlyAdmin {\n        _ownerAdmin.add(_owner);\n        string memory _role = \"OwnerAdmin\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeOwnerAdmin(address _owner) external onlyAdmin {\n        _ownerAdmin.remove(_owner);\n        string memory _role = \"OwnerAdmin\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addRegistryAddressSetter(address _owner) external onlyAdmin {\n        _registryAddressSetter.add(_owner);\n        string memory _role = \"RegistryAddressSetter\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeRegistryAddressSetter(address _owner) external onlyAdmin {\n        _registryAddressSetter.remove(_owner);\n        string memory _role = \"RegistryAddressSetter\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addComplianceSetter(address _owner) external onlyAdmin {\n        _complianceSetter.add(_owner);\n        string memory _role = \"ComplianceSetter\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeComplianceSetter(address _owner) external onlyAdmin {\n        _complianceSetter.remove(_owner);\n        string memory _role = \"ComplianceSetter\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addComplianceManager(address _owner) external onlyAdmin {\n        _complianceManager.add(_owner);\n        string memory _role = \"ComplianceManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeComplianceManager(address _owner) external onlyAdmin {\n        _complianceManager.remove(_owner);\n        string memory _role = \"ComplianceManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addClaimRegistryManager(address _owner) external onlyAdmin {\n        _claimRegistryManager.add(_owner);\n        string memory _role = \"ClaimRegistryManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeClaimRegistryManager(address _owner) external onlyAdmin {\n        _claimRegistryManager.remove(_owner);\n        string memory _role = \"ClaimRegistryManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addIssuersRegistryManager(address _owner) external onlyAdmin {\n        _issuersRegistryManager.add(_owner);\n        string memory _role = \"IssuersRegistryManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeIssuersRegistryManager(address _owner) external onlyAdmin {\n        _issuersRegistryManager.remove(_owner);\n        string memory _role = \"IssuersRegistryManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function addTokenInfoManager(address _owner) external onlyAdmin {\n        _tokenInfoManager.add(_owner);\n        string memory _role = \"TokenInfoManager\";\n        emit RoleAdded(_owner, _role);\n    }\n\n    function removeTokenInfoManager(address _owner) external onlyAdmin {\n        _tokenInfoManager.remove(_owner);\n        string memory _role = \"TokenInfoManager\";\n        emit RoleRemoved(_owner, _role);\n    }\n\n    function isOwnerAdmin(address _owner) public view returns (bool) {\n        return _ownerAdmin.has(_owner);\n    }\n\n    function isTokenInfoManager(address _owner) public view returns (bool) {\n        return _tokenInfoManager.has(_owner);\n    }\n\n    function isIssuersRegistryManager(address _owner) public view returns (bool) {\n        return _issuersRegistryManager.has(_owner);\n    }\n\n    function isClaimRegistryManager(address _owner) public view returns (bool) {\n        return _claimRegistryManager.has(_owner);\n    }\n\n    function isComplianceManager(address _owner) public view returns (bool) {\n        return _complianceManager.has(_owner);\n    }\n\n    function isComplianceSetter(address _owner) public view returns (bool) {\n        return _complianceSetter.has(_owner);\n    }\n\n    function isRegistryAddressSetter(address _owner) public view returns (bool) {\n        return _registryAddressSetter.has(_owner);\n    }\n}\n"
    },
    "contracts/roles/Roles.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n"
    },
    "contracts/token/IToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"../registry/interface/IIdentityRegistry.sol\";\nimport \"../compliance/modular/IModularCompliance.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev interface\ninterface IToken is IERC20 {\n\n    /// events\n\n    /**\n     *  this event is emitted when the token information is updated.\n     *  the event is emitted by the token init function and by the setTokenInformation function\n     *  `_newName` is the name of the token\n     *  `_newSymbol` is the symbol of the token\n     *  `_newDecimals` is the decimals of the token\n     *  `_newVersion` is the version of the token, current version is 3.0\n     *  `_newOnchainID` is the address of the onchainID of the token\n     */\n    event UpdatedTokenInformation(string indexed _newName, string indexed _newSymbol, uint8 _newDecimals, string\n    _newVersion, address indexed _newOnchainID);\n\n    /**\n     *  this event is emitted when the IdentityRegistry has been set for the token\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\n     *  `_identityRegistry` is the address of the Identity Registry of the token\n     */\n    event IdentityRegistryAdded(address indexed _identityRegistry);\n\n    /**\n     *  this event is emitted when the Compliance has been set for the token\n     *  the event is emitted by the token constructor and by the setCompliance function\n     *  `_compliance` is the address of the Compliance contract of the token\n     */\n    event ComplianceAdded(address indexed _compliance);\n\n    /**\n     *  this event is emitted when an investor successfully recovers his tokens\n     *  the event is emitted by the recoveryAddress function\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\n     */\n    event RecoverySuccess(address indexed _lostWallet, address indexed _newWallet, address indexed _investorOnchainID);\n\n    /**\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_isFrozen` is the freezing status of the wallet\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\n     */\n    event AddressFrozen(address indexed _userAddress, bool indexed _isFrozen, address indexed _owner);\n\n    /**\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are frozen\n     */\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\n     *  `_amount` is the amount of tokens that are unfrozen\n     */\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\n\n    /**\n     *  this event is emitted when the token is paused\n     *  the event is emitted by the pause function\n     *  `_userAddress` is the address of the wallet that called the pause function\n     */\n    event Paused(address _userAddress);\n\n    /**\n     *  this event is emitted when the token is unpaused\n     *  the event is emitted by the unpause function\n     *  `_userAddress` is the address of the wallet that called the unpause function\n     */\n    event Unpaused(address _userAddress);\n\n    /// functions\n\n    /**\n     *  @dev sets the token name\n     *  @param _name the name of token to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setName(string calldata _name) external;\n\n    /**\n     *  @dev sets the token symbol\n     *  @param _symbol the token symbol to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setSymbol(string calldata _symbol) external;\n\n    /**\n     *  @dev sets the onchain ID of the token\n     *  @param _onchainID the address of the onchain ID to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits a `UpdatedTokenInformation` event\n     */\n    function setOnchainID(address _onchainID) external;\n\n    /**\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Paused` event\n     */\n    function pause() external;\n\n    /**\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `Unpaused` event\n     */\n    function unpause() external;\n\n    /**\n     *  @dev sets an address frozen status for this token.\n     *  @param _userAddress The address for which to update frozen status\n     *  @param _freeze Frozen status of the address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits an `AddressFrozen` event\n     */\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\n\n    /**\n     *  @dev freezes token amount specified for given address.\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be frozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensFrozen` event\n     */\n    function freezePartialTokens(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev unfreezes token amount specified for given address\n     *  @param _userAddress The address for which to update frozen tokens\n     *  @param _amount Amount of Tokens to be unfrozen\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event\n     */\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev sets the Identity Registry for the token\n     *  @param _identityRegistry the address of the Identity Registry to set\n     *  Only the owner of the token smart contract can call this function\n     *  emits an `IdentityRegistryAdded` event\n     */\n    function setIdentityRegistry(address _identityRegistry) external;\n\n    /**\n     *  @dev sets the compliance contract of the token\n     *  @param _compliance the address of the compliance contract to set\n     *  Only the owner of the token smart contract can call this function\n     *  calls bindToken on the compliance contract\n     *  emits a `ComplianceAdded` event\n     */\n    function setCompliance(address _compliance) external;\n\n    /**\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `amount`\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\n     *  account is 100% composed of frozen tokens post-transfer.\n     *  Require that the `to` address is a verified address,\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\n     *  emits a `Transfer` event\n     */\n    function forcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (bool);\n\n    /**\n     *  @dev mint tokens on a wallet\n     *  Improved version of default mint method. Tokens can be minted\n     *  to an address if only it is a verified address as per the security token.\n     *  @param _to Address to mint the tokens to.\n     *  @param _amount Amount of tokens to mint.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `Transfer` event\n     */\n    function mint(address _to, uint256 _amount) external;\n\n    /**\n     *  @dev burn tokens on a wallet\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\n     *  but has a total balance higher or equal to the `value` amount\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\n     *  is 100% composed of frozen tokens post-transaction.\n     *  @param _userAddress Address to burn the tokens from.\n     *  @param _amount Amount of tokens to burn.\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\n     *  emits a `Transfer` event\n     */\n    function burn(address _userAddress, uint256 _amount) external;\n\n    /**\n     *  @dev recovery function used to force transfer tokens from a\n     *  lost wallet to a new wallet for an investor.\n     *  @param _lostWallet the wallet that the investor lost\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\n     *  emits a `Transfer` event if the recovery process is successful\n     *  emits a `RecoverySuccess` event if the recovery process is successful\n     *  emits a `RecoveryFails` event if the recovery process fails\n     */\n    function recoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _investorOnchainID\n    ) external returns (bool);\n\n    /**\n     *  @dev function allowing to issue transfers in batch\n     *  Require that the msg.sender and `to` addresses are not frozen.\n     *  Require that the total value should not exceed available balance.\n     *  Require that the `to` addresses are all verified addresses,\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  emits _toList.length `Transfer` events\n     */\n    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to issue forced transfers in batch\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _fromList The addresses of the senders\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\n     *  emits _fromList.length `Transfer` events\n     */\n    function batchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external;\n\n    /**\n     *  @dev function allowing to mint tokens in batch\n     *  Require that the `_toList` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _toList The addresses of the receivers\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _toList.length `Transfer` events\n     */\n    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to burn tokens in batch\n     *  Require that the `_userAddresses` addresses are all verified addresses\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `Transfer` events\n     */\n    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to set frozen addresses in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses for which to update frozen status\n     *  @param _freeze Frozen status of the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `AddressFrozen` events\n     */\n    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external;\n\n    /**\n     *  @dev function allowing to freeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be frozen\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensFrozen` events\n     */\n    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n\n    /**\n     *  @dev function allowing to unfreeze tokens partially in batch\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\n     *  This function can only be called by a wallet set as agent of the token\n     *  emits _userAddresses.length `TokensUnfrozen` events\n     */\n    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * balanceOf() and transfer().\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the address of the onchainID of the token.\n     * the onchainID of the token gives all the information available\n     * about the token and is managed by the token issuer or his agent.\n     */\n    function onchainID() external view returns (address);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the TREX version of the token.\n     * current version is 3.0.0\n     */\n    function version() external view returns (string memory);\n\n    /**\n     *  @dev Returns the Identity Registry linked to the token\n     */\n    function identityRegistry() external view returns (IIdentityRegistry);\n\n    /**\n     *  @dev Returns the Compliance contract linked to the token\n     */\n    function compliance() external view returns (IModularCompliance);\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view returns (bool);\n\n    /**\n     *  @dev Returns the freezing status of a wallet\n     *  if isFrozen returns `true` the wallet is frozen\n     *  if isFrozen returns `false` the wallet is not frozen\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\n     *  a partial freeze or the whole token could be blocked by pause\n     *  @param _userAddress the address of the wallet on which isFrozen is called\n     */\n    function isFrozen(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\n     */\n    function getFrozenTokens(address _userAddress) external view returns (uint256);\n}\n"
    },
    "contracts/token/Token.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"./IToken.sol\";\nimport \"@onchain-id/solidity/contracts/interface/IIdentity.sol\";\nimport \"./TokenStorage.sol\";\nimport \"../roles/AgentRoleUpgradeable.sol\";\n\ncontract Token is IToken, AgentRoleUpgradeable, TokenStorage {\n\n    /// modifiers\n\n    /// @dev Modifier to make a function callable only when the contract is not paused.\n    modifier whenNotPaused() {\n        require(!_tokenPaused, \"Pausable: paused\");\n        _;\n    }\n\n    /// @dev Modifier to make a function callable only when the contract is paused.\n    modifier whenPaused() {\n        require(_tokenPaused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     *  @dev the constructor initiates the token contract\n     *  msg.sender is set automatically as the owner of the smart contract\n     *  @param _identityRegistry the address of the Identity registry linked to the token\n     *  @param _compliance the address of the compliance contract linked to the token\n     *  @param _name the name of the token\n     *  @param _symbol the symbol of the token\n     *  @param _decimals the decimals of the token\n     *  @param _onchainID the address of the onchainID of the token\n     *  emits an `UpdatedTokenInformation` event\n     *  emits an `IdentityRegistryAdded` event\n     *  emits a `ComplianceAdded` event\n     */\n    function init(\n        address _identityRegistry,\n        address _compliance,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        // _onchainID can be zero address if not set, can be set later by owner\n        address _onchainID\n    ) external initializer {\n        // that require is protecting legacy versions of TokenProxy contracts\n        // as there was a bug with the initializer modifier on these proxies\n        // that check is preventing attackers to call the init functions on those\n        // legacy contracts.\n        require(owner() == address(0), \"already initialized\");\n        require(\n            _identityRegistry != address(0)\n            && _compliance != address(0)\n        , \"invalid argument - zero address\");\n        require(\n            keccak256(abi.encode(_name)) != keccak256(abi.encode(\"\"))\n            && keccak256(abi.encode(_symbol)) != keccak256(abi.encode(\"\"))\n        , \"invalid argument - empty string\");\n        require(0 <= _decimals && _decimals <= 18, \"decimals between 0 and 18\");\n        __Ownable_init();\n        _tokenName = _name;\n        _tokenSymbol = _symbol;\n        _tokenDecimals = _decimals;\n        _tokenOnchainID = _onchainID;\n        _tokenPaused = true;\n        setIdentityRegistry(_identityRegistry);\n        setCompliance(_compliance);\n        emit UpdatedTokenInformation(_tokenName, _tokenSymbol, _tokenDecimals, _TOKEN_VERSION, _tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {IERC20-approve}.\n     */\n    function approve(address _spender, uint256 _amount) external virtual override returns (bool) {\n        _approve(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n     *  @dev See {ERC20-increaseAllowance}.\n     */\n    function increaseAllowance(address _spender, uint256 _addedValue) external virtual returns (bool) {\n        _approve(msg.sender, _spender, _allowances[msg.sender][_spender] + (_addedValue));\n        return true;\n    }\n\n    /**\n     *  @dev See {ERC20-decreaseAllowance}.\n     */\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external virtual returns (bool) {\n        _approve(msg.sender, _spender, _allowances[msg.sender][_spender] - _subtractedValue);\n        return true;\n    }\n\n    /**\n     *  @dev See {IToken-setName}.\n     */\n    function setName(string calldata _name) external override onlyOwner {\n        require(keccak256(abi.encode(_name)) != keccak256(abi.encode(\"\")), \"invalid argument - empty string\");\n        _tokenName = _name;\n        emit UpdatedTokenInformation(_tokenName, _tokenSymbol, _tokenDecimals, _TOKEN_VERSION, _tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {IToken-setSymbol}.\n     */\n    function setSymbol(string calldata _symbol) external override onlyOwner {\n        require(keccak256(abi.encode(_symbol)) != keccak256(abi.encode(\"\")), \"invalid argument - empty string\");\n        _tokenSymbol = _symbol;\n        emit UpdatedTokenInformation(_tokenName, _tokenSymbol, _tokenDecimals, _TOKEN_VERSION, _tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {IToken-setOnchainID}.\n     *  if _onchainID is set at zero address it means no ONCHAINID is bound to this token\n     */\n    function setOnchainID(address _onchainID) external override onlyOwner {\n        _tokenOnchainID = _onchainID;\n        emit UpdatedTokenInformation(_tokenName, _tokenSymbol, _tokenDecimals, _TOKEN_VERSION, _tokenOnchainID);\n    }\n\n    /**\n     *  @dev See {IToken-pause}.\n     */\n    function pause() external override onlyAgent whenNotPaused {\n        _tokenPaused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     *  @dev See {IToken-unpause}.\n     */\n    function unpause() external override onlyAgent whenPaused {\n        _tokenPaused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    /**\n     *  @dev See {IToken-batchTransfer}.\n     */\n    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _toList.length; i++) {\n            transfer(_toList[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @notice ERC-20 overridden function that include logic to check for trade validity.\n     *  Require that the from and to addresses are not frozen.\n     *  Require that the value should not exceed available balance .\n     *  Require that the to address is a verified address\n     *  @param _from The address of the sender\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override whenNotPaused returns (bool) {\n        require(!_frozen[_to] && !_frozen[_from], \"wallet is frozen\");\n        require(_amount <= balanceOf(_from) - (_frozenTokens[_from]), \"Insufficient Balance\");\n        if (_tokenIdentityRegistry.isVerified(_to) && _tokenCompliance.canTransfer(_from, _to, _amount)) {\n            _approve(_from, msg.sender, _allowances[_from][msg.sender] - (_amount));\n            _transfer(_from, _to, _amount);\n            _tokenCompliance.transferred(_from, _to, _amount);\n            return true;\n        }\n        revert(\"Transfer not possible\");\n    }\n\n    /**\n     *  @dev See {IToken-batchForcedTransfer}.\n     */\n    function batchForcedTransfer(\n        address[] calldata _fromList,\n        address[] calldata _toList,\n        uint256[] calldata _amounts\n    ) external override {\n        for (uint256 i = 0; i < _fromList.length; i++) {\n            forcedTransfer(_fromList[i], _toList[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IToken-batchMint}.\n     */\n    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _toList.length; i++) {\n            mint(_toList[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IToken-batchBurn}.\n     */\n    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            burn(_userAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IToken-batchSetAddressFrozen}.\n     */\n    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            setAddressFrozen(_userAddresses[i], _freeze[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IToken-batchFreezePartialTokens}.\n     */\n    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            freezePartialTokens(_userAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IToken-batchUnfreezePartialTokens}.\n     */\n    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            unfreezePartialTokens(_userAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     *  @dev See {IToken-recoveryAddress}.\n     */\n    function recoveryAddress(\n        address _lostWallet,\n        address _newWallet,\n        address _investorOnchainID\n    ) external override onlyAgent returns (bool) {\n        require(balanceOf(_lostWallet) != 0, \"no tokens to recover\");\n        IIdentity _onchainID = IIdentity(_investorOnchainID);\n        bytes32 _key = keccak256(abi.encode(_newWallet));\n        if (_onchainID.keyHasPurpose(_key, 1)) {\n            uint256 investorTokens = balanceOf(_lostWallet);\n            uint256 frozenTokens = _frozenTokens[_lostWallet];\n            _tokenIdentityRegistry.registerIdentity(_newWallet, _onchainID, _tokenIdentityRegistry.investorCountry\n                (_lostWallet));\n            forcedTransfer(_lostWallet, _newWallet, investorTokens);\n            if (frozenTokens > 0) {\n                freezePartialTokens(_newWallet, frozenTokens);\n            }\n            if (_frozen[_lostWallet] == true) {\n                setAddressFrozen(_newWallet, true);\n            }\n            _tokenIdentityRegistry.deleteIdentity(_lostWallet);\n            emit RecoverySuccess(_lostWallet, _newWallet, _investorOnchainID);\n            return true;\n        }\n        revert(\"Recovery not possible\");\n    }\n\n    /**\n     *  @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     *  @dev See {IERC20-allowance}.\n     */\n    function allowance(address _owner, address _spender) external view virtual override returns (uint256) {\n        return _allowances[_owner][_spender];\n    }\n\n    /**\n     *  @dev See {IToken-identityRegistry}.\n     */\n    function identityRegistry() external view override returns (IIdentityRegistry) {\n        return _tokenIdentityRegistry;\n    }\n\n    /**\n     *  @dev See {IToken-compliance}.\n     */\n    function compliance() external view override returns (IModularCompliance) {\n        return _tokenCompliance;\n    }\n\n    /**\n     *  @dev See {IToken-paused}.\n     */\n    function paused() external view override returns (bool) {\n        return _tokenPaused;\n    }\n\n    /**\n     *  @dev See {IToken-isFrozen}.\n     */\n    function isFrozen(address _userAddress) external view override returns (bool) {\n        return _frozen[_userAddress];\n    }\n\n    /**\n     *  @dev See {IToken-getFrozenTokens}.\n     */\n    function getFrozenTokens(address _userAddress) external view override returns (uint256) {\n        return _frozenTokens[_userAddress];\n    }\n\n    /**\n     *  @dev See {IToken-decimals}.\n     */\n    function decimals() external view override returns (uint8) {\n        return _tokenDecimals;\n    }\n\n    /**\n     *  @dev See {IToken-name}.\n     */\n    function name() external view override returns (string memory) {\n        return _tokenName;\n    }\n\n    /**\n     *  @dev See {IToken-onchainID}.\n     */\n    function onchainID() external view override returns (address) {\n        return _tokenOnchainID;\n    }\n\n    /**\n     *  @dev See {IToken-symbol}.\n     */\n    function symbol() external view override returns (string memory) {\n        return _tokenSymbol;\n    }\n\n    /**\n     *  @dev See {IToken-version}.\n     */\n    function version() external pure override returns (string memory) {\n        return _TOKEN_VERSION;\n    }\n\n    /**\n     *  @notice ERC-20 overridden function that include logic to check for trade validity.\n     *  Require that the msg.sender and to addresses are not frozen.\n     *  Require that the value should not exceed available balance .\n     *  Require that the to address is a verified address\n     *  @param _to The address of the receiver\n     *  @param _amount The number of tokens to transfer\n     *  @return `true` if successful and revert if unsuccessful\n     */\n    function transfer(address _to, uint256 _amount) public override whenNotPaused returns (bool) {\n        require(!_frozen[_to] && !_frozen[msg.sender], \"wallet is frozen\");\n        require(_amount <= balanceOf(msg.sender) - (_frozenTokens[msg.sender]), \"Insufficient Balance\");\n        if (_tokenIdentityRegistry.isVerified(_to) && _tokenCompliance.canTransfer(msg.sender, _to, _amount)) {\n            _transfer(msg.sender, _to, _amount);\n            _tokenCompliance.transferred(msg.sender, _to, _amount);\n            return true;\n        }\n        revert(\"Transfer not possible\");\n    }\n\n    /**\n     *  @dev See {IToken-forcedTransfer}.\n     */\n    function forcedTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public override onlyAgent returns (bool) {\n        require(balanceOf(_from) >= _amount, \"sender balance too low\");\n        uint256 freeBalance = balanceOf(_from) - (_frozenTokens[_from]);\n        if (_amount > freeBalance) {\n            uint256 tokensToUnfreeze = _amount - (freeBalance);\n            _frozenTokens[_from] = _frozenTokens[_from] - (tokensToUnfreeze);\n            emit TokensUnfrozen(_from, tokensToUnfreeze);\n        }\n        if (_tokenIdentityRegistry.isVerified(_to)) {\n            _transfer(_from, _to, _amount);\n            _tokenCompliance.transferred(_from, _to, _amount);\n            return true;\n        }\n        revert(\"Transfer not possible\");\n    }\n\n    /**\n     *  @dev See {IToken-mint}.\n     */\n    function mint(address _to, uint256 _amount) public override onlyAgent {\n        require(_tokenIdentityRegistry.isVerified(_to), \"Identity is not verified.\");\n        require(_tokenCompliance.canTransfer(address(0), _to, _amount), \"Compliance not followed\");\n        _mint(_to, _amount);\n        _tokenCompliance.created(_to, _amount);\n    }\n\n    /**\n     *  @dev See {IToken-burn}.\n     */\n    function burn(address _userAddress, uint256 _amount) public override onlyAgent {\n        require(balanceOf(_userAddress) >= _amount, \"cannot burn more than balance\");\n        uint256 freeBalance = balanceOf(_userAddress) - _frozenTokens[_userAddress];\n        if (_amount > freeBalance) {\n            uint256 tokensToUnfreeze = _amount - (freeBalance);\n            _frozenTokens[_userAddress] = _frozenTokens[_userAddress] - (tokensToUnfreeze);\n            emit TokensUnfrozen(_userAddress, tokensToUnfreeze);\n        }\n        _burn(_userAddress, _amount);\n        _tokenCompliance.destroyed(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {IToken-setAddressFrozen}.\n     */\n    function setAddressFrozen(address _userAddress, bool _freeze) public override onlyAgent {\n        _frozen[_userAddress] = _freeze;\n\n        emit AddressFrozen(_userAddress, _freeze, msg.sender);\n    }\n\n    /**\n     *  @dev See {IToken-freezePartialTokens}.\n     */\n    function freezePartialTokens(address _userAddress, uint256 _amount) public override onlyAgent {\n        uint256 balance = balanceOf(_userAddress);\n        require(balance >= _frozenTokens[_userAddress] + _amount, \"Amount exceeds available balance\");\n        _frozenTokens[_userAddress] = _frozenTokens[_userAddress] + (_amount);\n        emit TokensFrozen(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {IToken-unfreezePartialTokens}.\n     */\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) public override onlyAgent {\n        require(_frozenTokens[_userAddress] >= _amount, \"Amount should be less than or equal to frozen tokens\");\n        _frozenTokens[_userAddress] = _frozenTokens[_userAddress] - (_amount);\n        emit TokensUnfrozen(_userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {IToken-setIdentityRegistry}.\n     */\n    function setIdentityRegistry(address _identityRegistry) public override onlyOwner {\n        _tokenIdentityRegistry = IIdentityRegistry(_identityRegistry);\n        emit IdentityRegistryAdded(_identityRegistry);\n    }\n\n    /**\n     *  @dev See {IToken-setCompliance}.\n     */\n    function setCompliance(address _compliance) public override onlyOwner {\n        if (address(_tokenCompliance) != address(0)) {\n            _tokenCompliance.unbindToken(address(this));\n        }\n        _tokenCompliance = IModularCompliance(_compliance);\n        _tokenCompliance.bindToken(address(this));\n        emit ComplianceAdded(_compliance);\n    }\n\n    /**\n     *  @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address _userAddress) public view override returns (uint256) {\n        return _balances[_userAddress];\n    }\n\n    /**\n     *  @dev See {ERC20-_transfer}.\n     */\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal virtual {\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(_from, _to, _amount);\n\n        _balances[_from] = _balances[_from] - _amount;\n        _balances[_to] = _balances[_to] + _amount;\n        emit Transfer(_from, _to, _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_mint}.\n     */\n    function _mint(address _userAddress, uint256 _amount) internal virtual {\n        require(_userAddress != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), _userAddress, _amount);\n\n        _totalSupply = _totalSupply + _amount;\n        _balances[_userAddress] = _balances[_userAddress] + _amount;\n        emit Transfer(address(0), _userAddress, _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_burn}.\n     */\n    function _burn(address _userAddress, uint256 _amount) internal virtual {\n        require(_userAddress != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(_userAddress, address(0), _amount);\n\n        _balances[_userAddress] = _balances[_userAddress] - _amount;\n        _totalSupply = _totalSupply - _amount;\n        emit Transfer(_userAddress, address(0), _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_approve}.\n     */\n    function _approve(\n        address _owner,\n        address _spender,\n        uint256 _amount\n    ) internal virtual {\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    /**\n     *  @dev See {ERC20-_beforeTokenTransfer}.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual {}\n}\n"
    },
    "contracts/token/TokenStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\nimport \"../compliance/modular/IModularCompliance.sol\";\nimport \"../registry/interface/IIdentityRegistry.sol\";\n\ncontract TokenStorage {\n    /// @dev ERC20 basic variables\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n    uint256 internal _totalSupply;\n\n    /// @dev Token information\n    string internal _tokenName;\n    string internal _tokenSymbol;\n    uint8 internal _tokenDecimals;\n    address internal _tokenOnchainID;\n    string internal constant _TOKEN_VERSION = \"4.1.3\";\n\n    /// @dev Variables of freeze and pause functions\n    mapping(address => bool) internal _frozen;\n    mapping(address => uint256) internal _frozenTokens;\n\n    bool internal _tokenPaused = false;\n\n    /// @dev Identity Registry contract used by the onchain validator system\n    IIdentityRegistry internal _tokenIdentityRegistry;\n\n    /// @dev Compliance contract linked to the onchain validator system\n    IModularCompliance internal _tokenCompliance;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}