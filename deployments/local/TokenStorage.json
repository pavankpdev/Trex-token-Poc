{
  "address": "0x30867103b41dc5b9E02804E5a54D29aD7B5B24d7",
  "abi": [],
  "transactionHash": "0x09dc5389146ad82231be39433c3e3551259dbea267aff1db2f0633e3c56b7851",
  "receipt": {
    "to": null,
    "from": "0x59ac0cC992d1d2b9AE205348A455A86e0C0217de",
    "contractAddress": "0x30867103b41dc5b9E02804E5a54D29aD7B5B24d7",
    "transactionIndex": 0,
    "gasUsed": "69444",
    "logsBloom": "0x
    "blockHash": "0x7b57d5cbbe7a62cb23ca6d562ef1e883613a778053019327c11ce7d315672fb3",
    "transactionHash": "0x09dc5389146ad82231be39433c3e3551259dbea267aff1db2f0633e3c56b7851",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "69444",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c0c52c40610a5ff1d5845f3e3f857a08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain.\"},\"_balances\":{\"details\":\"ERC20 basic variables\"},\"_frozen\":{\"details\":\"Variables of freeze and pause functions\"},\"_tokenCompliance\":{\"details\":\"Compliance contract linked to the onchain validator system\"},\"_tokenIdentityRegistry\":{\"details\":\"Identity Registry contract used by the onchain validator system\"},\"_tokenName\":{\"details\":\"Token information\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TokenStorage.sol\":\"TokenStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    /**\\n     * @dev Emitted when a claim is revoked.\\n     *\\n     * Specification: MUST be triggered when revoking a claim.\\n     */\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @notice will fetch the claim from the identity contract (unsafe).\\n     * @param _claimId the id of the claim\\n     * @param _identity the address of the identity contract\\n     * @return isRevoked true when the claim is revoked\\n     */\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @param signature the signature of the claim\\n     */\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n\\n    /**\\n     * @dev Returns revocation status of a claim.\\n     * @param _sig the signature of the claim\\n     * @return isRevoked true if the claim is revoked and false otherwise\\n     */\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n\\n    /**\\n     * @dev returns the address that signed the given data\\n     * @param sig the signature of the data\\n     * @param dataHash the data that was signed\\n     * returns the address that signed dataHash and created the signature sig\\n     */\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n}\\n\",\"keccak256\":\"0xa7372faa967bc7eaedf66ec51907a21ca789123ad8a6fd371b32f2d2a6f27817\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was changed.\\n     *\\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n     */\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Add or update a claim from an issuer.\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     */\\n    function addClaim(\\n        uint256 _topic,\\n        uint256 _scheme,\\n        address issuer,\\n        bytes calldata _signature,\\n        bytes calldata _data,\\n        string calldata _uri)\\n    external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(bytes32 _claimId)\\n    external view returns(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri);\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {}\\n\",\"keccak256\":\"0x419198390ae57e3a090a454452931ac8a6605acfd296809c43d4966c9cea2d19\",\"license\":\"GPL-3.0\"},\"contracts/compliance/modular/IModularCompliance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\ninterface IModularCompliance {\\n\\n    /// events\\n\\n    /**\\n     *  @dev Event emitted for each executed interaction with a module contract.\\n     *  For gas efficiency, only the interaction calldata selector (first 4\\n     *  bytes) is included in the event. For interactions without calldata or\\n     *  whose calldata is shorter than 4 bytes, the selector will be `0`.\\n     */\\n    event ModuleInteraction(address indexed target, bytes4 selector);\\n\\n    /**\\n     *  this event is emitted when a token has been bound to the compliance contract\\n     *  the event is emitted by the bindToken function\\n     *  `_token` is the address of the token to bind\\n     */\\n    event TokenBound(address _token);\\n\\n    /**\\n     *  this event is emitted when a token has been unbound from the compliance contract\\n     *  the event is emitted by the unbindToken function\\n     *  `_token` is the address of the token to unbind\\n     */\\n    event TokenUnbound(address _token);\\n\\n    /**\\n     *  this event is emitted when a module has been added to the list of modules bound to the compliance contract\\n     *  the event is emitted by the addModule function\\n     *  `_module` is the address of the compliance module\\n     */\\n    event ModuleAdded(address indexed _module);\\n\\n    /**\\n     *  this event is emitted when a module has been removed from the list of modules bound to the compliance contract\\n     *  the event is emitted by the removeModule function\\n     *  `_module` is the address of the compliance module\\n     */\\n    event ModuleRemoved(address indexed _module);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev binds a token to the compliance contract\\n     *  @param _token address of the token to bind\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a TokenBound event\\n     */\\n    function bindToken(address _token) external;\\n\\n    /**\\n     *  @dev unbinds a token from the compliance contract\\n     *  @param _token address of the token to unbind\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a TokenUnbound event\\n     */\\n    function unbindToken(address _token) external;\\n\\n    /**\\n     *  @dev adds a module to the list of compliance modules\\n     *  @param _module address of the module to add\\n     *  there cannot be more than 25 modules bound to the modular compliance for gas cost reasons\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a ModuleAdded event\\n     */\\n    function addModule(address _module) external;\\n\\n    /**\\n     *  @dev removes a module from the list of compliance modules\\n     *  @param _module address of the module to remove\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a ModuleRemoved event\\n     */\\n    function removeModule(address _module) external;\\n\\n    /**\\n     *  @dev calls any function on bound modules\\n     *  can be called only on bound modules\\n     *  @param callData the bytecode for interaction with the module, abi encoded\\n     *  @param _module The address of the module\\n     *  This function can be called only by the modular compliance owner\\n     *  emits a `ModuleInteraction` event\\n     */\\n    function callModuleFunction(bytes calldata callData, address _module) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are transferred\\n     *  from one wallet to another\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     *  This function calls moduleTransferAction() on each module bound to the compliance contract\\n     */\\n    function transferred(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are created on a wallet\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the minting\\n     *  This function calls moduleMintAction() on each module bound to the compliance contract\\n     */\\n    function created(address _to, uint256 _amount) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are destroyed from a wallet\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _from The address on which tokens are burnt\\n     *  @param _amount The amount of tokens involved in the burn\\n     *  This function calls moduleBurnAction() on each module bound to the compliance contract\\n     */\\n    function destroyed(address _from, uint256 _amount) external;\\n\\n    /**\\n     *  @dev checks that the transfer is compliant.\\n     *  default compliance always returns true\\n     *  READ ONLY FUNCTION, this function cannot be used to increment\\n     *  counters, emit events, ...\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     *  This function will call moduleCheck() on every module bound to the compliance\\n     *  If each of the module checks return TRUE, this function will return TRUE as well\\n     *  returns FALSE otherwise\\n     */\\n    function canTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (bool);\\n\\n    /**\\n     *  @dev getter for the modules bound to the compliance contract\\n     *  returns address array of module contracts bound to the compliance\\n     */\\n    function getModules() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev getter for the address of the token bound\\n     *  returns the address of the token\\n     */\\n    function getTokenBound() external view returns (address);\\n\\n    /**\\n     *  @dev checks if a module is bound to the compliance contract\\n     *  returns true if module is bound, false otherwise\\n     */\\n    function isModuleBound(address _module) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf632b47a306502ce66a0e432c7c3a7d3290ab8325a854bdefe2268d61fb7cc7f\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\ninterface IClaimTopicsRegistry {\\n    /**\\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\\n     *  the event is emitted by the 'addClaimTopic' function\\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\\n     */\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n\\n    /**\\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\\n     *  the event is emitted by the 'removeClaimTopic' function\\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\\n     */\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    /**\\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\\n     * Only owner can call.\\n     * emits `ClaimTopicAdded` event\\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\\n     * @param _claimTopic The claim topic index\\n     */\\n    function addClaimTopic(uint256 _claimTopic) external;\\n\\n    /**\\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\\n     *  Only owner can call.\\n     *  emits `ClaimTopicRemoved` event\\n     *  @param _claimTopic The claim topic index\\n     */\\n    function removeClaimTopic(uint256 _claimTopic) external;\\n\\n    /**\\n     *  @dev Get the trusted claim topics for the security token\\n     *  @return Array of trusted claim topics\\n     */\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x878a76f41e117a67b97a698755e9875701282fcc12890c5ebaf85264808e5608\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ITrustedIssuersRegistry.sol\\\";\\nimport \\\"./IClaimTopicsRegistry.sol\\\";\\nimport \\\"./IIdentityRegistryStorage.sol\\\";\\n\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\n\\ninterface IIdentityRegistry {\\n    /**\\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\\n     */\\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\\n\\n    /**\\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `identityStorage` is the address of the Identity Registry Storage contract\\n     */\\n    event IdentityStorageSet(address indexed identityStorage);\\n\\n    /**\\n     *  this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\\n     */\\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\\n\\n    /**\\n     *  this event is emitted when an Identity is registered into the Identity Registry.\\n     *  the event is emitted by the 'registerIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity is removed from the Identity Registry.\\n     *  the event is emitted by the 'deleteIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity has been updated\\n     *  the event is emitted by the 'updateIdentity' function\\n     *  `oldIdentity` is the old Identity contract's address to update\\n     *  `newIdentity` is the new Identity contract's\\n     */\\n    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\\n\\n    /**\\n     *  this event is emitted when an Identity's country has been updated\\n     *  the event is emitted by the 'updateCountry' function\\n     *  `investorAddress` is the address on which the country has been updated\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\n     */\\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\\n\\n    /**\\n     *  @dev Register an identity contract corresponding to a user address.\\n     *  Requires that the user doesn't have an identity contract already registered.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's identity contract\\n     *  @param _country The country of the investor\\n     *  emits `IdentityRegistered` event\\n     */\\n    function registerIdentity(\\n        address _userAddress,\\n        IIdentity _identity,\\n        uint16 _country\\n    ) external;\\n\\n    /**\\n     *  @dev Removes an user from the identity registry.\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user to be removed\\n     *  emits `IdentityRemoved` event\\n     */\\n    function deleteIdentity(address _userAddress) external;\\n\\n    /**\\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\\n     *  emits `IdentityStorageSet` event\\n     */\\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\\n\\n    /**\\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\\n     *  emits `ClaimTopicsRegistrySet` event\\n     */\\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\\n\\n    /**\\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\\n     *  emits `TrustedIssuersRegistrySet` event\\n     */\\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\\n\\n    /**\\n     *  @dev Updates the country corresponding to a user address.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _country The new country of the user\\n     *  emits `CountryUpdated` event\\n     */\\n    function updateCountry(address _userAddress, uint16 _country) external;\\n\\n    /**\\n     *  @dev Updates an identity contract corresponding to a user address.\\n     *  Requires that the user address should be the owner of the identity contract.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's new identity contract\\n     *  emits `IdentityUpdated` event\\n     */\\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\\n\\n    /**\\n     *  @dev function allowing to register identities in batch\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  Requires that none of the users has an identity contract already registered.\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses of the users\\n     *  @param _identities The addresses of the corresponding identity contracts\\n     *  @param _countries The countries of the corresponding investors\\n     *  emits _userAddresses.length `IdentityRegistered` events\\n     */\\n    function batchRegisterIdentity(\\n        address[] calldata _userAddresses,\\n        IIdentity[] calldata _identities,\\n        uint16[] calldata _countries\\n    ) external;\\n\\n    /**\\n     *  @dev This functions checks whether a wallet has its Identity registered or not\\n     *  in the Identity Registry.\\n     *  @param _userAddress The address of the user to be checked.\\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\\n     */\\n    function contains(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev This functions checks whether an identity contract\\n     *  corresponding to the provided user address has the required claims or not based\\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\\n     *  @param _userAddress The address of the user to be verified.\\n     *  @return 'True' if the address is verified, 'false' if not.\\n     */\\n    function isVerified(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the onchainID of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function identity(address _userAddress) external view returns (IIdentity);\\n\\n    /**\\n     *  @dev Returns the country code of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function investorCountry(address _userAddress) external view returns (uint16);\\n\\n    /**\\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\\n     */\\n    function identityStorage() external view returns (IIdentityRegistryStorage);\\n\\n    /**\\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\\n     */\\n    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\\n\\n    /**\\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\\n     */\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\\n}\\n\",\"keccak256\":\"0xce63ed845f95b5fe108f16029a6cbe77df130c37e91fed3651098aab7ac82747\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\n\\ninterface IIdentityRegistryStorage {\\n\\n    /// events\\n\\n    /**\\n     *  this event is emitted when an Identity is registered into the storage contract.\\n     *  the event is emitted by the 'registerIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityStored(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity is removed from the storage contract.\\n     *  the event is emitted by the 'deleteIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityUnstored(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity has been updated\\n     *  the event is emitted by the 'updateIdentity' function\\n     *  `oldIdentity` is the old Identity contract's address to update\\n     *  `newIdentity` is the new Identity contract's\\n     */\\n    event IdentityModified(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\\n\\n    /**\\n     *  this event is emitted when an Identity's country has been updated\\n     *  the event is emitted by the 'updateCountry' function\\n     *  `investorAddress` is the address on which the country has been updated\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\n     */\\n    event CountryModified(address indexed investorAddress, uint16 indexed country);\\n\\n    /**\\n     *  this event is emitted when an Identity Registry is bound to the storage contract\\n     *  the event is emitted by the 'addIdentityRegistry' function\\n     *  `identityRegistry` is the address of the identity registry added\\n     */\\n    event IdentityRegistryBound(address indexed identityRegistry);\\n\\n    /**\\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\\n     *  the event is emitted by the 'removeIdentityRegistry' function\\n     *  `identityRegistry` is the address of the identity registry removed\\n     */\\n    event IdentityRegistryUnbound(address indexed identityRegistry);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev adds an identity contract corresponding to a user address in the storage.\\n     *  Requires that the user doesn't have an identity contract already registered.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's identity contract\\n     *  @param _country The country of the investor\\n     *  emits `IdentityStored` event\\n     */\\n    function addIdentityToStorage(\\n        address _userAddress,\\n        IIdentity _identity,\\n        uint16 _country\\n    ) external;\\n\\n    /**\\n     *  @dev Removes an user from the storage.\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user to be removed\\n     *  emits `IdentityUnstored` event\\n     */\\n    function removeIdentityFromStorage(address _userAddress) external;\\n\\n    /**\\n     *  @dev Updates the country corresponding to a user address.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _country The new country of the user\\n     *  emits `CountryModified` event\\n     */\\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\\n\\n    /**\\n     *  @dev Updates an identity contract corresponding to a user address.\\n     *  Requires that the user address should be the owner of the identity contract.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's new identity contract\\n     *  emits `IdentityModified` event\\n     */\\n    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external;\\n\\n    /**\\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\\n     *  cannot bind more than 300 IR to 1 IRS\\n     *  @param _identityRegistry The identity registry address to add.\\n     */\\n    function bindIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\\n     *  @param _identityRegistry The identity registry address to remove.\\n     */\\n    function unbindIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @dev Returns the identity registries linked to the storage contract\\n     */\\n    function linkedIdentityRegistries() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Returns the onchainID of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function storedIdentity(address _userAddress) external view returns (IIdentity);\\n\\n    /**\\n     *  @dev Returns the country code of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function storedInvestorCountry(address _userAddress) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x8ada486c1c9fe45156df6bde7326dd2454ebf16b00caf003915c82847b08cfee\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\n\\ninterface ITrustedIssuersRegistry {\\n    /**\\n     *  this event is emitted when a trusted issuer is added in the registry.\\n     *  the event is emitted by the addTrustedIssuer function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\\n     */\\n    event TrustedIssuerAdded(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\\n\\n    /**\\n     *  this event is emitted when a trusted issuer is removed from the registry.\\n     *  the event is emitted by the removeTrustedIssuer function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     */\\n    event TrustedIssuerRemoved(IClaimIssuer indexed trustedIssuer);\\n\\n    /**\\n     *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\\n     *  the event is emitted by the updateIssuerClaimTopics function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\\n     */\\n    event ClaimTopicsUpdated(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\\n\\n    /**\\n     *  @dev registers a ClaimIssuer contract as trusted claim issuer.\\n     *  Requires that a ClaimIssuer contract doesn't already exist\\n     *  Requires that the claimTopics set is not empty\\n     *  Requires that there is no more than 15 claimTopics\\n     *  Requires that there is no more than 50 Trusted issuers\\n     *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `TrustedIssuerAdded` event\\n     */\\n    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\\n\\n    /**\\n     *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\\n     *  Requires that the claim issuer contract to be registered first\\n     *  @param _trustedIssuer the claim issuer to remove.\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `TrustedIssuerRemoved` event\\n     */\\n    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external;\\n\\n    /**\\n     *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\\n     *  Requires that this ClaimIssuer contract already exists in the registry\\n     *  Requires that the provided claimTopics set is not empty\\n     *  Requires that there is no more than 15 claimTopics\\n     *  @param _trustedIssuer the claim issuer to update.\\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `ClaimTopicsUpdated` event\\n     */\\n    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\\n\\n    /**\\n     *  @dev Function for getting all the trusted claim issuers stored.\\n     *  @return array of all claim issuers registered.\\n     */\\n    function getTrustedIssuers() external view returns (IClaimIssuer[] memory);\\n\\n    /**\\n     *  @dev Function for getting all the trusted issuer allowed for a given claim topic.\\n     *  @param claimTopic the claim topic to get the trusted issuers for.\\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\\n     */\\n    function getTrustedIssuersForClaimTopic(uint256 claimTopic) external view returns (IClaimIssuer[] memory);\\n\\n    /**\\n     *  @dev Checks if the ClaimIssuer contract is trusted\\n     *  @param _issuer the address of the ClaimIssuer contract\\n     *  @return true if the issuer is trusted, false otherwise.\\n     */\\n    function isTrustedIssuer(address _issuer) external view returns (bool);\\n\\n    /**\\n     *  @dev Function for getting all the claim topic of trusted claim issuer\\n     *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\\n     *  @param _trustedIssuer the trusted issuer concerned.\\n     *  @return The set of claim topics that the trusted issuer is allowed to emit\\n     */\\n    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view returns (uint256[] memory);\\n\\n    /**\\n     *  @dev Function for checking if the trusted claim issuer is allowed\\n     *  to emit a certain claim topic\\n     *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\\n     *  @return true if the issuer is trusted for this claim topic.\\n     */\\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf85a074a00edd299b7e980da614debe8b17af0dac4a3f98d5cba7e6f2a3a8263\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\nimport \\\"../compliance/modular/IModularCompliance.sol\\\";\\nimport \\\"../registry/interface/IIdentityRegistry.sol\\\";\\n\\ncontract TokenStorage {\\n    /// @dev ERC20 basic variables\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n    uint256 internal _totalSupply;\\n\\n    /// @dev Token information\\n    string internal _tokenName;\\n    string internal _tokenSymbol;\\n    uint8 internal _tokenDecimals;\\n    address internal _tokenOnchainID;\\n    string internal constant _TOKEN_VERSION = \\\"4.1.3\\\";\\n\\n    /// @dev Variables of freeze and pause functions\\n    mapping(address => bool) internal _frozen;\\n    mapping(address => uint256) internal _frozenTokens;\\n\\n    bool internal _tokenPaused = false;\\n\\n    /// @dev Identity Registry contract used by the onchain validator system\\n    IIdentityRegistry internal _tokenIdentityRegistry;\\n\\n    /// @dev Compliance contract linked to the onchain validator system\\n    IModularCompliance internal _tokenCompliance;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2e1790387d8c66a86d05112d4fbddaa740ba83c0f1ec27d6027a397d3fe60fca\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526008805460ff19169055348015601957600080fd5b50603f8060276000396000f3fe6080604052600080fdfea2646970667358221220608692c1528593e569c2f2908d0e07cd19673d8255e0bef7029a65278786adb164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220608692c1528593e569c2f2908d0e07cd19673d8255e0bef7029a65278786adb164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain."
      },
      "_balances": {
        "details": "ERC20 basic variables"
      },
      "_frozen": {
        "details": "Variables of freeze and pause functions"
      },
      "_tokenCompliance": {
        "details": "Compliance contract linked to the onchain validator system"
      },
      "_tokenIdentityRegistry": {
        "details": "Identity Registry contract used by the onchain validator system"
      },
      "_tokenName": {
        "details": "Token information"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33378,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33384,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 33386,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 33389,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 33391,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenSymbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 33393,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenDecimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 33395,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenOnchainID",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 33403,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_frozen",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33407,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_frozenTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33410,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenPaused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 33414,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenIdentityRegistry",
        "offset": 1,
        "slot": "8",
        "type": "t_contract(IIdentityRegistry)27267"
      },
      {
        "astId": 33418,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "_tokenCompliance",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IModularCompliance)15517"
      },
      {
        "astId": 33423,
        "contract": "contracts/token/TokenStorage.sol:TokenStorage",
        "label": "__gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IIdentityRegistry)27267": {
        "encoding": "inplace",
        "label": "contract IIdentityRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IModularCompliance)15517": {
        "encoding": "inplace",
        "label": "contract IModularCompliance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}